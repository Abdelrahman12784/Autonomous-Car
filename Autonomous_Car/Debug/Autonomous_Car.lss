
Autonomous_Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004e28  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000058  00800060  00004e28  00004ebc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002a  008000b8  008000b8  00004f14  2**0
                  ALLOC
  3 .stab         000047d0  00000000  00000000  00004f14  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a66  00000000  00000000  000096e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000b14a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000b28a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000b3fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000d043  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000df2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ecdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ee3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000f0c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f897  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 c1 15 	jmp	0x2b82	; 0x2b82 <__vector_1>
       8:	0c 94 f8 15 	jmp	0x2bf0	; 0x2bf0 <__vector_2>
       c:	0c 94 2f 16 	jmp	0x2c5e	; 0x2c5e <__vector_3>
      10:	0c 94 da 0d 	jmp	0x1bb4	; 0x1bb4 <__vector_4>
      14:	0c 94 9d 0d 	jmp	0x1b3a	; 0x1b3a <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 60 0d 	jmp	0x1ac0	; 0x1ac0 <__vector_7>
      20:	0c 94 23 0d 	jmp	0x1a46	; 0x1a46 <__vector_8>
      24:	0c 94 e6 0c 	jmp	0x19cc	; 0x19cc <__vector_9>
      28:	0c 94 a9 0c 	jmp	0x1952	; 0x1952 <__vector_10>
      2c:	0c 94 6c 0c 	jmp	0x18d8	; 0x18d8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e2       	ldi	r30, 0x28	; 40
      68:	fe e4       	ldi	r31, 0x4E	; 78
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3b       	cpi	r26, 0xB8	; 184
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 eb       	ldi	r26, 0xB8	; 184
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3e       	cpi	r26, 0xE2	; 226
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <main>
      8a:	0c 94 12 27 	jmp	0x4e24	; 0x4e24 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 db 26 	jmp	0x4db6	; 0x4db6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e9       	ldi	r26, 0x95	; 149
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f7 26 	jmp	0x4dee	; 0x4dee <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e7 26 	jmp	0x4dce	; 0x4dce <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 03 27 	jmp	0x4e06	; 0x4e06 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e7 26 	jmp	0x4dce	; 0x4dce <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 03 27 	jmp	0x4e06	; 0x4e06 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 db 26 	jmp	0x4db6	; 0x4db6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e9       	ldi	r24, 0x95	; 149
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f7 26 	jmp	0x4dee	; 0x4dee <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e7 26 	jmp	0x4dce	; 0x4dce <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 03 27 	jmp	0x4e06	; 0x4e06 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e7 26 	jmp	0x4dce	; 0x4dce <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 03 27 	jmp	0x4e06	; 0x4e06 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e7 26 	jmp	0x4dce	; 0x4dce <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 03 27 	jmp	0x4e06	; 0x4e06 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 eb 26 	jmp	0x4dd6	; 0x4dd6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 07 27 	jmp	0x4e0e	; 0x4e0e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Timer_enuInit>:
extern u8 Timer_u8TimerNum;

static void (*Timer_pfunISRFun[7]) (void*) = {NULL,NULL,NULL,NULL,NULL,NULL,NULL};
static void *Timer_pvidISRParameter[7] = {NULL,NULL,NULL,NULL,NULL,NULL,NULL};

ES_t Timer_enuInit(Timer_t * Copy_pAstrTimerConfig){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <Timer_enuInit+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <Timer_enuInit+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9c 83       	std	Y+4, r25	; 0x04
     b54:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_OK;
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	8a 83       	std	Y+2, r24	; 0x02
	if(Copy_pAstrTimerConfig != NULL){
     b5a:	8b 81       	ldd	r24, Y+3	; 0x03
     b5c:	9c 81       	ldd	r25, Y+4	; 0x04
     b5e:	00 97       	sbiw	r24, 0x00	; 0
     b60:	09 f4       	brne	.+2      	; 0xb64 <Timer_enuInit+0x1e>
     b62:	10 c4       	rjmp	.+2080   	; 0x1384 <Timer_enuInit+0x83e>
		for(u8 Local_u8Iter = 0; Local_u8Iter < Timer_u8TimerNum; Local_u8Iter++){
     b64:	19 82       	std	Y+1, r1	; 0x01
     b66:	07 c4       	rjmp	.+2062   	; 0x1376 <Timer_enuInit+0x830>
			if(Copy_pAstrTimerConfig[Local_u8Iter].Timer_Num == TIMER0_ID){
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	88 2f       	mov	r24, r24
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	9c 01       	movw	r18, r24
     b70:	22 0f       	add	r18, r18
     b72:	33 1f       	adc	r19, r19
     b74:	22 0f       	add	r18, r18
     b76:	33 1f       	adc	r19, r19
     b78:	22 0f       	add	r18, r18
     b7a:	33 1f       	adc	r19, r19
     b7c:	8b 81       	ldd	r24, Y+3	; 0x03
     b7e:	9c 81       	ldd	r25, Y+4	; 0x04
     b80:	fc 01       	movw	r30, r24
     b82:	e2 0f       	add	r30, r18
     b84:	f3 1f       	adc	r31, r19
     b86:	80 81       	ld	r24, Z
     b88:	8b 34       	cpi	r24, 0x4B	; 75
     b8a:	09 f0       	breq	.+2      	; 0xb8e <Timer_enuInit+0x48>
     b8c:	09 c1       	rjmp	.+530    	; 0xda0 <Timer_enuInit+0x25a>
				if(Copy_pAstrTimerConfig[Local_u8Iter].Timer_Mode == NORMAL_MODE){
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
     b90:	88 2f       	mov	r24, r24
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	9c 01       	movw	r18, r24
     b96:	22 0f       	add	r18, r18
     b98:	33 1f       	adc	r19, r19
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	22 0f       	add	r18, r18
     ba0:	33 1f       	adc	r19, r19
     ba2:	8b 81       	ldd	r24, Y+3	; 0x03
     ba4:	9c 81       	ldd	r25, Y+4	; 0x04
     ba6:	fc 01       	movw	r30, r24
     ba8:	e2 0f       	add	r30, r18
     baa:	f3 1f       	adc	r31, r19
     bac:	81 81       	ldd	r24, Z+1	; 0x01
     bae:	88 23       	and	r24, r24
     bb0:	41 f4       	brne	.+16     	; 0xbc2 <Timer_enuInit+0x7c>
					TCCR0 &= ~(0x48);
     bb2:	a3 e5       	ldi	r26, 0x53	; 83
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	e3 e5       	ldi	r30, 0x53	; 83
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	87 7b       	andi	r24, 0xB7	; 183
     bbe:	8c 93       	st	X, r24
     bc0:	23 c0       	rjmp	.+70     	; 0xc08 <Timer_enuInit+0xc2>
				}
				else if(Copy_pAstrTimerConfig[Local_u8Iter].Timer_Mode == CTC_MODE){
     bc2:	89 81       	ldd	r24, Y+1	; 0x01
     bc4:	88 2f       	mov	r24, r24
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	9c 01       	movw	r18, r24
     bca:	22 0f       	add	r18, r18
     bcc:	33 1f       	adc	r19, r19
     bce:	22 0f       	add	r18, r18
     bd0:	33 1f       	adc	r19, r19
     bd2:	22 0f       	add	r18, r18
     bd4:	33 1f       	adc	r19, r19
     bd6:	8b 81       	ldd	r24, Y+3	; 0x03
     bd8:	9c 81       	ldd	r25, Y+4	; 0x04
     bda:	fc 01       	movw	r30, r24
     bdc:	e2 0f       	add	r30, r18
     bde:	f3 1f       	adc	r31, r19
     be0:	81 81       	ldd	r24, Z+1	; 0x01
     be2:	82 30       	cpi	r24, 0x02	; 2
     be4:	79 f4       	brne	.+30     	; 0xc04 <Timer_enuInit+0xbe>
					TCCR0 |=  (0x08);
     be6:	a3 e5       	ldi	r26, 0x53	; 83
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	e3 e5       	ldi	r30, 0x53	; 83
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	88 60       	ori	r24, 0x08	; 8
     bf2:	8c 93       	st	X, r24
					TCCR0 &= ~(0x40);
     bf4:	a3 e5       	ldi	r26, 0x53	; 83
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e3 e5       	ldi	r30, 0x53	; 83
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	80 81       	ld	r24, Z
     bfe:	8f 7b       	andi	r24, 0xBF	; 191
     c00:	8c 93       	st	X, r24
     c02:	02 c0       	rjmp	.+4      	; 0xc08 <Timer_enuInit+0xc2>
				}
				else
					Local_enuErrorState = ES_OUT_OF_RANGE;
     c04:	82 e0       	ldi	r24, 0x02	; 2
     c06:	8a 83       	std	Y+2, r24	; 0x02
				if(Copy_pAstrTimerConfig[Local_u8Iter].Prescaler <= 5){
     c08:	89 81       	ldd	r24, Y+1	; 0x01
     c0a:	88 2f       	mov	r24, r24
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	9c 01       	movw	r18, r24
     c10:	22 0f       	add	r18, r18
     c12:	33 1f       	adc	r19, r19
     c14:	22 0f       	add	r18, r18
     c16:	33 1f       	adc	r19, r19
     c18:	22 0f       	add	r18, r18
     c1a:	33 1f       	adc	r19, r19
     c1c:	8b 81       	ldd	r24, Y+3	; 0x03
     c1e:	9c 81       	ldd	r25, Y+4	; 0x04
     c20:	fc 01       	movw	r30, r24
     c22:	e2 0f       	add	r30, r18
     c24:	f3 1f       	adc	r31, r19
     c26:	84 81       	ldd	r24, Z+4	; 0x04
     c28:	86 30       	cpi	r24, 0x06	; 6
     c2a:	c0 f4       	brcc	.+48     	; 0xc5c <Timer_enuInit+0x116>
					TCCR0 |= Copy_pAstrTimerConfig[Local_u8Iter].Prescaler;
     c2c:	a3 e5       	ldi	r26, 0x53	; 83
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	e3 e5       	ldi	r30, 0x53	; 83
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	40 81       	ld	r20, Z
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	88 2f       	mov	r24, r24
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	9c 01       	movw	r18, r24
     c3e:	22 0f       	add	r18, r18
     c40:	33 1f       	adc	r19, r19
     c42:	22 0f       	add	r18, r18
     c44:	33 1f       	adc	r19, r19
     c46:	22 0f       	add	r18, r18
     c48:	33 1f       	adc	r19, r19
     c4a:	8b 81       	ldd	r24, Y+3	; 0x03
     c4c:	9c 81       	ldd	r25, Y+4	; 0x04
     c4e:	fc 01       	movw	r30, r24
     c50:	e2 0f       	add	r30, r18
     c52:	f3 1f       	adc	r31, r19
     c54:	84 81       	ldd	r24, Z+4	; 0x04
     c56:	84 2b       	or	r24, r20
     c58:	8c 93       	st	X, r24
     c5a:	02 c0       	rjmp	.+4      	; 0xc60 <Timer_enuInit+0x11a>
				}
				else
					Local_enuErrorState = ES_OUT_OF_RANGE;
     c5c:	82 e0       	ldi	r24, 0x02	; 2
     c5e:	8a 83       	std	Y+2, r24	; 0x02
				if(Copy_pAstrTimerConfig[Local_u8Iter].ComA_Mode <= 3){
     c60:	89 81       	ldd	r24, Y+1	; 0x01
     c62:	88 2f       	mov	r24, r24
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	9c 01       	movw	r18, r24
     c68:	22 0f       	add	r18, r18
     c6a:	33 1f       	adc	r19, r19
     c6c:	22 0f       	add	r18, r18
     c6e:	33 1f       	adc	r19, r19
     c70:	22 0f       	add	r18, r18
     c72:	33 1f       	adc	r19, r19
     c74:	8b 81       	ldd	r24, Y+3	; 0x03
     c76:	9c 81       	ldd	r25, Y+4	; 0x04
     c78:	fc 01       	movw	r30, r24
     c7a:	e2 0f       	add	r30, r18
     c7c:	f3 1f       	adc	r31, r19
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	84 30       	cpi	r24, 0x04	; 4
     c82:	08 f5       	brcc	.+66     	; 0xcc6 <Timer_enuInit+0x180>
					TCCR0 |= (Copy_pAstrTimerConfig[Local_u8Iter].ComA_Mode<<4);
     c84:	a3 e5       	ldi	r26, 0x53	; 83
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	e3 e5       	ldi	r30, 0x53	; 83
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	48 2f       	mov	r20, r24
     c90:	89 81       	ldd	r24, Y+1	; 0x01
     c92:	88 2f       	mov	r24, r24
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	9c 01       	movw	r18, r24
     c98:	22 0f       	add	r18, r18
     c9a:	33 1f       	adc	r19, r19
     c9c:	22 0f       	add	r18, r18
     c9e:	33 1f       	adc	r19, r19
     ca0:	22 0f       	add	r18, r18
     ca2:	33 1f       	adc	r19, r19
     ca4:	8b 81       	ldd	r24, Y+3	; 0x03
     ca6:	9c 81       	ldd	r25, Y+4	; 0x04
     ca8:	fc 01       	movw	r30, r24
     caa:	e2 0f       	add	r30, r18
     cac:	f3 1f       	adc	r31, r19
     cae:	82 81       	ldd	r24, Z+2	; 0x02
     cb0:	88 2f       	mov	r24, r24
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	82 95       	swap	r24
     cb6:	92 95       	swap	r25
     cb8:	90 7f       	andi	r25, 0xF0	; 240
     cba:	98 27       	eor	r25, r24
     cbc:	80 7f       	andi	r24, 0xF0	; 240
     cbe:	98 27       	eor	r25, r24
     cc0:	84 2b       	or	r24, r20
     cc2:	8c 93       	st	X, r24
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <Timer_enuInit+0x184>
				}
				else
					Local_enuErrorState = ES_OUT_OF_RANGE;
     cc6:	82 e0       	ldi	r24, 0x02	; 2
     cc8:	8a 83       	std	Y+2, r24	; 0x02
				if(Copy_pAstrTimerConfig[Local_u8Iter].OF_INT_Mode == ENABLED){
     cca:	89 81       	ldd	r24, Y+1	; 0x01
     ccc:	88 2f       	mov	r24, r24
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	9c 01       	movw	r18, r24
     cd2:	22 0f       	add	r18, r18
     cd4:	33 1f       	adc	r19, r19
     cd6:	22 0f       	add	r18, r18
     cd8:	33 1f       	adc	r19, r19
     cda:	22 0f       	add	r18, r18
     cdc:	33 1f       	adc	r19, r19
     cde:	8b 81       	ldd	r24, Y+3	; 0x03
     ce0:	9c 81       	ldd	r25, Y+4	; 0x04
     ce2:	fc 01       	movw	r30, r24
     ce4:	e2 0f       	add	r30, r18
     ce6:	f3 1f       	adc	r31, r19
     ce8:	85 81       	ldd	r24, Z+5	; 0x05
     cea:	81 30       	cpi	r24, 0x01	; 1
     cec:	41 f4       	brne	.+16     	; 0xcfe <Timer_enuInit+0x1b8>
					TIMSK |= 0x01;
     cee:	a9 e5       	ldi	r26, 0x59	; 89
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	e9 e5       	ldi	r30, 0x59	; 89
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	81 60       	ori	r24, 0x01	; 1
     cfa:	8c 93       	st	X, r24
     cfc:	1b c0       	rjmp	.+54     	; 0xd34 <Timer_enuInit+0x1ee>
				}
				else if(Copy_pAstrTimerConfig[Local_u8Iter].OF_INT_Mode == DISABLED){
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
     d00:	88 2f       	mov	r24, r24
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	9c 01       	movw	r18, r24
     d06:	22 0f       	add	r18, r18
     d08:	33 1f       	adc	r19, r19
     d0a:	22 0f       	add	r18, r18
     d0c:	33 1f       	adc	r19, r19
     d0e:	22 0f       	add	r18, r18
     d10:	33 1f       	adc	r19, r19
     d12:	8b 81       	ldd	r24, Y+3	; 0x03
     d14:	9c 81       	ldd	r25, Y+4	; 0x04
     d16:	fc 01       	movw	r30, r24
     d18:	e2 0f       	add	r30, r18
     d1a:	f3 1f       	adc	r31, r19
     d1c:	85 81       	ldd	r24, Z+5	; 0x05
     d1e:	88 23       	and	r24, r24
     d20:	41 f4       	brne	.+16     	; 0xd32 <Timer_enuInit+0x1ec>
					TIMSK &= ~(0x01);
     d22:	a9 e5       	ldi	r26, 0x59	; 89
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e9 e5       	ldi	r30, 0x59	; 89
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	8e 7f       	andi	r24, 0xFE	; 254
     d2e:	8c 93       	st	X, r24
     d30:	01 c0       	rjmp	.+2      	; 0xd34 <Timer_enuInit+0x1ee>
				}
				else
					Local_enuErrorState = ES_NOK;
     d32:	1a 82       	std	Y+2, r1	; 0x02
				if(Copy_pAstrTimerConfig[Local_u8Iter].CTCA_INT_Mode == ENABLED){
     d34:	89 81       	ldd	r24, Y+1	; 0x01
     d36:	88 2f       	mov	r24, r24
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	9c 01       	movw	r18, r24
     d3c:	22 0f       	add	r18, r18
     d3e:	33 1f       	adc	r19, r19
     d40:	22 0f       	add	r18, r18
     d42:	33 1f       	adc	r19, r19
     d44:	22 0f       	add	r18, r18
     d46:	33 1f       	adc	r19, r19
     d48:	8b 81       	ldd	r24, Y+3	; 0x03
     d4a:	9c 81       	ldd	r25, Y+4	; 0x04
     d4c:	fc 01       	movw	r30, r24
     d4e:	e2 0f       	add	r30, r18
     d50:	f3 1f       	adc	r31, r19
     d52:	86 81       	ldd	r24, Z+6	; 0x06
     d54:	81 30       	cpi	r24, 0x01	; 1
     d56:	41 f4       	brne	.+16     	; 0xd68 <Timer_enuInit+0x222>
					TIMSK |= 0x02;
     d58:	a9 e5       	ldi	r26, 0x59	; 89
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e9 e5       	ldi	r30, 0x59	; 89
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	82 60       	ori	r24, 0x02	; 2
     d64:	8c 93       	st	X, r24
     d66:	04 c3       	rjmp	.+1544   	; 0x1370 <Timer_enuInit+0x82a>
				}
				else if(Copy_pAstrTimerConfig[Local_u8Iter].CTCA_INT_Mode == DISABLED){
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	88 2f       	mov	r24, r24
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	9c 01       	movw	r18, r24
     d70:	22 0f       	add	r18, r18
     d72:	33 1f       	adc	r19, r19
     d74:	22 0f       	add	r18, r18
     d76:	33 1f       	adc	r19, r19
     d78:	22 0f       	add	r18, r18
     d7a:	33 1f       	adc	r19, r19
     d7c:	8b 81       	ldd	r24, Y+3	; 0x03
     d7e:	9c 81       	ldd	r25, Y+4	; 0x04
     d80:	fc 01       	movw	r30, r24
     d82:	e2 0f       	add	r30, r18
     d84:	f3 1f       	adc	r31, r19
     d86:	86 81       	ldd	r24, Z+6	; 0x06
     d88:	88 23       	and	r24, r24
     d8a:	41 f4       	brne	.+16     	; 0xd9c <Timer_enuInit+0x256>
					TIMSK &= ~(0x02);
     d8c:	a9 e5       	ldi	r26, 0x59	; 89
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	e9 e5       	ldi	r30, 0x59	; 89
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	8d 7f       	andi	r24, 0xFD	; 253
     d98:	8c 93       	st	X, r24
     d9a:	ea c2       	rjmp	.+1492   	; 0x1370 <Timer_enuInit+0x82a>
				}
				else
					Local_enuErrorState = ES_NOK;
     d9c:	1a 82       	std	Y+2, r1	; 0x02
     d9e:	e8 c2       	rjmp	.+1488   	; 0x1370 <Timer_enuInit+0x82a>
			}//end TIMER0_ID
			else if(Copy_pAstrTimerConfig[Local_u8Iter].Timer_Num == TIMER1_ID){
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	88 2f       	mov	r24, r24
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	9c 01       	movw	r18, r24
     da8:	22 0f       	add	r18, r18
     daa:	33 1f       	adc	r19, r19
     dac:	22 0f       	add	r18, r18
     dae:	33 1f       	adc	r19, r19
     db0:	22 0f       	add	r18, r18
     db2:	33 1f       	adc	r19, r19
     db4:	8b 81       	ldd	r24, Y+3	; 0x03
     db6:	9c 81       	ldd	r25, Y+4	; 0x04
     db8:	fc 01       	movw	r30, r24
     dba:	e2 0f       	add	r30, r18
     dbc:	f3 1f       	adc	r31, r19
     dbe:	80 81       	ld	r24, Z
     dc0:	82 32       	cpi	r24, 0x22	; 34
     dc2:	09 f0       	breq	.+2      	; 0xdc6 <Timer_enuInit+0x280>
     dc4:	b7 c1       	rjmp	.+878    	; 0x1134 <Timer_enuInit+0x5ee>
				if(Copy_pAstrTimerConfig[Local_u8Iter].Timer_Mode == NORMAL_MODE){
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	88 2f       	mov	r24, r24
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	9c 01       	movw	r18, r24
     dce:	22 0f       	add	r18, r18
     dd0:	33 1f       	adc	r19, r19
     dd2:	22 0f       	add	r18, r18
     dd4:	33 1f       	adc	r19, r19
     dd6:	22 0f       	add	r18, r18
     dd8:	33 1f       	adc	r19, r19
     dda:	8b 81       	ldd	r24, Y+3	; 0x03
     ddc:	9c 81       	ldd	r25, Y+4	; 0x04
     dde:	fc 01       	movw	r30, r24
     de0:	e2 0f       	add	r30, r18
     de2:	f3 1f       	adc	r31, r19
     de4:	81 81       	ldd	r24, Z+1	; 0x01
     de6:	88 23       	and	r24, r24
     de8:	79 f4       	brne	.+30     	; 0xe08 <Timer_enuInit+0x2c2>
					TCCR1A &= ~(0x03);
     dea:	af e4       	ldi	r26, 0x4F	; 79
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	ef e4       	ldi	r30, 0x4F	; 79
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	8c 7f       	andi	r24, 0xFC	; 252
     df6:	8c 93       	st	X, r24
					TCCR1B &= ~(0x18);
     df8:	ae e4       	ldi	r26, 0x4E	; 78
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	ee e4       	ldi	r30, 0x4E	; 78
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	87 7e       	andi	r24, 0xE7	; 231
     e04:	8c 93       	st	X, r24
     e06:	5d c0       	rjmp	.+186    	; 0xec2 <Timer_enuInit+0x37c>
				}
				else if(Copy_pAstrTimerConfig[Local_u8Iter].Timer_Mode == CTC_MODE || Copy_pAstrTimerConfig[Local_u8Iter].Timer_Mode == CTC_MODE_TOP_OCA){
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	88 2f       	mov	r24, r24
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	9c 01       	movw	r18, r24
     e10:	22 0f       	add	r18, r18
     e12:	33 1f       	adc	r19, r19
     e14:	22 0f       	add	r18, r18
     e16:	33 1f       	adc	r19, r19
     e18:	22 0f       	add	r18, r18
     e1a:	33 1f       	adc	r19, r19
     e1c:	8b 81       	ldd	r24, Y+3	; 0x03
     e1e:	9c 81       	ldd	r25, Y+4	; 0x04
     e20:	fc 01       	movw	r30, r24
     e22:	e2 0f       	add	r30, r18
     e24:	f3 1f       	adc	r31, r19
     e26:	81 81       	ldd	r24, Z+1	; 0x01
     e28:	82 30       	cpi	r24, 0x02	; 2
     e2a:	91 f0       	breq	.+36     	; 0xe50 <Timer_enuInit+0x30a>
     e2c:	89 81       	ldd	r24, Y+1	; 0x01
     e2e:	88 2f       	mov	r24, r24
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	9c 01       	movw	r18, r24
     e34:	22 0f       	add	r18, r18
     e36:	33 1f       	adc	r19, r19
     e38:	22 0f       	add	r18, r18
     e3a:	33 1f       	adc	r19, r19
     e3c:	22 0f       	add	r18, r18
     e3e:	33 1f       	adc	r19, r19
     e40:	8b 81       	ldd	r24, Y+3	; 0x03
     e42:	9c 81       	ldd	r25, Y+4	; 0x04
     e44:	fc 01       	movw	r30, r24
     e46:	e2 0f       	add	r30, r18
     e48:	f3 1f       	adc	r31, r19
     e4a:	81 81       	ldd	r24, Z+1	; 0x01
     e4c:	84 30       	cpi	r24, 0x04	; 4
     e4e:	b1 f4       	brne	.+44     	; 0xe7c <Timer_enuInit+0x336>
					TCCR1A &= ~(0x03);
     e50:	af e4       	ldi	r26, 0x4F	; 79
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	ef e4       	ldi	r30, 0x4F	; 79
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	8c 7f       	andi	r24, 0xFC	; 252
     e5c:	8c 93       	st	X, r24
					TCCR1B &= ~(0x18);
     e5e:	ae e4       	ldi	r26, 0x4E	; 78
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	ee e4       	ldi	r30, 0x4E	; 78
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	87 7e       	andi	r24, 0xE7	; 231
     e6a:	8c 93       	st	X, r24
					TCCR1B |=  (0x08);
     e6c:	ae e4       	ldi	r26, 0x4E	; 78
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	ee e4       	ldi	r30, 0x4E	; 78
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	88 60       	ori	r24, 0x08	; 8
     e78:	8c 93       	st	X, r24
     e7a:	23 c0       	rjmp	.+70     	; 0xec2 <Timer_enuInit+0x37c>
				}
				else if(Copy_pAstrTimerConfig[Local_u8Iter].Timer_Mode == CTC_MODE_TOP_ICR){
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	88 2f       	mov	r24, r24
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	9c 01       	movw	r18, r24
     e84:	22 0f       	add	r18, r18
     e86:	33 1f       	adc	r19, r19
     e88:	22 0f       	add	r18, r18
     e8a:	33 1f       	adc	r19, r19
     e8c:	22 0f       	add	r18, r18
     e8e:	33 1f       	adc	r19, r19
     e90:	8b 81       	ldd	r24, Y+3	; 0x03
     e92:	9c 81       	ldd	r25, Y+4	; 0x04
     e94:	fc 01       	movw	r30, r24
     e96:	e2 0f       	add	r30, r18
     e98:	f3 1f       	adc	r31, r19
     e9a:	81 81       	ldd	r24, Z+1	; 0x01
     e9c:	8c 30       	cpi	r24, 0x0C	; 12
     e9e:	79 f4       	brne	.+30     	; 0xebe <Timer_enuInit+0x378>
					TCCR1A &= ~(0x03);
     ea0:	af e4       	ldi	r26, 0x4F	; 79
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	ef e4       	ldi	r30, 0x4F	; 79
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	8c 7f       	andi	r24, 0xFC	; 252
     eac:	8c 93       	st	X, r24
					TCCR1B |=  (0x18);
     eae:	ae e4       	ldi	r26, 0x4E	; 78
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	ee e4       	ldi	r30, 0x4E	; 78
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	88 61       	ori	r24, 0x18	; 24
     eba:	8c 93       	st	X, r24
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <Timer_enuInit+0x37c>
				}
				else
					Local_enuErrorState = ES_OUT_OF_RANGE;
     ebe:	82 e0       	ldi	r24, 0x02	; 2
     ec0:	8a 83       	std	Y+2, r24	; 0x02
				if(Copy_pAstrTimerConfig[Local_u8Iter].Prescaler <= 5){
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
     ec4:	88 2f       	mov	r24, r24
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	9c 01       	movw	r18, r24
     eca:	22 0f       	add	r18, r18
     ecc:	33 1f       	adc	r19, r19
     ece:	22 0f       	add	r18, r18
     ed0:	33 1f       	adc	r19, r19
     ed2:	22 0f       	add	r18, r18
     ed4:	33 1f       	adc	r19, r19
     ed6:	8b 81       	ldd	r24, Y+3	; 0x03
     ed8:	9c 81       	ldd	r25, Y+4	; 0x04
     eda:	fc 01       	movw	r30, r24
     edc:	e2 0f       	add	r30, r18
     ede:	f3 1f       	adc	r31, r19
     ee0:	84 81       	ldd	r24, Z+4	; 0x04
     ee2:	86 30       	cpi	r24, 0x06	; 6
     ee4:	c0 f4       	brcc	.+48     	; 0xf16 <Timer_enuInit+0x3d0>
					TCCR1B |= Copy_pAstrTimerConfig[Local_u8Iter].Prescaler;
     ee6:	ae e4       	ldi	r26, 0x4E	; 78
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	ee e4       	ldi	r30, 0x4E	; 78
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	40 81       	ld	r20, Z
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	88 2f       	mov	r24, r24
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	9c 01       	movw	r18, r24
     ef8:	22 0f       	add	r18, r18
     efa:	33 1f       	adc	r19, r19
     efc:	22 0f       	add	r18, r18
     efe:	33 1f       	adc	r19, r19
     f00:	22 0f       	add	r18, r18
     f02:	33 1f       	adc	r19, r19
     f04:	8b 81       	ldd	r24, Y+3	; 0x03
     f06:	9c 81       	ldd	r25, Y+4	; 0x04
     f08:	fc 01       	movw	r30, r24
     f0a:	e2 0f       	add	r30, r18
     f0c:	f3 1f       	adc	r31, r19
     f0e:	84 81       	ldd	r24, Z+4	; 0x04
     f10:	84 2b       	or	r24, r20
     f12:	8c 93       	st	X, r24
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <Timer_enuInit+0x3d4>
				}
				else
					Local_enuErrorState = ES_OUT_OF_RANGE;
     f16:	82 e0       	ldi	r24, 0x02	; 2
     f18:	8a 83       	std	Y+2, r24	; 0x02
				if(Copy_pAstrTimerConfig[Local_u8Iter].ComA_Mode <= 3){
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
     f1c:	88 2f       	mov	r24, r24
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	9c 01       	movw	r18, r24
     f22:	22 0f       	add	r18, r18
     f24:	33 1f       	adc	r19, r19
     f26:	22 0f       	add	r18, r18
     f28:	33 1f       	adc	r19, r19
     f2a:	22 0f       	add	r18, r18
     f2c:	33 1f       	adc	r19, r19
     f2e:	8b 81       	ldd	r24, Y+3	; 0x03
     f30:	9c 81       	ldd	r25, Y+4	; 0x04
     f32:	fc 01       	movw	r30, r24
     f34:	e2 0f       	add	r30, r18
     f36:	f3 1f       	adc	r31, r19
     f38:	82 81       	ldd	r24, Z+2	; 0x02
     f3a:	84 30       	cpi	r24, 0x04	; 4
     f3c:	20 f5       	brcc	.+72     	; 0xf86 <Timer_enuInit+0x440>
					TCCR1A |= (Copy_pAstrTimerConfig[Local_u8Iter].ComA_Mode << 6);
     f3e:	af e4       	ldi	r26, 0x4F	; 79
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	ef e4       	ldi	r30, 0x4F	; 79
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	48 2f       	mov	r20, r24
     f4a:	89 81       	ldd	r24, Y+1	; 0x01
     f4c:	88 2f       	mov	r24, r24
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	9c 01       	movw	r18, r24
     f52:	22 0f       	add	r18, r18
     f54:	33 1f       	adc	r19, r19
     f56:	22 0f       	add	r18, r18
     f58:	33 1f       	adc	r19, r19
     f5a:	22 0f       	add	r18, r18
     f5c:	33 1f       	adc	r19, r19
     f5e:	8b 81       	ldd	r24, Y+3	; 0x03
     f60:	9c 81       	ldd	r25, Y+4	; 0x04
     f62:	fc 01       	movw	r30, r24
     f64:	e2 0f       	add	r30, r18
     f66:	f3 1f       	adc	r31, r19
     f68:	82 81       	ldd	r24, Z+2	; 0x02
     f6a:	88 2f       	mov	r24, r24
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	00 24       	eor	r0, r0
     f70:	96 95       	lsr	r25
     f72:	87 95       	ror	r24
     f74:	07 94       	ror	r0
     f76:	96 95       	lsr	r25
     f78:	87 95       	ror	r24
     f7a:	07 94       	ror	r0
     f7c:	98 2f       	mov	r25, r24
     f7e:	80 2d       	mov	r24, r0
     f80:	84 2b       	or	r24, r20
     f82:	8c 93       	st	X, r24
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <Timer_enuInit+0x444>
				}
				else
					Local_enuErrorState = ES_OUT_OF_RANGE;
     f86:	82 e0       	ldi	r24, 0x02	; 2
     f88:	8a 83       	std	Y+2, r24	; 0x02
				if(Copy_pAstrTimerConfig[Local_u8Iter].ComB_Mode <= 3){
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	88 2f       	mov	r24, r24
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	9c 01       	movw	r18, r24
     f92:	22 0f       	add	r18, r18
     f94:	33 1f       	adc	r19, r19
     f96:	22 0f       	add	r18, r18
     f98:	33 1f       	adc	r19, r19
     f9a:	22 0f       	add	r18, r18
     f9c:	33 1f       	adc	r19, r19
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
     fa0:	9c 81       	ldd	r25, Y+4	; 0x04
     fa2:	fc 01       	movw	r30, r24
     fa4:	e2 0f       	add	r30, r18
     fa6:	f3 1f       	adc	r31, r19
     fa8:	83 81       	ldd	r24, Z+3	; 0x03
     faa:	84 30       	cpi	r24, 0x04	; 4
     fac:	08 f5       	brcc	.+66     	; 0xff0 <Timer_enuInit+0x4aa>
					TCCR1A |= (Copy_pAstrTimerConfig[Local_u8Iter].ComB_Mode << 4);
     fae:	af e4       	ldi	r26, 0x4F	; 79
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	ef e4       	ldi	r30, 0x4F	; 79
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	48 2f       	mov	r20, r24
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	88 2f       	mov	r24, r24
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	9c 01       	movw	r18, r24
     fc2:	22 0f       	add	r18, r18
     fc4:	33 1f       	adc	r19, r19
     fc6:	22 0f       	add	r18, r18
     fc8:	33 1f       	adc	r19, r19
     fca:	22 0f       	add	r18, r18
     fcc:	33 1f       	adc	r19, r19
     fce:	8b 81       	ldd	r24, Y+3	; 0x03
     fd0:	9c 81       	ldd	r25, Y+4	; 0x04
     fd2:	fc 01       	movw	r30, r24
     fd4:	e2 0f       	add	r30, r18
     fd6:	f3 1f       	adc	r31, r19
     fd8:	83 81       	ldd	r24, Z+3	; 0x03
     fda:	88 2f       	mov	r24, r24
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	82 95       	swap	r24
     fe0:	92 95       	swap	r25
     fe2:	90 7f       	andi	r25, 0xF0	; 240
     fe4:	98 27       	eor	r25, r24
     fe6:	80 7f       	andi	r24, 0xF0	; 240
     fe8:	98 27       	eor	r25, r24
     fea:	84 2b       	or	r24, r20
     fec:	8c 93       	st	X, r24
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <Timer_enuInit+0x4ae>
				}
				else
					Local_enuErrorState = ES_OUT_OF_RANGE;
     ff0:	82 e0       	ldi	r24, 0x02	; 2
     ff2:	8a 83       	std	Y+2, r24	; 0x02
				if(Copy_pAstrTimerConfig[Local_u8Iter].OF_INT_Mode == ENABLED){
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	88 2f       	mov	r24, r24
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	9c 01       	movw	r18, r24
     ffc:	22 0f       	add	r18, r18
     ffe:	33 1f       	adc	r19, r19
    1000:	22 0f       	add	r18, r18
    1002:	33 1f       	adc	r19, r19
    1004:	22 0f       	add	r18, r18
    1006:	33 1f       	adc	r19, r19
    1008:	8b 81       	ldd	r24, Y+3	; 0x03
    100a:	9c 81       	ldd	r25, Y+4	; 0x04
    100c:	fc 01       	movw	r30, r24
    100e:	e2 0f       	add	r30, r18
    1010:	f3 1f       	adc	r31, r19
    1012:	85 81       	ldd	r24, Z+5	; 0x05
    1014:	81 30       	cpi	r24, 0x01	; 1
    1016:	41 f4       	brne	.+16     	; 0x1028 <Timer_enuInit+0x4e2>
					TIMSK |= 0x04;
    1018:	a9 e5       	ldi	r26, 0x59	; 89
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e9 e5       	ldi	r30, 0x59	; 89
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	84 60       	ori	r24, 0x04	; 4
    1024:	8c 93       	st	X, r24
    1026:	1b c0       	rjmp	.+54     	; 0x105e <Timer_enuInit+0x518>
				}
				else if(Copy_pAstrTimerConfig[Local_u8Iter].OF_INT_Mode == DISABLED){
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	88 2f       	mov	r24, r24
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	9c 01       	movw	r18, r24
    1030:	22 0f       	add	r18, r18
    1032:	33 1f       	adc	r19, r19
    1034:	22 0f       	add	r18, r18
    1036:	33 1f       	adc	r19, r19
    1038:	22 0f       	add	r18, r18
    103a:	33 1f       	adc	r19, r19
    103c:	8b 81       	ldd	r24, Y+3	; 0x03
    103e:	9c 81       	ldd	r25, Y+4	; 0x04
    1040:	fc 01       	movw	r30, r24
    1042:	e2 0f       	add	r30, r18
    1044:	f3 1f       	adc	r31, r19
    1046:	85 81       	ldd	r24, Z+5	; 0x05
    1048:	88 23       	and	r24, r24
    104a:	41 f4       	brne	.+16     	; 0x105c <Timer_enuInit+0x516>
					TIMSK &= ~(0x04);
    104c:	a9 e5       	ldi	r26, 0x59	; 89
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e9 e5       	ldi	r30, 0x59	; 89
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	8b 7f       	andi	r24, 0xFB	; 251
    1058:	8c 93       	st	X, r24
    105a:	01 c0       	rjmp	.+2      	; 0x105e <Timer_enuInit+0x518>
				}
				else
					Local_enuErrorState = ES_NOK;
    105c:	1a 82       	std	Y+2, r1	; 0x02
				if(Copy_pAstrTimerConfig[Local_u8Iter].CTCA_INT_Mode == ENABLED){
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	88 2f       	mov	r24, r24
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	9c 01       	movw	r18, r24
    1066:	22 0f       	add	r18, r18
    1068:	33 1f       	adc	r19, r19
    106a:	22 0f       	add	r18, r18
    106c:	33 1f       	adc	r19, r19
    106e:	22 0f       	add	r18, r18
    1070:	33 1f       	adc	r19, r19
    1072:	8b 81       	ldd	r24, Y+3	; 0x03
    1074:	9c 81       	ldd	r25, Y+4	; 0x04
    1076:	fc 01       	movw	r30, r24
    1078:	e2 0f       	add	r30, r18
    107a:	f3 1f       	adc	r31, r19
    107c:	86 81       	ldd	r24, Z+6	; 0x06
    107e:	81 30       	cpi	r24, 0x01	; 1
    1080:	41 f4       	brne	.+16     	; 0x1092 <Timer_enuInit+0x54c>
					TIMSK |= 0x10;
    1082:	a9 e5       	ldi	r26, 0x59	; 89
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e9 e5       	ldi	r30, 0x59	; 89
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	80 61       	ori	r24, 0x10	; 16
    108e:	8c 93       	st	X, r24
    1090:	1b c0       	rjmp	.+54     	; 0x10c8 <Timer_enuInit+0x582>
				}
				else if(Copy_pAstrTimerConfig[Local_u8Iter].CTCA_INT_Mode == DISABLED){
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	88 2f       	mov	r24, r24
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	9c 01       	movw	r18, r24
    109a:	22 0f       	add	r18, r18
    109c:	33 1f       	adc	r19, r19
    109e:	22 0f       	add	r18, r18
    10a0:	33 1f       	adc	r19, r19
    10a2:	22 0f       	add	r18, r18
    10a4:	33 1f       	adc	r19, r19
    10a6:	8b 81       	ldd	r24, Y+3	; 0x03
    10a8:	9c 81       	ldd	r25, Y+4	; 0x04
    10aa:	fc 01       	movw	r30, r24
    10ac:	e2 0f       	add	r30, r18
    10ae:	f3 1f       	adc	r31, r19
    10b0:	86 81       	ldd	r24, Z+6	; 0x06
    10b2:	88 23       	and	r24, r24
    10b4:	41 f4       	brne	.+16     	; 0x10c6 <Timer_enuInit+0x580>
					TIMSK &= ~(0x10);
    10b6:	a9 e5       	ldi	r26, 0x59	; 89
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	e9 e5       	ldi	r30, 0x59	; 89
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	8f 7e       	andi	r24, 0xEF	; 239
    10c2:	8c 93       	st	X, r24
    10c4:	01 c0       	rjmp	.+2      	; 0x10c8 <Timer_enuInit+0x582>
				}
				else
					Local_enuErrorState = ES_NOK;
    10c6:	1a 82       	std	Y+2, r1	; 0x02
				if(Copy_pAstrTimerConfig[Local_u8Iter].CTCB_INT_Mode == ENABLED){
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	88 2f       	mov	r24, r24
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	9c 01       	movw	r18, r24
    10d0:	22 0f       	add	r18, r18
    10d2:	33 1f       	adc	r19, r19
    10d4:	22 0f       	add	r18, r18
    10d6:	33 1f       	adc	r19, r19
    10d8:	22 0f       	add	r18, r18
    10da:	33 1f       	adc	r19, r19
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	9c 81       	ldd	r25, Y+4	; 0x04
    10e0:	fc 01       	movw	r30, r24
    10e2:	e2 0f       	add	r30, r18
    10e4:	f3 1f       	adc	r31, r19
    10e6:	87 81       	ldd	r24, Z+7	; 0x07
    10e8:	81 30       	cpi	r24, 0x01	; 1
    10ea:	41 f4       	brne	.+16     	; 0x10fc <Timer_enuInit+0x5b6>
					TIMSK |= 0x08;
    10ec:	a9 e5       	ldi	r26, 0x59	; 89
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	e9 e5       	ldi	r30, 0x59	; 89
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	88 60       	ori	r24, 0x08	; 8
    10f8:	8c 93       	st	X, r24
    10fa:	3a c1       	rjmp	.+628    	; 0x1370 <Timer_enuInit+0x82a>
				}
				else if(Copy_pAstrTimerConfig[Local_u8Iter].CTCB_INT_Mode == DISABLED){
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	88 2f       	mov	r24, r24
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	9c 01       	movw	r18, r24
    1104:	22 0f       	add	r18, r18
    1106:	33 1f       	adc	r19, r19
    1108:	22 0f       	add	r18, r18
    110a:	33 1f       	adc	r19, r19
    110c:	22 0f       	add	r18, r18
    110e:	33 1f       	adc	r19, r19
    1110:	8b 81       	ldd	r24, Y+3	; 0x03
    1112:	9c 81       	ldd	r25, Y+4	; 0x04
    1114:	fc 01       	movw	r30, r24
    1116:	e2 0f       	add	r30, r18
    1118:	f3 1f       	adc	r31, r19
    111a:	87 81       	ldd	r24, Z+7	; 0x07
    111c:	88 23       	and	r24, r24
    111e:	41 f4       	brne	.+16     	; 0x1130 <Timer_enuInit+0x5ea>
					TIMSK &= ~(0x08);
    1120:	a9 e5       	ldi	r26, 0x59	; 89
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e9 e5       	ldi	r30, 0x59	; 89
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	87 7f       	andi	r24, 0xF7	; 247
    112c:	8c 93       	st	X, r24
    112e:	20 c1       	rjmp	.+576    	; 0x1370 <Timer_enuInit+0x82a>
				}
				else
					Local_enuErrorState = ES_NOK;
    1130:	1a 82       	std	Y+2, r1	; 0x02
    1132:	1e c1       	rjmp	.+572    	; 0x1370 <Timer_enuInit+0x82a>
			}//end TIMER1_ID
			else if(Copy_pAstrTimerConfig[Local_u8Iter].Timer_Num == TIMER2_ID){
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	88 2f       	mov	r24, r24
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	9c 01       	movw	r18, r24
    113c:	22 0f       	add	r18, r18
    113e:	33 1f       	adc	r19, r19
    1140:	22 0f       	add	r18, r18
    1142:	33 1f       	adc	r19, r19
    1144:	22 0f       	add	r18, r18
    1146:	33 1f       	adc	r19, r19
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	9c 81       	ldd	r25, Y+4	; 0x04
    114c:	fc 01       	movw	r30, r24
    114e:	e2 0f       	add	r30, r18
    1150:	f3 1f       	adc	r31, r19
    1152:	80 81       	ld	r24, Z
    1154:	88 35       	cpi	r24, 0x58	; 88
    1156:	09 f0       	breq	.+2      	; 0x115a <Timer_enuInit+0x614>
    1158:	09 c1       	rjmp	.+530    	; 0x136c <Timer_enuInit+0x826>
				if(Copy_pAstrTimerConfig[Local_u8Iter].Timer_Mode == NORMAL_MODE){
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	88 2f       	mov	r24, r24
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	9c 01       	movw	r18, r24
    1162:	22 0f       	add	r18, r18
    1164:	33 1f       	adc	r19, r19
    1166:	22 0f       	add	r18, r18
    1168:	33 1f       	adc	r19, r19
    116a:	22 0f       	add	r18, r18
    116c:	33 1f       	adc	r19, r19
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	9c 81       	ldd	r25, Y+4	; 0x04
    1172:	fc 01       	movw	r30, r24
    1174:	e2 0f       	add	r30, r18
    1176:	f3 1f       	adc	r31, r19
    1178:	81 81       	ldd	r24, Z+1	; 0x01
    117a:	88 23       	and	r24, r24
    117c:	41 f4       	brne	.+16     	; 0x118e <Timer_enuInit+0x648>
					TCCR2 &= ~(0x48);
    117e:	a5 e4       	ldi	r26, 0x45	; 69
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e5 e4       	ldi	r30, 0x45	; 69
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	87 7b       	andi	r24, 0xB7	; 183
    118a:	8c 93       	st	X, r24
    118c:	23 c0       	rjmp	.+70     	; 0x11d4 <Timer_enuInit+0x68e>
				}
				else if(Copy_pAstrTimerConfig[Local_u8Iter].Timer_Mode == CTC_MODE){
    118e:	89 81       	ldd	r24, Y+1	; 0x01
    1190:	88 2f       	mov	r24, r24
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	9c 01       	movw	r18, r24
    1196:	22 0f       	add	r18, r18
    1198:	33 1f       	adc	r19, r19
    119a:	22 0f       	add	r18, r18
    119c:	33 1f       	adc	r19, r19
    119e:	22 0f       	add	r18, r18
    11a0:	33 1f       	adc	r19, r19
    11a2:	8b 81       	ldd	r24, Y+3	; 0x03
    11a4:	9c 81       	ldd	r25, Y+4	; 0x04
    11a6:	fc 01       	movw	r30, r24
    11a8:	e2 0f       	add	r30, r18
    11aa:	f3 1f       	adc	r31, r19
    11ac:	81 81       	ldd	r24, Z+1	; 0x01
    11ae:	82 30       	cpi	r24, 0x02	; 2
    11b0:	79 f4       	brne	.+30     	; 0x11d0 <Timer_enuInit+0x68a>
					TCCR2 |=  (0x08);
    11b2:	a5 e4       	ldi	r26, 0x45	; 69
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	e5 e4       	ldi	r30, 0x45	; 69
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	88 60       	ori	r24, 0x08	; 8
    11be:	8c 93       	st	X, r24
					TCCR2 &= ~(0x40);
    11c0:	a5 e4       	ldi	r26, 0x45	; 69
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	e5 e4       	ldi	r30, 0x45	; 69
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	8f 7b       	andi	r24, 0xBF	; 191
    11cc:	8c 93       	st	X, r24
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <Timer_enuInit+0x68e>
				}
				else
					Local_enuErrorState = ES_OUT_OF_RANGE;
    11d0:	82 e0       	ldi	r24, 0x02	; 2
    11d2:	8a 83       	std	Y+2, r24	; 0x02
				if(Copy_pAstrTimerConfig[Local_u8Iter].Prescaler <= 7){
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
    11d6:	88 2f       	mov	r24, r24
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	9c 01       	movw	r18, r24
    11dc:	22 0f       	add	r18, r18
    11de:	33 1f       	adc	r19, r19
    11e0:	22 0f       	add	r18, r18
    11e2:	33 1f       	adc	r19, r19
    11e4:	22 0f       	add	r18, r18
    11e6:	33 1f       	adc	r19, r19
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	9c 81       	ldd	r25, Y+4	; 0x04
    11ec:	fc 01       	movw	r30, r24
    11ee:	e2 0f       	add	r30, r18
    11f0:	f3 1f       	adc	r31, r19
    11f2:	84 81       	ldd	r24, Z+4	; 0x04
    11f4:	88 30       	cpi	r24, 0x08	; 8
    11f6:	c0 f4       	brcc	.+48     	; 0x1228 <Timer_enuInit+0x6e2>
					TCCR2 |= Copy_pAstrTimerConfig[Local_u8Iter].Prescaler;
    11f8:	a5 e4       	ldi	r26, 0x45	; 69
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	e5 e4       	ldi	r30, 0x45	; 69
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	40 81       	ld	r20, Z
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	88 2f       	mov	r24, r24
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	9c 01       	movw	r18, r24
    120a:	22 0f       	add	r18, r18
    120c:	33 1f       	adc	r19, r19
    120e:	22 0f       	add	r18, r18
    1210:	33 1f       	adc	r19, r19
    1212:	22 0f       	add	r18, r18
    1214:	33 1f       	adc	r19, r19
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	9c 81       	ldd	r25, Y+4	; 0x04
    121a:	fc 01       	movw	r30, r24
    121c:	e2 0f       	add	r30, r18
    121e:	f3 1f       	adc	r31, r19
    1220:	84 81       	ldd	r24, Z+4	; 0x04
    1222:	84 2b       	or	r24, r20
    1224:	8c 93       	st	X, r24
    1226:	02 c0       	rjmp	.+4      	; 0x122c <Timer_enuInit+0x6e6>
				}
				else
					Local_enuErrorState = ES_OUT_OF_RANGE;
    1228:	82 e0       	ldi	r24, 0x02	; 2
    122a:	8a 83       	std	Y+2, r24	; 0x02
				if(Copy_pAstrTimerConfig[Local_u8Iter].ComA_Mode <= 3){
    122c:	89 81       	ldd	r24, Y+1	; 0x01
    122e:	88 2f       	mov	r24, r24
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	9c 01       	movw	r18, r24
    1234:	22 0f       	add	r18, r18
    1236:	33 1f       	adc	r19, r19
    1238:	22 0f       	add	r18, r18
    123a:	33 1f       	adc	r19, r19
    123c:	22 0f       	add	r18, r18
    123e:	33 1f       	adc	r19, r19
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	9c 81       	ldd	r25, Y+4	; 0x04
    1244:	fc 01       	movw	r30, r24
    1246:	e2 0f       	add	r30, r18
    1248:	f3 1f       	adc	r31, r19
    124a:	82 81       	ldd	r24, Z+2	; 0x02
    124c:	84 30       	cpi	r24, 0x04	; 4
    124e:	08 f5       	brcc	.+66     	; 0x1292 <Timer_enuInit+0x74c>
					TCCR2 |= (Copy_pAstrTimerConfig[Local_u8Iter].ComA_Mode<<4);
    1250:	a5 e4       	ldi	r26, 0x45	; 69
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	e5 e4       	ldi	r30, 0x45	; 69
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	48 2f       	mov	r20, r24
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	88 2f       	mov	r24, r24
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	9c 01       	movw	r18, r24
    1264:	22 0f       	add	r18, r18
    1266:	33 1f       	adc	r19, r19
    1268:	22 0f       	add	r18, r18
    126a:	33 1f       	adc	r19, r19
    126c:	22 0f       	add	r18, r18
    126e:	33 1f       	adc	r19, r19
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	9c 81       	ldd	r25, Y+4	; 0x04
    1274:	fc 01       	movw	r30, r24
    1276:	e2 0f       	add	r30, r18
    1278:	f3 1f       	adc	r31, r19
    127a:	82 81       	ldd	r24, Z+2	; 0x02
    127c:	88 2f       	mov	r24, r24
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	82 95       	swap	r24
    1282:	92 95       	swap	r25
    1284:	90 7f       	andi	r25, 0xF0	; 240
    1286:	98 27       	eor	r25, r24
    1288:	80 7f       	andi	r24, 0xF0	; 240
    128a:	98 27       	eor	r25, r24
    128c:	84 2b       	or	r24, r20
    128e:	8c 93       	st	X, r24
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <Timer_enuInit+0x750>
				}
				else
					Local_enuErrorState = ES_OUT_OF_RANGE;
    1292:	82 e0       	ldi	r24, 0x02	; 2
    1294:	8a 83       	std	Y+2, r24	; 0x02
				if(Copy_pAstrTimerConfig[Local_u8Iter].OF_INT_Mode == ENABLED){
    1296:	89 81       	ldd	r24, Y+1	; 0x01
    1298:	88 2f       	mov	r24, r24
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	9c 01       	movw	r18, r24
    129e:	22 0f       	add	r18, r18
    12a0:	33 1f       	adc	r19, r19
    12a2:	22 0f       	add	r18, r18
    12a4:	33 1f       	adc	r19, r19
    12a6:	22 0f       	add	r18, r18
    12a8:	33 1f       	adc	r19, r19
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	9c 81       	ldd	r25, Y+4	; 0x04
    12ae:	fc 01       	movw	r30, r24
    12b0:	e2 0f       	add	r30, r18
    12b2:	f3 1f       	adc	r31, r19
    12b4:	85 81       	ldd	r24, Z+5	; 0x05
    12b6:	81 30       	cpi	r24, 0x01	; 1
    12b8:	41 f4       	brne	.+16     	; 0x12ca <Timer_enuInit+0x784>
					TIMSK |= 0x40;
    12ba:	a9 e5       	ldi	r26, 0x59	; 89
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	e9 e5       	ldi	r30, 0x59	; 89
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	80 64       	ori	r24, 0x40	; 64
    12c6:	8c 93       	st	X, r24
    12c8:	1b c0       	rjmp	.+54     	; 0x1300 <Timer_enuInit+0x7ba>
				}
				else if(Copy_pAstrTimerConfig[Local_u8Iter].OF_INT_Mode == DISABLED){
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	88 2f       	mov	r24, r24
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	9c 01       	movw	r18, r24
    12d2:	22 0f       	add	r18, r18
    12d4:	33 1f       	adc	r19, r19
    12d6:	22 0f       	add	r18, r18
    12d8:	33 1f       	adc	r19, r19
    12da:	22 0f       	add	r18, r18
    12dc:	33 1f       	adc	r19, r19
    12de:	8b 81       	ldd	r24, Y+3	; 0x03
    12e0:	9c 81       	ldd	r25, Y+4	; 0x04
    12e2:	fc 01       	movw	r30, r24
    12e4:	e2 0f       	add	r30, r18
    12e6:	f3 1f       	adc	r31, r19
    12e8:	85 81       	ldd	r24, Z+5	; 0x05
    12ea:	88 23       	and	r24, r24
    12ec:	41 f4       	brne	.+16     	; 0x12fe <Timer_enuInit+0x7b8>
					TIMSK &= ~(0x40);
    12ee:	a9 e5       	ldi	r26, 0x59	; 89
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	e9 e5       	ldi	r30, 0x59	; 89
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	8f 7b       	andi	r24, 0xBF	; 191
    12fa:	8c 93       	st	X, r24
    12fc:	01 c0       	rjmp	.+2      	; 0x1300 <Timer_enuInit+0x7ba>
				}
				else
					Local_enuErrorState = ES_NOK;
    12fe:	1a 82       	std	Y+2, r1	; 0x02
				if(Copy_pAstrTimerConfig[Local_u8Iter].CTCA_INT_Mode == ENABLED){
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	88 2f       	mov	r24, r24
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	9c 01       	movw	r18, r24
    1308:	22 0f       	add	r18, r18
    130a:	33 1f       	adc	r19, r19
    130c:	22 0f       	add	r18, r18
    130e:	33 1f       	adc	r19, r19
    1310:	22 0f       	add	r18, r18
    1312:	33 1f       	adc	r19, r19
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	9c 81       	ldd	r25, Y+4	; 0x04
    1318:	fc 01       	movw	r30, r24
    131a:	e2 0f       	add	r30, r18
    131c:	f3 1f       	adc	r31, r19
    131e:	86 81       	ldd	r24, Z+6	; 0x06
    1320:	81 30       	cpi	r24, 0x01	; 1
    1322:	41 f4       	brne	.+16     	; 0x1334 <Timer_enuInit+0x7ee>
					TIMSK |= 0x80;
    1324:	a9 e5       	ldi	r26, 0x59	; 89
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	e9 e5       	ldi	r30, 0x59	; 89
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	80 68       	ori	r24, 0x80	; 128
    1330:	8c 93       	st	X, r24
    1332:	1e c0       	rjmp	.+60     	; 0x1370 <Timer_enuInit+0x82a>
				}
				else if(Copy_pAstrTimerConfig[Local_u8Iter].CTCA_INT_Mode == DISABLED){
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	88 2f       	mov	r24, r24
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	9c 01       	movw	r18, r24
    133c:	22 0f       	add	r18, r18
    133e:	33 1f       	adc	r19, r19
    1340:	22 0f       	add	r18, r18
    1342:	33 1f       	adc	r19, r19
    1344:	22 0f       	add	r18, r18
    1346:	33 1f       	adc	r19, r19
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	9c 81       	ldd	r25, Y+4	; 0x04
    134c:	fc 01       	movw	r30, r24
    134e:	e2 0f       	add	r30, r18
    1350:	f3 1f       	adc	r31, r19
    1352:	86 81       	ldd	r24, Z+6	; 0x06
    1354:	88 23       	and	r24, r24
    1356:	41 f4       	brne	.+16     	; 0x1368 <Timer_enuInit+0x822>
					TIMSK &= ~(0x80);
    1358:	a9 e5       	ldi	r26, 0x59	; 89
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	e9 e5       	ldi	r30, 0x59	; 89
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	8f 77       	andi	r24, 0x7F	; 127
    1364:	8c 93       	st	X, r24
    1366:	04 c0       	rjmp	.+8      	; 0x1370 <Timer_enuInit+0x82a>
				}
				else
					Local_enuErrorState = ES_NOK;
    1368:	1a 82       	std	Y+2, r1	; 0x02
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <Timer_enuInit+0x82a>
			}//end TIMER2_ID
			else
				Local_enuErrorState = ES_OUT_OF_RANGE;
    136c:	82 e0       	ldi	r24, 0x02	; 2
    136e:	8a 83       	std	Y+2, r24	; 0x02
static void *Timer_pvidISRParameter[7] = {NULL,NULL,NULL,NULL,NULL,NULL,NULL};

ES_t Timer_enuInit(Timer_t * Copy_pAstrTimerConfig){
	ES_t Local_enuErrorState = ES_OK;
	if(Copy_pAstrTimerConfig != NULL){
		for(u8 Local_u8Iter = 0; Local_u8Iter < Timer_u8TimerNum; Local_u8Iter++){
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	8f 5f       	subi	r24, 0xFF	; 255
    1374:	89 83       	std	Y+1, r24	; 0x01
    1376:	90 91 9d 00 	lds	r25, 0x009D
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	89 17       	cp	r24, r25
    137e:	08 f4       	brcc	.+2      	; 0x1382 <Timer_enuInit+0x83c>
    1380:	f3 cb       	rjmp	.-2074   	; 0xb68 <Timer_enuInit+0x22>
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <Timer_enuInit+0x842>
			else
				Local_enuErrorState = ES_OUT_OF_RANGE;
		}//end for loop
	}
	else
		Local_enuErrorState = ES_NULL_POINTER;
    1384:	83 e0       	ldi	r24, 0x03	; 3
    1386:	8a 83       	std	Y+2, r24	; 0x02
	return Local_enuErrorState;
    1388:	8a 81       	ldd	r24, Y+2	; 0x02
}
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	08 95       	ret

00001398 <Timer_enuSetPrescaler>:

ES_t Timer_enuSetPrescaler(Timer_t *Copy_pstrTimerConfig, u8 Copy_u8Preload){
    1398:	df 93       	push	r29
    139a:	cf 93       	push	r28
    139c:	00 d0       	rcall	.+0      	; 0x139e <Timer_enuSetPrescaler+0x6>
    139e:	00 d0       	rcall	.+0      	; 0x13a0 <Timer_enuSetPrescaler+0x8>
    13a0:	cd b7       	in	r28, 0x3d	; 61
    13a2:	de b7       	in	r29, 0x3e	; 62
    13a4:	9b 83       	std	Y+3, r25	; 0x03
    13a6:	8a 83       	std	Y+2, r24	; 0x02
    13a8:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    13aa:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pstrTimerConfig != NULL){
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	9b 81       	ldd	r25, Y+3	; 0x03
    13b0:	00 97       	sbiw	r24, 0x00	; 0
    13b2:	09 f4       	brne	.+2      	; 0x13b6 <Timer_enuSetPrescaler+0x1e>
    13b4:	4c c0       	rjmp	.+152    	; 0x144e <Timer_enuSetPrescaler+0xb6>
		if(Copy_u8Preload <= 5){
    13b6:	8c 81       	ldd	r24, Y+4	; 0x04
    13b8:	86 30       	cpi	r24, 0x06	; 6
    13ba:	08 f0       	brcs	.+2      	; 0x13be <Timer_enuSetPrescaler+0x26>
    13bc:	4a c0       	rjmp	.+148    	; 0x1452 <Timer_enuSetPrescaler+0xba>
			if(Copy_pstrTimerConfig->Timer_Num == TIMER0_ID){
    13be:	ea 81       	ldd	r30, Y+2	; 0x02
    13c0:	fb 81       	ldd	r31, Y+3	; 0x03
    13c2:	80 81       	ld	r24, Z
    13c4:	8b 34       	cpi	r24, 0x4B	; 75
    13c6:	91 f4       	brne	.+36     	; 0x13ec <Timer_enuSetPrescaler+0x54>
				TCCR0 &= ~(0x07);
    13c8:	a3 e5       	ldi	r26, 0x53	; 83
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	e3 e5       	ldi	r30, 0x53	; 83
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	88 7f       	andi	r24, 0xF8	; 248
    13d4:	8c 93       	st	X, r24
				TCCR0 |= Copy_u8Preload;
    13d6:	a3 e5       	ldi	r26, 0x53	; 83
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	e3 e5       	ldi	r30, 0x53	; 83
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	90 81       	ld	r25, Z
    13e0:	8c 81       	ldd	r24, Y+4	; 0x04
    13e2:	89 2b       	or	r24, r25
    13e4:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	89 83       	std	Y+1, r24	; 0x01
    13ea:	33 c0       	rjmp	.+102    	; 0x1452 <Timer_enuSetPrescaler+0xba>
			}
			else if(Copy_pstrTimerConfig->Timer_Num == TIMER1_ID){
    13ec:	ea 81       	ldd	r30, Y+2	; 0x02
    13ee:	fb 81       	ldd	r31, Y+3	; 0x03
    13f0:	80 81       	ld	r24, Z
    13f2:	82 32       	cpi	r24, 0x22	; 34
    13f4:	91 f4       	brne	.+36     	; 0x141a <Timer_enuSetPrescaler+0x82>
				TCCR1B &= ~(0x07);
    13f6:	ae e4       	ldi	r26, 0x4E	; 78
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	ee e4       	ldi	r30, 0x4E	; 78
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	88 7f       	andi	r24, 0xF8	; 248
    1402:	8c 93       	st	X, r24
				TCCR1B |= Copy_u8Preload;
    1404:	ae e4       	ldi	r26, 0x4E	; 78
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	ee e4       	ldi	r30, 0x4E	; 78
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	90 81       	ld	r25, Z
    140e:	8c 81       	ldd	r24, Y+4	; 0x04
    1410:	89 2b       	or	r24, r25
    1412:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	89 83       	std	Y+1, r24	; 0x01
    1418:	1c c0       	rjmp	.+56     	; 0x1452 <Timer_enuSetPrescaler+0xba>
			}
			else if(Copy_pstrTimerConfig->Timer_Num == TIMER2_ID){
    141a:	ea 81       	ldd	r30, Y+2	; 0x02
    141c:	fb 81       	ldd	r31, Y+3	; 0x03
    141e:	80 81       	ld	r24, Z
    1420:	88 35       	cpi	r24, 0x58	; 88
    1422:	91 f4       	brne	.+36     	; 0x1448 <Timer_enuSetPrescaler+0xb0>
				TCCR2 &= ~(0x07);
    1424:	a5 e4       	ldi	r26, 0x45	; 69
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	e5 e4       	ldi	r30, 0x45	; 69
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	88 7f       	andi	r24, 0xF8	; 248
    1430:	8c 93       	st	X, r24
				TCCR2 |= Copy_u8Preload;
    1432:	a5 e4       	ldi	r26, 0x45	; 69
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	e5 e4       	ldi	r30, 0x45	; 69
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	90 81       	ld	r25, Z
    143c:	8c 81       	ldd	r24, Y+4	; 0x04
    143e:	89 2b       	or	r24, r25
    1440:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	89 83       	std	Y+1, r24	; 0x01
    1446:	05 c0       	rjmp	.+10     	; 0x1452 <Timer_enuSetPrescaler+0xba>
			}
			else
				Local_enuErrorState = ES_OUT_OF_RANGE;
    1448:	82 e0       	ldi	r24, 0x02	; 2
    144a:	89 83       	std	Y+1, r24	; 0x01
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <Timer_enuSetPrescaler+0xba>
		}
	}
	else
		Local_enuErrorState = ES_NULL_POINTER;
    144e:	83 e0       	ldi	r24, 0x03	; 3
    1450:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    1452:	89 81       	ldd	r24, Y+1	; 0x01
}
    1454:	0f 90       	pop	r0
    1456:	0f 90       	pop	r0
    1458:	0f 90       	pop	r0
    145a:	0f 90       	pop	r0
    145c:	cf 91       	pop	r28
    145e:	df 91       	pop	r29
    1460:	08 95       	ret

00001462 <Timer_enuSetOutputCompare>:

ES_t Timer_enuSetOutputCompare(u8 Copy_u8OCR, u16 Copy_u16OCValue){
    1462:	df 93       	push	r29
    1464:	cf 93       	push	r28
    1466:	00 d0       	rcall	.+0      	; 0x1468 <Timer_enuSetOutputCompare+0x6>
    1468:	00 d0       	rcall	.+0      	; 0x146a <Timer_enuSetOutputCompare+0x8>
    146a:	00 d0       	rcall	.+0      	; 0x146c <Timer_enuSetOutputCompare+0xa>
    146c:	cd b7       	in	r28, 0x3d	; 61
    146e:	de b7       	in	r29, 0x3e	; 62
    1470:	8a 83       	std	Y+2, r24	; 0x02
    1472:	7c 83       	std	Y+4, r23	; 0x04
    1474:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_OK;
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8OCR){
    147a:	8a 81       	ldd	r24, Y+2	; 0x02
    147c:	28 2f       	mov	r18, r24
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	3e 83       	std	Y+6, r19	; 0x06
    1482:	2d 83       	std	Y+5, r18	; 0x05
    1484:	8d 81       	ldd	r24, Y+5	; 0x05
    1486:	9e 81       	ldd	r25, Y+6	; 0x06
    1488:	87 31       	cpi	r24, 0x17	; 23
    148a:	91 05       	cpc	r25, r1
    148c:	d9 f0       	breq	.+54     	; 0x14c4 <Timer_enuSetOutputCompare+0x62>
    148e:	2d 81       	ldd	r18, Y+5	; 0x05
    1490:	3e 81       	ldd	r19, Y+6	; 0x06
    1492:	28 31       	cpi	r18, 0x18	; 24
    1494:	31 05       	cpc	r19, r1
    1496:	34 f4       	brge	.+12     	; 0x14a4 <Timer_enuSetOutputCompare+0x42>
    1498:	8d 81       	ldd	r24, Y+5	; 0x05
    149a:	9e 81       	ldd	r25, Y+6	; 0x06
    149c:	8e 30       	cpi	r24, 0x0E	; 14
    149e:	91 05       	cpc	r25, r1
    14a0:	61 f0       	breq	.+24     	; 0x14ba <Timer_enuSetOutputCompare+0x58>
    14a2:	2d c0       	rjmp	.+90     	; 0x14fe <Timer_enuSetOutputCompare+0x9c>
    14a4:	2d 81       	ldd	r18, Y+5	; 0x05
    14a6:	3e 81       	ldd	r19, Y+6	; 0x06
    14a8:	20 32       	cpi	r18, 0x20	; 32
    14aa:	31 05       	cpc	r19, r1
    14ac:	b9 f0       	breq	.+46     	; 0x14dc <Timer_enuSetOutputCompare+0x7a>
    14ae:	8d 81       	ldd	r24, Y+5	; 0x05
    14b0:	9e 81       	ldd	r25, Y+6	; 0x06
    14b2:	89 32       	cpi	r24, 0x29	; 41
    14b4:	91 05       	cpc	r25, r1
    14b6:	f1 f0       	breq	.+60     	; 0x14f4 <Timer_enuSetOutputCompare+0x92>
    14b8:	22 c0       	rjmp	.+68     	; 0x14fe <Timer_enuSetOutputCompare+0x9c>
	case T0_OCR:
		OCR0 = ((u8)Copy_u16OCValue);
    14ba:	ec e5       	ldi	r30, 0x5C	; 92
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	80 83       	st	Z, r24
    14c2:	1e c0       	rjmp	.+60     	; 0x1500 <Timer_enuSetOutputCompare+0x9e>
		break;
	case T1A_OCR:
		OCR1AH = (Copy_u16OCValue>>8);
    14c4:	eb e4       	ldi	r30, 0x4B	; 75
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	9c 81       	ldd	r25, Y+4	; 0x04
    14cc:	89 2f       	mov	r24, r25
    14ce:	99 27       	eor	r25, r25
    14d0:	80 83       	st	Z, r24
		OCR1AL = ((u8)Copy_u16OCValue);
    14d2:	ea e4       	ldi	r30, 0x4A	; 74
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	80 83       	st	Z, r24
    14da:	12 c0       	rjmp	.+36     	; 0x1500 <Timer_enuSetOutputCompare+0x9e>
		break;
	case T1B_OCR:
		OCR1BH = (Copy_u16OCValue>>8);
    14dc:	e9 e4       	ldi	r30, 0x49	; 73
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	9c 81       	ldd	r25, Y+4	; 0x04
    14e4:	89 2f       	mov	r24, r25
    14e6:	99 27       	eor	r25, r25
    14e8:	80 83       	st	Z, r24
		OCR1BL = ((u8)Copy_u16OCValue);
    14ea:	e8 e4       	ldi	r30, 0x48	; 72
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	8b 81       	ldd	r24, Y+3	; 0x03
    14f0:	80 83       	st	Z, r24
    14f2:	06 c0       	rjmp	.+12     	; 0x1500 <Timer_enuSetOutputCompare+0x9e>
		break;
	case T2_OCR:
		OCR2 = ((u8)Copy_u16OCValue);
    14f4:	e3 e4       	ldi	r30, 0x43	; 67
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	8b 81       	ldd	r24, Y+3	; 0x03
    14fa:	80 83       	st	Z, r24
    14fc:	01 c0       	rjmp	.+2      	; 0x1500 <Timer_enuSetOutputCompare+0x9e>
		break;
	default:
		Local_enuErrorState = ES_NOK;
    14fe:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_enuErrorState;
    1500:	89 81       	ldd	r24, Y+1	; 0x01
}
    1502:	26 96       	adiw	r28, 0x06	; 6
    1504:	0f b6       	in	r0, 0x3f	; 63
    1506:	f8 94       	cli
    1508:	de bf       	out	0x3e, r29	; 62
    150a:	0f be       	out	0x3f, r0	; 63
    150c:	cd bf       	out	0x3d, r28	; 61
    150e:	cf 91       	pop	r28
    1510:	df 91       	pop	r29
    1512:	08 95       	ret

00001514 <Timer_enuReadTCNT>:

ES_t Timer_enuReadTCNT(Timer_t *Copy_pstrTimerConfig, u16 *Copy_u16Value){
    1514:	df 93       	push	r29
    1516:	cf 93       	push	r28
    1518:	00 d0       	rcall	.+0      	; 0x151a <Timer_enuReadTCNT+0x6>
    151a:	00 d0       	rcall	.+0      	; 0x151c <Timer_enuReadTCNT+0x8>
    151c:	0f 92       	push	r0
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
    1522:	9b 83       	std	Y+3, r25	; 0x03
    1524:	8a 83       	std	Y+2, r24	; 0x02
    1526:	7d 83       	std	Y+5, r23	; 0x05
    1528:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    152a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pstrTimerConfig != NULL){
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	9b 81       	ldd	r25, Y+3	; 0x03
    1530:	00 97       	sbiw	r24, 0x00	; 0
    1532:	09 f4       	brne	.+2      	; 0x1536 <Timer_enuReadTCNT+0x22>
    1534:	41 c0       	rjmp	.+130    	; 0x15b8 <Timer_enuReadTCNT+0xa4>
		if(Copy_pstrTimerConfig->Timer_Num == TIMER0_ID){
    1536:	ea 81       	ldd	r30, Y+2	; 0x02
    1538:	fb 81       	ldd	r31, Y+3	; 0x03
    153a:	80 81       	ld	r24, Z
    153c:	8b 34       	cpi	r24, 0x4B	; 75
    153e:	61 f4       	brne	.+24     	; 0x1558 <Timer_enuReadTCNT+0x44>
			*Copy_u16Value = TCNT0;
    1540:	e2 e5       	ldi	r30, 0x52	; 82
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	88 2f       	mov	r24, r24
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	ec 81       	ldd	r30, Y+4	; 0x04
    154c:	fd 81       	ldd	r31, Y+5	; 0x05
    154e:	91 83       	std	Z+1, r25	; 0x01
    1550:	80 83       	st	Z, r24
			Local_enuErrorState = ES_OK;
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	89 83       	std	Y+1, r24	; 0x01
    1556:	32 c0       	rjmp	.+100    	; 0x15bc <Timer_enuReadTCNT+0xa8>
		}
		else if(Copy_pstrTimerConfig->Timer_Num == TIMER1_ID){
    1558:	ea 81       	ldd	r30, Y+2	; 0x02
    155a:	fb 81       	ldd	r31, Y+3	; 0x03
    155c:	80 81       	ld	r24, Z
    155e:	82 32       	cpi	r24, 0x22	; 34
    1560:	b9 f4       	brne	.+46     	; 0x1590 <Timer_enuReadTCNT+0x7c>
			*Copy_u16Value = TCNT1L;
    1562:	ec e4       	ldi	r30, 0x4C	; 76
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	88 2f       	mov	r24, r24
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	ec 81       	ldd	r30, Y+4	; 0x04
    156e:	fd 81       	ldd	r31, Y+5	; 0x05
    1570:	91 83       	std	Z+1, r25	; 0x01
    1572:	80 83       	st	Z, r24
			*Copy_u16Value = (((u16)TCNT1H)<<8);
    1574:	ed e4       	ldi	r30, 0x4D	; 77
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	88 2f       	mov	r24, r24
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	98 2f       	mov	r25, r24
    1580:	88 27       	eor	r24, r24
    1582:	ec 81       	ldd	r30, Y+4	; 0x04
    1584:	fd 81       	ldd	r31, Y+5	; 0x05
    1586:	91 83       	std	Z+1, r25	; 0x01
    1588:	80 83       	st	Z, r24
			Local_enuErrorState = ES_OK;
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	89 83       	std	Y+1, r24	; 0x01
    158e:	16 c0       	rjmp	.+44     	; 0x15bc <Timer_enuReadTCNT+0xa8>
		}
		else if(Copy_pstrTimerConfig->Timer_Num == TIMER2_ID){
    1590:	ea 81       	ldd	r30, Y+2	; 0x02
    1592:	fb 81       	ldd	r31, Y+3	; 0x03
    1594:	80 81       	ld	r24, Z
    1596:	88 35       	cpi	r24, 0x58	; 88
    1598:	61 f4       	brne	.+24     	; 0x15b2 <Timer_enuReadTCNT+0x9e>
			*Copy_u16Value = TCNT2;
    159a:	e4 e4       	ldi	r30, 0x44	; 68
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	88 2f       	mov	r24, r24
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	ec 81       	ldd	r30, Y+4	; 0x04
    15a6:	fd 81       	ldd	r31, Y+5	; 0x05
    15a8:	91 83       	std	Z+1, r25	; 0x01
    15aa:	80 83       	st	Z, r24
			Local_enuErrorState = ES_OK;
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	89 83       	std	Y+1, r24	; 0x01
    15b0:	05 c0       	rjmp	.+10     	; 0x15bc <Timer_enuReadTCNT+0xa8>
		}
		else
			Local_enuErrorState = ES_OUT_OF_RANGE;
    15b2:	82 e0       	ldi	r24, 0x02	; 2
    15b4:	89 83       	std	Y+1, r24	; 0x01
    15b6:	02 c0       	rjmp	.+4      	; 0x15bc <Timer_enuReadTCNT+0xa8>
	}
	else
		Local_enuErrorState = ES_NULL_POINTER;
    15b8:	83 e0       	ldi	r24, 0x03	; 3
    15ba:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    15bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    15be:	0f 90       	pop	r0
    15c0:	0f 90       	pop	r0
    15c2:	0f 90       	pop	r0
    15c4:	0f 90       	pop	r0
    15c6:	0f 90       	pop	r0
    15c8:	cf 91       	pop	r28
    15ca:	df 91       	pop	r29
    15cc:	08 95       	ret

000015ce <Timer_enuSetTCNT>:

ES_t Timer_enuSetTCNT(Timer_t *Copy_pstrTimerConfig, u16 Copy_u16Value){
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	00 d0       	rcall	.+0      	; 0x15d4 <Timer_enuSetTCNT+0x6>
    15d4:	00 d0       	rcall	.+0      	; 0x15d6 <Timer_enuSetTCNT+0x8>
    15d6:	0f 92       	push	r0
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
    15dc:	9b 83       	std	Y+3, r25	; 0x03
    15de:	8a 83       	std	Y+2, r24	; 0x02
    15e0:	7d 83       	std	Y+5, r23	; 0x05
    15e2:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    15e4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pstrTimerConfig != NULL){
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	9b 81       	ldd	r25, Y+3	; 0x03
    15ea:	00 97       	sbiw	r24, 0x00	; 0
    15ec:	71 f1       	breq	.+92     	; 0x164a <Timer_enuSetTCNT+0x7c>
		if(Copy_pstrTimerConfig->Timer_Num == TIMER0_ID){
    15ee:	ea 81       	ldd	r30, Y+2	; 0x02
    15f0:	fb 81       	ldd	r31, Y+3	; 0x03
    15f2:	80 81       	ld	r24, Z
    15f4:	8b 34       	cpi	r24, 0x4B	; 75
    15f6:	39 f4       	brne	.+14     	; 0x1606 <Timer_enuSetTCNT+0x38>
			TCNT0 = ((u8)Copy_u16Value);
    15f8:	e2 e5       	ldi	r30, 0x52	; 82
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	8c 81       	ldd	r24, Y+4	; 0x04
    15fe:	80 83       	st	Z, r24
			Local_enuErrorState = ES_OK;
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	89 83       	std	Y+1, r24	; 0x01
    1604:	24 c0       	rjmp	.+72     	; 0x164e <Timer_enuSetTCNT+0x80>
		}
		else if(Copy_pstrTimerConfig->Timer_Num == TIMER1_ID){
    1606:	ea 81       	ldd	r30, Y+2	; 0x02
    1608:	fb 81       	ldd	r31, Y+3	; 0x03
    160a:	80 81       	ld	r24, Z
    160c:	82 32       	cpi	r24, 0x22	; 34
    160e:	71 f4       	brne	.+28     	; 0x162c <Timer_enuSetTCNT+0x5e>
			TCNT1H = (Copy_u16Value>>8);
    1610:	ed e4       	ldi	r30, 0x4D	; 77
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	8c 81       	ldd	r24, Y+4	; 0x04
    1616:	9d 81       	ldd	r25, Y+5	; 0x05
    1618:	89 2f       	mov	r24, r25
    161a:	99 27       	eor	r25, r25
    161c:	80 83       	st	Z, r24
			TCNT1L = ((u8)Copy_u16Value);
    161e:	ec e4       	ldi	r30, 0x4C	; 76
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	8c 81       	ldd	r24, Y+4	; 0x04
    1624:	80 83       	st	Z, r24
			Local_enuErrorState = ES_OK;
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	89 83       	std	Y+1, r24	; 0x01
    162a:	11 c0       	rjmp	.+34     	; 0x164e <Timer_enuSetTCNT+0x80>
		}
		else if(Copy_pstrTimerConfig->Timer_Num == TIMER2_ID){
    162c:	ea 81       	ldd	r30, Y+2	; 0x02
    162e:	fb 81       	ldd	r31, Y+3	; 0x03
    1630:	80 81       	ld	r24, Z
    1632:	88 35       	cpi	r24, 0x58	; 88
    1634:	39 f4       	brne	.+14     	; 0x1644 <Timer_enuSetTCNT+0x76>
			TCNT2 = ((u8)Copy_u16Value);
    1636:	e4 e4       	ldi	r30, 0x44	; 68
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	8c 81       	ldd	r24, Y+4	; 0x04
    163c:	80 83       	st	Z, r24
			Local_enuErrorState = ES_OK;
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	89 83       	std	Y+1, r24	; 0x01
    1642:	05 c0       	rjmp	.+10     	; 0x164e <Timer_enuSetTCNT+0x80>
		}
		else
			Local_enuErrorState = ES_OUT_OF_RANGE;
    1644:	82 e0       	ldi	r24, 0x02	; 2
    1646:	89 83       	std	Y+1, r24	; 0x01
    1648:	02 c0       	rjmp	.+4      	; 0x164e <Timer_enuSetTCNT+0x80>
	}
	else
		Local_enuErrorState = ES_NULL_POINTER;
    164a:	83 e0       	ldi	r24, 0x03	; 3
    164c:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    164e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1650:	0f 90       	pop	r0
    1652:	0f 90       	pop	r0
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
    1658:	0f 90       	pop	r0
    165a:	cf 91       	pop	r28
    165c:	df 91       	pop	r29
    165e:	08 95       	ret

00001660 <Timer_enuEnableINT>:

ES_t Timer_enuEnableINT(u8 Copy_u8INT){
    1660:	df 93       	push	r29
    1662:	cf 93       	push	r28
    1664:	00 d0       	rcall	.+0      	; 0x1666 <Timer_enuEnableINT+0x6>
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
    166a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    166c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8INT <= 7 && Copy_u8INT != 5){
    166e:	8a 81       	ldd	r24, Y+2	; 0x02
    1670:	88 30       	cpi	r24, 0x08	; 8
    1672:	b8 f4       	brcc	.+46     	; 0x16a2 <Timer_enuEnableINT+0x42>
    1674:	8a 81       	ldd	r24, Y+2	; 0x02
    1676:	85 30       	cpi	r24, 0x05	; 5
    1678:	a1 f0       	breq	.+40     	; 0x16a2 <Timer_enuEnableINT+0x42>
		TIMSK |= (1<<Copy_u8INT);
    167a:	a9 e5       	ldi	r26, 0x59	; 89
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	e9 e5       	ldi	r30, 0x59	; 89
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	48 2f       	mov	r20, r24
    1686:	8a 81       	ldd	r24, Y+2	; 0x02
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	02 2e       	mov	r0, r18
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <Timer_enuEnableINT+0x38>
    1694:	88 0f       	add	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	0a 94       	dec	r0
    169a:	e2 f7       	brpl	.-8      	; 0x1694 <Timer_enuEnableINT+0x34>
    169c:	84 2b       	or	r24, r20
    169e:	8c 93       	st	X, r24
    16a0:	01 c0       	rjmp	.+2      	; 0x16a4 <Timer_enuEnableINT+0x44>
	}
	else
		Local_enuErrorState = ES_NOK;
    16a2:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    16a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    16a6:	0f 90       	pop	r0
    16a8:	0f 90       	pop	r0
    16aa:	cf 91       	pop	r28
    16ac:	df 91       	pop	r29
    16ae:	08 95       	ret

000016b0 <Timer_enuDisableINT>:

ES_t Timer_enuDisableINT(u8 Copy_u8INT){
    16b0:	df 93       	push	r29
    16b2:	cf 93       	push	r28
    16b4:	00 d0       	rcall	.+0      	; 0x16b6 <Timer_enuDisableINT+0x6>
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
    16ba:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    16bc:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8INT <= 7 && Copy_u8INT != 5){
    16be:	8a 81       	ldd	r24, Y+2	; 0x02
    16c0:	88 30       	cpi	r24, 0x08	; 8
    16c2:	c0 f4       	brcc	.+48     	; 0x16f4 <Timer_enuDisableINT+0x44>
    16c4:	8a 81       	ldd	r24, Y+2	; 0x02
    16c6:	85 30       	cpi	r24, 0x05	; 5
    16c8:	a9 f0       	breq	.+42     	; 0x16f4 <Timer_enuDisableINT+0x44>
		TIMSK &= ~(1<<Copy_u8INT);
    16ca:	a9 e5       	ldi	r26, 0x59	; 89
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	e9 e5       	ldi	r30, 0x59	; 89
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	48 2f       	mov	r20, r24
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	28 2f       	mov	r18, r24
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	02 2e       	mov	r0, r18
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <Timer_enuDisableINT+0x38>
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	0a 94       	dec	r0
    16ea:	e2 f7       	brpl	.-8      	; 0x16e4 <Timer_enuDisableINT+0x34>
    16ec:	80 95       	com	r24
    16ee:	84 23       	and	r24, r20
    16f0:	8c 93       	st	X, r24
    16f2:	01 c0       	rjmp	.+2      	; 0x16f6 <Timer_enuDisableINT+0x46>
	}
	else
		Local_enuErrorState = ES_NOK;
    16f4:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	cf 91       	pop	r28
    16fe:	df 91       	pop	r29
    1700:	08 95       	ret

00001702 <Timer_enuSetOCRMode>:

ES_t Timer_enuSetOCRMode(u8 Copy_u8OCR ,u8 Copy_u8OCRMode){
    1702:	df 93       	push	r29
    1704:	cf 93       	push	r28
    1706:	00 d0       	rcall	.+0      	; 0x1708 <Timer_enuSetOCRMode+0x6>
    1708:	00 d0       	rcall	.+0      	; 0x170a <Timer_enuSetOCRMode+0x8>
    170a:	0f 92       	push	r0
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
    1710:	8a 83       	std	Y+2, r24	; 0x02
    1712:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_OK;
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8OCRMode <= 3){
    1718:	8b 81       	ldd	r24, Y+3	; 0x03
    171a:	84 30       	cpi	r24, 0x04	; 4
    171c:	08 f0       	brcs	.+2      	; 0x1720 <Timer_enuSetOCRMode+0x1e>
    171e:	6d c0       	rjmp	.+218    	; 0x17fa <Timer_enuSetOCRMode+0xf8>
		switch(Copy_u8OCR){
    1720:	8a 81       	ldd	r24, Y+2	; 0x02
    1722:	28 2f       	mov	r18, r24
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	3d 83       	std	Y+5, r19	; 0x05
    1728:	2c 83       	std	Y+4, r18	; 0x04
    172a:	8c 81       	ldd	r24, Y+4	; 0x04
    172c:	9d 81       	ldd	r25, Y+5	; 0x05
    172e:	87 31       	cpi	r24, 0x17	; 23
    1730:	91 05       	cpc	r25, r1
    1732:	41 f1       	breq	.+80     	; 0x1784 <Timer_enuSetOCRMode+0x82>
    1734:	2c 81       	ldd	r18, Y+4	; 0x04
    1736:	3d 81       	ldd	r19, Y+5	; 0x05
    1738:	28 31       	cpi	r18, 0x18	; 24
    173a:	31 05       	cpc	r19, r1
    173c:	34 f4       	brge	.+12     	; 0x174a <Timer_enuSetOCRMode+0x48>
    173e:	8c 81       	ldd	r24, Y+4	; 0x04
    1740:	9d 81       	ldd	r25, Y+5	; 0x05
    1742:	8e 30       	cpi	r24, 0x0E	; 14
    1744:	91 05       	cpc	r25, r1
    1746:	61 f0       	breq	.+24     	; 0x1760 <Timer_enuSetOCRMode+0x5e>
    1748:	56 c0       	rjmp	.+172    	; 0x17f6 <Timer_enuSetOCRMode+0xf4>
    174a:	2c 81       	ldd	r18, Y+4	; 0x04
    174c:	3d 81       	ldd	r19, Y+5	; 0x05
    174e:	20 32       	cpi	r18, 0x20	; 32
    1750:	31 05       	cpc	r19, r1
    1752:	69 f1       	breq	.+90     	; 0x17ae <Timer_enuSetOCRMode+0xac>
    1754:	8c 81       	ldd	r24, Y+4	; 0x04
    1756:	9d 81       	ldd	r25, Y+5	; 0x05
    1758:	89 32       	cpi	r24, 0x29	; 41
    175a:	91 05       	cpc	r25, r1
    175c:	d1 f1       	breq	.+116    	; 0x17d2 <Timer_enuSetOCRMode+0xd0>
    175e:	4b c0       	rjmp	.+150    	; 0x17f6 <Timer_enuSetOCRMode+0xf4>
		case T0_OCR:
			TCCR0 |= (Copy_u8OCRMode << 4);
    1760:	a3 e5       	ldi	r26, 0x53	; 83
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	e3 e5       	ldi	r30, 0x53	; 83
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	28 2f       	mov	r18, r24
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	88 2f       	mov	r24, r24
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	82 95       	swap	r24
    1774:	92 95       	swap	r25
    1776:	90 7f       	andi	r25, 0xF0	; 240
    1778:	98 27       	eor	r25, r24
    177a:	80 7f       	andi	r24, 0xF0	; 240
    177c:	98 27       	eor	r25, r24
    177e:	82 2b       	or	r24, r18
    1780:	8c 93       	st	X, r24
    1782:	3d c0       	rjmp	.+122    	; 0x17fe <Timer_enuSetOCRMode+0xfc>
			break;
		case T1A_OCR:
			TCCR1A |= (Copy_u8OCRMode << 6);
    1784:	af e4       	ldi	r26, 0x4F	; 79
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	ef e4       	ldi	r30, 0x4F	; 79
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	28 2f       	mov	r18, r24
    1790:	8b 81       	ldd	r24, Y+3	; 0x03
    1792:	88 2f       	mov	r24, r24
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	00 24       	eor	r0, r0
    1798:	96 95       	lsr	r25
    179a:	87 95       	ror	r24
    179c:	07 94       	ror	r0
    179e:	96 95       	lsr	r25
    17a0:	87 95       	ror	r24
    17a2:	07 94       	ror	r0
    17a4:	98 2f       	mov	r25, r24
    17a6:	80 2d       	mov	r24, r0
    17a8:	82 2b       	or	r24, r18
    17aa:	8c 93       	st	X, r24
    17ac:	28 c0       	rjmp	.+80     	; 0x17fe <Timer_enuSetOCRMode+0xfc>
			break;
		case T1B_OCR:
			TCCR1A |= (Copy_u8OCRMode << 4);
    17ae:	af e4       	ldi	r26, 0x4F	; 79
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	ef e4       	ldi	r30, 0x4F	; 79
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	28 2f       	mov	r18, r24
    17ba:	8b 81       	ldd	r24, Y+3	; 0x03
    17bc:	88 2f       	mov	r24, r24
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	82 95       	swap	r24
    17c2:	92 95       	swap	r25
    17c4:	90 7f       	andi	r25, 0xF0	; 240
    17c6:	98 27       	eor	r25, r24
    17c8:	80 7f       	andi	r24, 0xF0	; 240
    17ca:	98 27       	eor	r25, r24
    17cc:	82 2b       	or	r24, r18
    17ce:	8c 93       	st	X, r24
    17d0:	16 c0       	rjmp	.+44     	; 0x17fe <Timer_enuSetOCRMode+0xfc>
			break;
		case T2_OCR:
			TCCR2 |= (Copy_u8OCRMode << 4);
    17d2:	a5 e4       	ldi	r26, 0x45	; 69
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	e5 e4       	ldi	r30, 0x45	; 69
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	28 2f       	mov	r18, r24
    17de:	8b 81       	ldd	r24, Y+3	; 0x03
    17e0:	88 2f       	mov	r24, r24
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	82 95       	swap	r24
    17e6:	92 95       	swap	r25
    17e8:	90 7f       	andi	r25, 0xF0	; 240
    17ea:	98 27       	eor	r25, r24
    17ec:	80 7f       	andi	r24, 0xF0	; 240
    17ee:	98 27       	eor	r25, r24
    17f0:	82 2b       	or	r24, r18
    17f2:	8c 93       	st	X, r24
    17f4:	04 c0       	rjmp	.+8      	; 0x17fe <Timer_enuSetOCRMode+0xfc>
			break;
		default:
			Local_enuErrorState = ES_NOK;
    17f6:	19 82       	std	Y+1, r1	; 0x01
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <Timer_enuSetOCRMode+0xfc>
		}
	}
	else
		Local_enuErrorState = ES_OUT_OF_RANGE;
    17fa:	82 e0       	ldi	r24, 0x02	; 2
    17fc:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1800:	0f 90       	pop	r0
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	0f 90       	pop	r0
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	08 95       	ret

00001810 <Timer_enuCallBack>:

ES_t Timer_enuCallBack(u8 Copy_u8TimerType, void (*Copy_pfunAppFun)(void*),void *Copy_pvidAppParameter){
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	00 d0       	rcall	.+0      	; 0x1816 <Timer_enuCallBack+0x6>
    1816:	00 d0       	rcall	.+0      	; 0x1818 <Timer_enuCallBack+0x8>
    1818:	00 d0       	rcall	.+0      	; 0x181a <Timer_enuCallBack+0xa>
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
    181e:	8a 83       	std	Y+2, r24	; 0x02
    1820:	7c 83       	std	Y+4, r23	; 0x04
    1822:	6b 83       	std	Y+3, r22	; 0x03
    1824:	5e 83       	std	Y+6, r21	; 0x06
    1826:	4d 83       	std	Y+5, r20	; 0x05
	ES_t Local_enuErrorState = ES_OK;
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pfunAppFun != NULL && Copy_pvidAppParameter != NULL){
    182c:	8b 81       	ldd	r24, Y+3	; 0x03
    182e:	9c 81       	ldd	r25, Y+4	; 0x04
    1830:	00 97       	sbiw	r24, 0x00	; 0
    1832:	09 f4       	brne	.+2      	; 0x1836 <Timer_enuCallBack+0x26>
    1834:	45 c0       	rjmp	.+138    	; 0x18c0 <Timer_enuCallBack+0xb0>
    1836:	8d 81       	ldd	r24, Y+5	; 0x05
    1838:	9e 81       	ldd	r25, Y+6	; 0x06
    183a:	00 97       	sbiw	r24, 0x00	; 0
    183c:	09 f4       	brne	.+2      	; 0x1840 <Timer_enuCallBack+0x30>
    183e:	40 c0       	rjmp	.+128    	; 0x18c0 <Timer_enuCallBack+0xb0>
		if(Copy_u8TimerType <= 4){
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	85 30       	cpi	r24, 0x05	; 5
    1844:	c8 f4       	brcc	.+50     	; 0x1878 <Timer_enuCallBack+0x68>
			Timer_pfunISRFun[Copy_u8TimerType] = Copy_pfunAppFun;
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	88 2f       	mov	r24, r24
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	88 0f       	add	r24, r24
    184e:	99 1f       	adc	r25, r25
    1850:	fc 01       	movw	r30, r24
    1852:	e8 54       	subi	r30, 0x48	; 72
    1854:	ff 4f       	sbci	r31, 0xFF	; 255
    1856:	8b 81       	ldd	r24, Y+3	; 0x03
    1858:	9c 81       	ldd	r25, Y+4	; 0x04
    185a:	91 83       	std	Z+1, r25	; 0x01
    185c:	80 83       	st	Z, r24
			Timer_pvidISRParameter[Copy_u8TimerType] = Copy_pvidAppParameter;
    185e:	8a 81       	ldd	r24, Y+2	; 0x02
    1860:	88 2f       	mov	r24, r24
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	88 0f       	add	r24, r24
    1866:	99 1f       	adc	r25, r25
    1868:	fc 01       	movw	r30, r24
    186a:	ea 53       	subi	r30, 0x3A	; 58
    186c:	ff 4f       	sbci	r31, 0xFF	; 255
    186e:	8d 81       	ldd	r24, Y+5	; 0x05
    1870:	9e 81       	ldd	r25, Y+6	; 0x06
    1872:	91 83       	std	Z+1, r25	; 0x01
    1874:	80 83       	st	Z, r24
    1876:	26 c0       	rjmp	.+76     	; 0x18c4 <Timer_enuCallBack+0xb4>
		}
		else if(Copy_u8TimerType > 4 && Copy_u8TimerType <= 7){
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	85 30       	cpi	r24, 0x05	; 5
    187c:	f8 f0       	brcs	.+62     	; 0x18bc <Timer_enuCallBack+0xac>
    187e:	8a 81       	ldd	r24, Y+2	; 0x02
    1880:	88 30       	cpi	r24, 0x08	; 8
    1882:	e0 f4       	brcc	.+56     	; 0x18bc <Timer_enuCallBack+0xac>
			Copy_u8TimerType--;
    1884:	8a 81       	ldd	r24, Y+2	; 0x02
    1886:	81 50       	subi	r24, 0x01	; 1
    1888:	8a 83       	std	Y+2, r24	; 0x02
			Timer_pfunISRFun[Copy_u8TimerType] = Copy_pfunAppFun;
    188a:	8a 81       	ldd	r24, Y+2	; 0x02
    188c:	88 2f       	mov	r24, r24
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	88 0f       	add	r24, r24
    1892:	99 1f       	adc	r25, r25
    1894:	fc 01       	movw	r30, r24
    1896:	e8 54       	subi	r30, 0x48	; 72
    1898:	ff 4f       	sbci	r31, 0xFF	; 255
    189a:	8b 81       	ldd	r24, Y+3	; 0x03
    189c:	9c 81       	ldd	r25, Y+4	; 0x04
    189e:	91 83       	std	Z+1, r25	; 0x01
    18a0:	80 83       	st	Z, r24
			Timer_pvidISRParameter[Copy_u8TimerType] = Copy_pvidAppParameter;
    18a2:	8a 81       	ldd	r24, Y+2	; 0x02
    18a4:	88 2f       	mov	r24, r24
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	88 0f       	add	r24, r24
    18aa:	99 1f       	adc	r25, r25
    18ac:	fc 01       	movw	r30, r24
    18ae:	ea 53       	subi	r30, 0x3A	; 58
    18b0:	ff 4f       	sbci	r31, 0xFF	; 255
    18b2:	8d 81       	ldd	r24, Y+5	; 0x05
    18b4:	9e 81       	ldd	r25, Y+6	; 0x06
    18b6:	91 83       	std	Z+1, r25	; 0x01
    18b8:	80 83       	st	Z, r24
    18ba:	04 c0       	rjmp	.+8      	; 0x18c4 <Timer_enuCallBack+0xb4>
		}
		else
			Local_enuErrorState = ES_NOK;
    18bc:	19 82       	std	Y+1, r1	; 0x01
    18be:	02 c0       	rjmp	.+4      	; 0x18c4 <Timer_enuCallBack+0xb4>
	}
	else
		Local_enuErrorState = ES_NULL_POINTER;
    18c0:	83 e0       	ldi	r24, 0x03	; 3
    18c2:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    18c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    18c6:	26 96       	adiw	r28, 0x06	; 6
    18c8:	0f b6       	in	r0, 0x3f	; 63
    18ca:	f8 94       	cli
    18cc:	de bf       	out	0x3e, r29	; 62
    18ce:	0f be       	out	0x3f, r0	; 63
    18d0:	cd bf       	out	0x3d, r28	; 61
    18d2:	cf 91       	pop	r28
    18d4:	df 91       	pop	r29
    18d6:	08 95       	ret

000018d8 <__vector_11>:

ISR(VECT_TIMER0_OVF){
    18d8:	1f 92       	push	r1
    18da:	0f 92       	push	r0
    18dc:	0f b6       	in	r0, 0x3f	; 63
    18de:	0f 92       	push	r0
    18e0:	11 24       	eor	r1, r1
    18e2:	2f 93       	push	r18
    18e4:	3f 93       	push	r19
    18e6:	4f 93       	push	r20
    18e8:	5f 93       	push	r21
    18ea:	6f 93       	push	r22
    18ec:	7f 93       	push	r23
    18ee:	8f 93       	push	r24
    18f0:	9f 93       	push	r25
    18f2:	af 93       	push	r26
    18f4:	bf 93       	push	r27
    18f6:	ef 93       	push	r30
    18f8:	ff 93       	push	r31
    18fa:	df 93       	push	r29
    18fc:	cf 93       	push	r28
    18fe:	cd b7       	in	r28, 0x3d	; 61
    1900:	de b7       	in	r29, 0x3e	; 62
	if(Timer_pfunISRFun[0] != NULL && Timer_pvidISRParameter[0] != NULL){
    1902:	80 91 b8 00 	lds	r24, 0x00B8
    1906:	90 91 b9 00 	lds	r25, 0x00B9
    190a:	00 97       	sbiw	r24, 0x00	; 0
    190c:	79 f0       	breq	.+30     	; 0x192c <__vector_11+0x54>
    190e:	80 91 c6 00 	lds	r24, 0x00C6
    1912:	90 91 c7 00 	lds	r25, 0x00C7
    1916:	00 97       	sbiw	r24, 0x00	; 0
    1918:	49 f0       	breq	.+18     	; 0x192c <__vector_11+0x54>
		Timer_pfunISRFun[0](Timer_pvidISRParameter[0]);
    191a:	e0 91 b8 00 	lds	r30, 0x00B8
    191e:	f0 91 b9 00 	lds	r31, 0x00B9
    1922:	80 91 c6 00 	lds	r24, 0x00C6
    1926:	90 91 c7 00 	lds	r25, 0x00C7
    192a:	09 95       	icall
	}
}
    192c:	cf 91       	pop	r28
    192e:	df 91       	pop	r29
    1930:	ff 91       	pop	r31
    1932:	ef 91       	pop	r30
    1934:	bf 91       	pop	r27
    1936:	af 91       	pop	r26
    1938:	9f 91       	pop	r25
    193a:	8f 91       	pop	r24
    193c:	7f 91       	pop	r23
    193e:	6f 91       	pop	r22
    1940:	5f 91       	pop	r21
    1942:	4f 91       	pop	r20
    1944:	3f 91       	pop	r19
    1946:	2f 91       	pop	r18
    1948:	0f 90       	pop	r0
    194a:	0f be       	out	0x3f, r0	; 63
    194c:	0f 90       	pop	r0
    194e:	1f 90       	pop	r1
    1950:	18 95       	reti

00001952 <__vector_10>:

ISR(VECT_TIMER0_CTC){
    1952:	1f 92       	push	r1
    1954:	0f 92       	push	r0
    1956:	0f b6       	in	r0, 0x3f	; 63
    1958:	0f 92       	push	r0
    195a:	11 24       	eor	r1, r1
    195c:	2f 93       	push	r18
    195e:	3f 93       	push	r19
    1960:	4f 93       	push	r20
    1962:	5f 93       	push	r21
    1964:	6f 93       	push	r22
    1966:	7f 93       	push	r23
    1968:	8f 93       	push	r24
    196a:	9f 93       	push	r25
    196c:	af 93       	push	r26
    196e:	bf 93       	push	r27
    1970:	ef 93       	push	r30
    1972:	ff 93       	push	r31
    1974:	df 93       	push	r29
    1976:	cf 93       	push	r28
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
	if(Timer_pfunISRFun[1] != NULL && Timer_pvidISRParameter[1] != NULL){
    197c:	80 91 ba 00 	lds	r24, 0x00BA
    1980:	90 91 bb 00 	lds	r25, 0x00BB
    1984:	00 97       	sbiw	r24, 0x00	; 0
    1986:	79 f0       	breq	.+30     	; 0x19a6 <__vector_10+0x54>
    1988:	80 91 c8 00 	lds	r24, 0x00C8
    198c:	90 91 c9 00 	lds	r25, 0x00C9
    1990:	00 97       	sbiw	r24, 0x00	; 0
    1992:	49 f0       	breq	.+18     	; 0x19a6 <__vector_10+0x54>
		Timer_pfunISRFun[1](Timer_pvidISRParameter[1]);
    1994:	e0 91 ba 00 	lds	r30, 0x00BA
    1998:	f0 91 bb 00 	lds	r31, 0x00BB
    199c:	80 91 c8 00 	lds	r24, 0x00C8
    19a0:	90 91 c9 00 	lds	r25, 0x00C9
    19a4:	09 95       	icall
	}
}
    19a6:	cf 91       	pop	r28
    19a8:	df 91       	pop	r29
    19aa:	ff 91       	pop	r31
    19ac:	ef 91       	pop	r30
    19ae:	bf 91       	pop	r27
    19b0:	af 91       	pop	r26
    19b2:	9f 91       	pop	r25
    19b4:	8f 91       	pop	r24
    19b6:	7f 91       	pop	r23
    19b8:	6f 91       	pop	r22
    19ba:	5f 91       	pop	r21
    19bc:	4f 91       	pop	r20
    19be:	3f 91       	pop	r19
    19c0:	2f 91       	pop	r18
    19c2:	0f 90       	pop	r0
    19c4:	0f be       	out	0x3f, r0	; 63
    19c6:	0f 90       	pop	r0
    19c8:	1f 90       	pop	r1
    19ca:	18 95       	reti

000019cc <__vector_9>:

ISR(VECT_TIMER1_OVF){
    19cc:	1f 92       	push	r1
    19ce:	0f 92       	push	r0
    19d0:	0f b6       	in	r0, 0x3f	; 63
    19d2:	0f 92       	push	r0
    19d4:	11 24       	eor	r1, r1
    19d6:	2f 93       	push	r18
    19d8:	3f 93       	push	r19
    19da:	4f 93       	push	r20
    19dc:	5f 93       	push	r21
    19de:	6f 93       	push	r22
    19e0:	7f 93       	push	r23
    19e2:	8f 93       	push	r24
    19e4:	9f 93       	push	r25
    19e6:	af 93       	push	r26
    19e8:	bf 93       	push	r27
    19ea:	ef 93       	push	r30
    19ec:	ff 93       	push	r31
    19ee:	df 93       	push	r29
    19f0:	cf 93       	push	r28
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
	if(Timer_pfunISRFun[2] != NULL && Timer_pvidISRParameter[2] != NULL){
    19f6:	80 91 bc 00 	lds	r24, 0x00BC
    19fa:	90 91 bd 00 	lds	r25, 0x00BD
    19fe:	00 97       	sbiw	r24, 0x00	; 0
    1a00:	79 f0       	breq	.+30     	; 0x1a20 <__vector_9+0x54>
    1a02:	80 91 ca 00 	lds	r24, 0x00CA
    1a06:	90 91 cb 00 	lds	r25, 0x00CB
    1a0a:	00 97       	sbiw	r24, 0x00	; 0
    1a0c:	49 f0       	breq	.+18     	; 0x1a20 <__vector_9+0x54>
		Timer_pfunISRFun[2](Timer_pvidISRParameter[2]);
    1a0e:	e0 91 bc 00 	lds	r30, 0x00BC
    1a12:	f0 91 bd 00 	lds	r31, 0x00BD
    1a16:	80 91 ca 00 	lds	r24, 0x00CA
    1a1a:	90 91 cb 00 	lds	r25, 0x00CB
    1a1e:	09 95       	icall
	}
}
    1a20:	cf 91       	pop	r28
    1a22:	df 91       	pop	r29
    1a24:	ff 91       	pop	r31
    1a26:	ef 91       	pop	r30
    1a28:	bf 91       	pop	r27
    1a2a:	af 91       	pop	r26
    1a2c:	9f 91       	pop	r25
    1a2e:	8f 91       	pop	r24
    1a30:	7f 91       	pop	r23
    1a32:	6f 91       	pop	r22
    1a34:	5f 91       	pop	r21
    1a36:	4f 91       	pop	r20
    1a38:	3f 91       	pop	r19
    1a3a:	2f 91       	pop	r18
    1a3c:	0f 90       	pop	r0
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	0f 90       	pop	r0
    1a42:	1f 90       	pop	r1
    1a44:	18 95       	reti

00001a46 <__vector_8>:

ISR(VECT_TIMER1B_CTC){
    1a46:	1f 92       	push	r1
    1a48:	0f 92       	push	r0
    1a4a:	0f b6       	in	r0, 0x3f	; 63
    1a4c:	0f 92       	push	r0
    1a4e:	11 24       	eor	r1, r1
    1a50:	2f 93       	push	r18
    1a52:	3f 93       	push	r19
    1a54:	4f 93       	push	r20
    1a56:	5f 93       	push	r21
    1a58:	6f 93       	push	r22
    1a5a:	7f 93       	push	r23
    1a5c:	8f 93       	push	r24
    1a5e:	9f 93       	push	r25
    1a60:	af 93       	push	r26
    1a62:	bf 93       	push	r27
    1a64:	ef 93       	push	r30
    1a66:	ff 93       	push	r31
    1a68:	df 93       	push	r29
    1a6a:	cf 93       	push	r28
    1a6c:	cd b7       	in	r28, 0x3d	; 61
    1a6e:	de b7       	in	r29, 0x3e	; 62
	if(Timer_pfunISRFun[3] != NULL && Timer_pvidISRParameter[3] != NULL){
    1a70:	80 91 be 00 	lds	r24, 0x00BE
    1a74:	90 91 bf 00 	lds	r25, 0x00BF
    1a78:	00 97       	sbiw	r24, 0x00	; 0
    1a7a:	79 f0       	breq	.+30     	; 0x1a9a <__vector_8+0x54>
    1a7c:	80 91 cc 00 	lds	r24, 0x00CC
    1a80:	90 91 cd 00 	lds	r25, 0x00CD
    1a84:	00 97       	sbiw	r24, 0x00	; 0
    1a86:	49 f0       	breq	.+18     	; 0x1a9a <__vector_8+0x54>
		Timer_pfunISRFun[3](Timer_pvidISRParameter[3]);
    1a88:	e0 91 be 00 	lds	r30, 0x00BE
    1a8c:	f0 91 bf 00 	lds	r31, 0x00BF
    1a90:	80 91 cc 00 	lds	r24, 0x00CC
    1a94:	90 91 cd 00 	lds	r25, 0x00CD
    1a98:	09 95       	icall
	}
}
    1a9a:	cf 91       	pop	r28
    1a9c:	df 91       	pop	r29
    1a9e:	ff 91       	pop	r31
    1aa0:	ef 91       	pop	r30
    1aa2:	bf 91       	pop	r27
    1aa4:	af 91       	pop	r26
    1aa6:	9f 91       	pop	r25
    1aa8:	8f 91       	pop	r24
    1aaa:	7f 91       	pop	r23
    1aac:	6f 91       	pop	r22
    1aae:	5f 91       	pop	r21
    1ab0:	4f 91       	pop	r20
    1ab2:	3f 91       	pop	r19
    1ab4:	2f 91       	pop	r18
    1ab6:	0f 90       	pop	r0
    1ab8:	0f be       	out	0x3f, r0	; 63
    1aba:	0f 90       	pop	r0
    1abc:	1f 90       	pop	r1
    1abe:	18 95       	reti

00001ac0 <__vector_7>:

ISR(VECT_TIMER1A_CTC){
    1ac0:	1f 92       	push	r1
    1ac2:	0f 92       	push	r0
    1ac4:	0f b6       	in	r0, 0x3f	; 63
    1ac6:	0f 92       	push	r0
    1ac8:	11 24       	eor	r1, r1
    1aca:	2f 93       	push	r18
    1acc:	3f 93       	push	r19
    1ace:	4f 93       	push	r20
    1ad0:	5f 93       	push	r21
    1ad2:	6f 93       	push	r22
    1ad4:	7f 93       	push	r23
    1ad6:	8f 93       	push	r24
    1ad8:	9f 93       	push	r25
    1ada:	af 93       	push	r26
    1adc:	bf 93       	push	r27
    1ade:	ef 93       	push	r30
    1ae0:	ff 93       	push	r31
    1ae2:	df 93       	push	r29
    1ae4:	cf 93       	push	r28
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
	if(Timer_pfunISRFun[4] != NULL && Timer_pvidISRParameter[4] != NULL){
    1aea:	80 91 c0 00 	lds	r24, 0x00C0
    1aee:	90 91 c1 00 	lds	r25, 0x00C1
    1af2:	00 97       	sbiw	r24, 0x00	; 0
    1af4:	79 f0       	breq	.+30     	; 0x1b14 <__vector_7+0x54>
    1af6:	80 91 ce 00 	lds	r24, 0x00CE
    1afa:	90 91 cf 00 	lds	r25, 0x00CF
    1afe:	00 97       	sbiw	r24, 0x00	; 0
    1b00:	49 f0       	breq	.+18     	; 0x1b14 <__vector_7+0x54>
		Timer_pfunISRFun[4](Timer_pvidISRParameter[4]);
    1b02:	e0 91 c0 00 	lds	r30, 0x00C0
    1b06:	f0 91 c1 00 	lds	r31, 0x00C1
    1b0a:	80 91 ce 00 	lds	r24, 0x00CE
    1b0e:	90 91 cf 00 	lds	r25, 0x00CF
    1b12:	09 95       	icall
	}
}
    1b14:	cf 91       	pop	r28
    1b16:	df 91       	pop	r29
    1b18:	ff 91       	pop	r31
    1b1a:	ef 91       	pop	r30
    1b1c:	bf 91       	pop	r27
    1b1e:	af 91       	pop	r26
    1b20:	9f 91       	pop	r25
    1b22:	8f 91       	pop	r24
    1b24:	7f 91       	pop	r23
    1b26:	6f 91       	pop	r22
    1b28:	5f 91       	pop	r21
    1b2a:	4f 91       	pop	r20
    1b2c:	3f 91       	pop	r19
    1b2e:	2f 91       	pop	r18
    1b30:	0f 90       	pop	r0
    1b32:	0f be       	out	0x3f, r0	; 63
    1b34:	0f 90       	pop	r0
    1b36:	1f 90       	pop	r1
    1b38:	18 95       	reti

00001b3a <__vector_5>:

ISR(VECT_TIMER2_OVF){
    1b3a:	1f 92       	push	r1
    1b3c:	0f 92       	push	r0
    1b3e:	0f b6       	in	r0, 0x3f	; 63
    1b40:	0f 92       	push	r0
    1b42:	11 24       	eor	r1, r1
    1b44:	2f 93       	push	r18
    1b46:	3f 93       	push	r19
    1b48:	4f 93       	push	r20
    1b4a:	5f 93       	push	r21
    1b4c:	6f 93       	push	r22
    1b4e:	7f 93       	push	r23
    1b50:	8f 93       	push	r24
    1b52:	9f 93       	push	r25
    1b54:	af 93       	push	r26
    1b56:	bf 93       	push	r27
    1b58:	ef 93       	push	r30
    1b5a:	ff 93       	push	r31
    1b5c:	df 93       	push	r29
    1b5e:	cf 93       	push	r28
    1b60:	cd b7       	in	r28, 0x3d	; 61
    1b62:	de b7       	in	r29, 0x3e	; 62
	if(Timer_pfunISRFun[5] != NULL && Timer_pvidISRParameter[5] != NULL){
    1b64:	80 91 c2 00 	lds	r24, 0x00C2
    1b68:	90 91 c3 00 	lds	r25, 0x00C3
    1b6c:	00 97       	sbiw	r24, 0x00	; 0
    1b6e:	79 f0       	breq	.+30     	; 0x1b8e <__vector_5+0x54>
    1b70:	80 91 d0 00 	lds	r24, 0x00D0
    1b74:	90 91 d1 00 	lds	r25, 0x00D1
    1b78:	00 97       	sbiw	r24, 0x00	; 0
    1b7a:	49 f0       	breq	.+18     	; 0x1b8e <__vector_5+0x54>
		Timer_pfunISRFun[5](Timer_pvidISRParameter[5]);
    1b7c:	e0 91 c2 00 	lds	r30, 0x00C2
    1b80:	f0 91 c3 00 	lds	r31, 0x00C3
    1b84:	80 91 d0 00 	lds	r24, 0x00D0
    1b88:	90 91 d1 00 	lds	r25, 0x00D1
    1b8c:	09 95       	icall
	}
}
    1b8e:	cf 91       	pop	r28
    1b90:	df 91       	pop	r29
    1b92:	ff 91       	pop	r31
    1b94:	ef 91       	pop	r30
    1b96:	bf 91       	pop	r27
    1b98:	af 91       	pop	r26
    1b9a:	9f 91       	pop	r25
    1b9c:	8f 91       	pop	r24
    1b9e:	7f 91       	pop	r23
    1ba0:	6f 91       	pop	r22
    1ba2:	5f 91       	pop	r21
    1ba4:	4f 91       	pop	r20
    1ba6:	3f 91       	pop	r19
    1ba8:	2f 91       	pop	r18
    1baa:	0f 90       	pop	r0
    1bac:	0f be       	out	0x3f, r0	; 63
    1bae:	0f 90       	pop	r0
    1bb0:	1f 90       	pop	r1
    1bb2:	18 95       	reti

00001bb4 <__vector_4>:

ISR(VECT_TIMER2_CTC){
    1bb4:	1f 92       	push	r1
    1bb6:	0f 92       	push	r0
    1bb8:	0f b6       	in	r0, 0x3f	; 63
    1bba:	0f 92       	push	r0
    1bbc:	11 24       	eor	r1, r1
    1bbe:	2f 93       	push	r18
    1bc0:	3f 93       	push	r19
    1bc2:	4f 93       	push	r20
    1bc4:	5f 93       	push	r21
    1bc6:	6f 93       	push	r22
    1bc8:	7f 93       	push	r23
    1bca:	8f 93       	push	r24
    1bcc:	9f 93       	push	r25
    1bce:	af 93       	push	r26
    1bd0:	bf 93       	push	r27
    1bd2:	ef 93       	push	r30
    1bd4:	ff 93       	push	r31
    1bd6:	df 93       	push	r29
    1bd8:	cf 93       	push	r28
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62
	if(Timer_pfunISRFun[6] != NULL && Timer_pvidISRParameter[6] != NULL){
    1bde:	80 91 c4 00 	lds	r24, 0x00C4
    1be2:	90 91 c5 00 	lds	r25, 0x00C5
    1be6:	00 97       	sbiw	r24, 0x00	; 0
    1be8:	79 f0       	breq	.+30     	; 0x1c08 <__vector_4+0x54>
    1bea:	80 91 d2 00 	lds	r24, 0x00D2
    1bee:	90 91 d3 00 	lds	r25, 0x00D3
    1bf2:	00 97       	sbiw	r24, 0x00	; 0
    1bf4:	49 f0       	breq	.+18     	; 0x1c08 <__vector_4+0x54>
		Timer_pfunISRFun[6](Timer_pvidISRParameter[6]);
    1bf6:	e0 91 c4 00 	lds	r30, 0x00C4
    1bfa:	f0 91 c5 00 	lds	r31, 0x00C5
    1bfe:	80 91 d2 00 	lds	r24, 0x00D2
    1c02:	90 91 d3 00 	lds	r25, 0x00D3
    1c06:	09 95       	icall
	}
}
    1c08:	cf 91       	pop	r28
    1c0a:	df 91       	pop	r29
    1c0c:	ff 91       	pop	r31
    1c0e:	ef 91       	pop	r30
    1c10:	bf 91       	pop	r27
    1c12:	af 91       	pop	r26
    1c14:	9f 91       	pop	r25
    1c16:	8f 91       	pop	r24
    1c18:	7f 91       	pop	r23
    1c1a:	6f 91       	pop	r22
    1c1c:	5f 91       	pop	r21
    1c1e:	4f 91       	pop	r20
    1c20:	3f 91       	pop	r19
    1c22:	2f 91       	pop	r18
    1c24:	0f 90       	pop	r0
    1c26:	0f be       	out	0x3f, r0	; 63
    1c28:	0f 90       	pop	r0
    1c2a:	1f 90       	pop	r1
    1c2c:	18 95       	reti

00001c2e <PWM_enuInit>:
#include "PWM_priv.h"
#include "../interrupt.h"

extern u8 PWM_u8PWMWaveNum;

ES_t PWM_enuInit(PWM_t * Copy_pAstrPWMWaveConfig){
    1c2e:	df 93       	push	r29
    1c30:	cf 93       	push	r28
    1c32:	00 d0       	rcall	.+0      	; 0x1c34 <PWM_enuInit+0x6>
    1c34:	00 d0       	rcall	.+0      	; 0x1c36 <PWM_enuInit+0x8>
    1c36:	cd b7       	in	r28, 0x3d	; 61
    1c38:	de b7       	in	r29, 0x3e	; 62
    1c3a:	9c 83       	std	Y+4, r25	; 0x04
    1c3c:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_OK;
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	8a 83       	std	Y+2, r24	; 0x02
	if(Copy_pAstrPWMWaveConfig != NULL){
    1c42:	8b 81       	ldd	r24, Y+3	; 0x03
    1c44:	9c 81       	ldd	r25, Y+4	; 0x04
    1c46:	00 97       	sbiw	r24, 0x00	; 0
    1c48:	09 f4       	brne	.+2      	; 0x1c4c <PWM_enuInit+0x1e>
    1c4a:	b6 c2       	rjmp	.+1388   	; 0x21b8 <PWM_enuInit+0x58a>
		for(u8 Local_u8Iter = 0; Local_u8Iter < PWM_u8PWMWaveNum; Local_u8Iter++){
    1c4c:	19 82       	std	Y+1, r1	; 0x01
    1c4e:	ad c2       	rjmp	.+1370   	; 0x21aa <PWM_enuInit+0x57c>
			if(Copy_pAstrPWMWaveConfig[Local_u8Iter].Timer_Num == TIMER0_ID){
    1c50:	89 81       	ldd	r24, Y+1	; 0x01
    1c52:	28 2f       	mov	r18, r24
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	c9 01       	movw	r24, r18
    1c58:	88 0f       	add	r24, r24
    1c5a:	99 1f       	adc	r25, r25
    1c5c:	88 0f       	add	r24, r24
    1c5e:	99 1f       	adc	r25, r25
    1c60:	28 0f       	add	r18, r24
    1c62:	39 1f       	adc	r19, r25
    1c64:	8b 81       	ldd	r24, Y+3	; 0x03
    1c66:	9c 81       	ldd	r25, Y+4	; 0x04
    1c68:	fc 01       	movw	r30, r24
    1c6a:	e2 0f       	add	r30, r18
    1c6c:	f3 1f       	adc	r31, r19
    1c6e:	80 81       	ld	r24, Z
    1c70:	8b 34       	cpi	r24, 0x4B	; 75
    1c72:	09 f0       	breq	.+2      	; 0x1c76 <PWM_enuInit+0x48>
    1c74:	9f c0       	rjmp	.+318    	; 0x1db4 <PWM_enuInit+0x186>
				if(Copy_pAstrPWMWaveConfig[Local_u8Iter].PWM_Mode == FAST_PWM){
    1c76:	89 81       	ldd	r24, Y+1	; 0x01
    1c78:	28 2f       	mov	r18, r24
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	c9 01       	movw	r24, r18
    1c7e:	88 0f       	add	r24, r24
    1c80:	99 1f       	adc	r25, r25
    1c82:	88 0f       	add	r24, r24
    1c84:	99 1f       	adc	r25, r25
    1c86:	28 0f       	add	r18, r24
    1c88:	39 1f       	adc	r19, r25
    1c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8e:	fc 01       	movw	r30, r24
    1c90:	e2 0f       	add	r30, r18
    1c92:	f3 1f       	adc	r31, r19
    1c94:	81 81       	ldd	r24, Z+1	; 0x01
    1c96:	83 30       	cpi	r24, 0x03	; 3
    1c98:	41 f4       	brne	.+16     	; 0x1caa <PWM_enuInit+0x7c>
					TCCR0 |= (0x48);
    1c9a:	a3 e5       	ldi	r26, 0x53	; 83
    1c9c:	b0 e0       	ldi	r27, 0x00	; 0
    1c9e:	e3 e5       	ldi	r30, 0x53	; 83
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	80 81       	ld	r24, Z
    1ca4:	88 64       	ori	r24, 0x48	; 72
    1ca6:	8c 93       	st	X, r24
    1ca8:	23 c0       	rjmp	.+70     	; 0x1cf0 <PWM_enuInit+0xc2>
				}
				else if(Copy_pAstrPWMWaveConfig[Local_u8Iter].PWM_Mode == PHC_PWM){
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
    1cac:	28 2f       	mov	r18, r24
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	c9 01       	movw	r24, r18
    1cb2:	88 0f       	add	r24, r24
    1cb4:	99 1f       	adc	r25, r25
    1cb6:	88 0f       	add	r24, r24
    1cb8:	99 1f       	adc	r25, r25
    1cba:	28 0f       	add	r18, r24
    1cbc:	39 1f       	adc	r19, r25
    1cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc2:	fc 01       	movw	r30, r24
    1cc4:	e2 0f       	add	r30, r18
    1cc6:	f3 1f       	adc	r31, r19
    1cc8:	81 81       	ldd	r24, Z+1	; 0x01
    1cca:	81 30       	cpi	r24, 0x01	; 1
    1ccc:	79 f4       	brne	.+30     	; 0x1cec <PWM_enuInit+0xbe>
					TCCR0 |=  (0x40);
    1cce:	a3 e5       	ldi	r26, 0x53	; 83
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	e3 e5       	ldi	r30, 0x53	; 83
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	80 64       	ori	r24, 0x40	; 64
    1cda:	8c 93       	st	X, r24
					TCCR0 &= ~(0x08);
    1cdc:	a3 e5       	ldi	r26, 0x53	; 83
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	e3 e5       	ldi	r30, 0x53	; 83
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	87 7f       	andi	r24, 0xF7	; 247
    1ce8:	8c 93       	st	X, r24
    1cea:	02 c0       	rjmp	.+4      	; 0x1cf0 <PWM_enuInit+0xc2>
				}
				else
					Local_enuErrorState = ES_OUT_OF_RANGE;
    1cec:	82 e0       	ldi	r24, 0x02	; 2
    1cee:	8a 83       	std	Y+2, r24	; 0x02
				if(Copy_pAstrPWMWaveConfig[Local_u8Iter].Prescaler <= 5){
    1cf0:	89 81       	ldd	r24, Y+1	; 0x01
    1cf2:	28 2f       	mov	r18, r24
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	c9 01       	movw	r24, r18
    1cf8:	88 0f       	add	r24, r24
    1cfa:	99 1f       	adc	r25, r25
    1cfc:	88 0f       	add	r24, r24
    1cfe:	99 1f       	adc	r25, r25
    1d00:	28 0f       	add	r18, r24
    1d02:	39 1f       	adc	r19, r25
    1d04:	8b 81       	ldd	r24, Y+3	; 0x03
    1d06:	9c 81       	ldd	r25, Y+4	; 0x04
    1d08:	fc 01       	movw	r30, r24
    1d0a:	e2 0f       	add	r30, r18
    1d0c:	f3 1f       	adc	r31, r19
    1d0e:	84 81       	ldd	r24, Z+4	; 0x04
    1d10:	86 30       	cpi	r24, 0x06	; 6
    1d12:	c0 f4       	brcc	.+48     	; 0x1d44 <PWM_enuInit+0x116>
					TCCR0 |= Copy_pAstrPWMWaveConfig[Local_u8Iter].Prescaler;
    1d14:	a3 e5       	ldi	r26, 0x53	; 83
    1d16:	b0 e0       	ldi	r27, 0x00	; 0
    1d18:	e3 e5       	ldi	r30, 0x53	; 83
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	40 81       	ld	r20, Z
    1d1e:	89 81       	ldd	r24, Y+1	; 0x01
    1d20:	28 2f       	mov	r18, r24
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	c9 01       	movw	r24, r18
    1d26:	88 0f       	add	r24, r24
    1d28:	99 1f       	adc	r25, r25
    1d2a:	88 0f       	add	r24, r24
    1d2c:	99 1f       	adc	r25, r25
    1d2e:	28 0f       	add	r18, r24
    1d30:	39 1f       	adc	r19, r25
    1d32:	8b 81       	ldd	r24, Y+3	; 0x03
    1d34:	9c 81       	ldd	r25, Y+4	; 0x04
    1d36:	fc 01       	movw	r30, r24
    1d38:	e2 0f       	add	r30, r18
    1d3a:	f3 1f       	adc	r31, r19
    1d3c:	84 81       	ldd	r24, Z+4	; 0x04
    1d3e:	84 2b       	or	r24, r20
    1d40:	8c 93       	st	X, r24
    1d42:	02 c0       	rjmp	.+4      	; 0x1d48 <PWM_enuInit+0x11a>
				}
				else
					Local_enuErrorState = ES_OUT_OF_RANGE;
    1d44:	82 e0       	ldi	r24, 0x02	; 2
    1d46:	8a 83       	std	Y+2, r24	; 0x02
				if(Copy_pAstrPWMWaveConfig[Local_u8Iter].ComA_Mode <= 3){
    1d48:	89 81       	ldd	r24, Y+1	; 0x01
    1d4a:	28 2f       	mov	r18, r24
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	c9 01       	movw	r24, r18
    1d50:	88 0f       	add	r24, r24
    1d52:	99 1f       	adc	r25, r25
    1d54:	88 0f       	add	r24, r24
    1d56:	99 1f       	adc	r25, r25
    1d58:	28 0f       	add	r18, r24
    1d5a:	39 1f       	adc	r19, r25
    1d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d60:	fc 01       	movw	r30, r24
    1d62:	e2 0f       	add	r30, r18
    1d64:	f3 1f       	adc	r31, r19
    1d66:	82 81       	ldd	r24, Z+2	; 0x02
    1d68:	84 30       	cpi	r24, 0x04	; 4
    1d6a:	08 f5       	brcc	.+66     	; 0x1dae <PWM_enuInit+0x180>
					TCCR0 |= (Copy_pAstrPWMWaveConfig[Local_u8Iter].ComA_Mode<<4);
    1d6c:	a3 e5       	ldi	r26, 0x53	; 83
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	e3 e5       	ldi	r30, 0x53	; 83
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	48 2f       	mov	r20, r24
    1d78:	89 81       	ldd	r24, Y+1	; 0x01
    1d7a:	28 2f       	mov	r18, r24
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	c9 01       	movw	r24, r18
    1d80:	88 0f       	add	r24, r24
    1d82:	99 1f       	adc	r25, r25
    1d84:	88 0f       	add	r24, r24
    1d86:	99 1f       	adc	r25, r25
    1d88:	28 0f       	add	r18, r24
    1d8a:	39 1f       	adc	r19, r25
    1d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d90:	fc 01       	movw	r30, r24
    1d92:	e2 0f       	add	r30, r18
    1d94:	f3 1f       	adc	r31, r19
    1d96:	82 81       	ldd	r24, Z+2	; 0x02
    1d98:	88 2f       	mov	r24, r24
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	82 95       	swap	r24
    1d9e:	92 95       	swap	r25
    1da0:	90 7f       	andi	r25, 0xF0	; 240
    1da2:	98 27       	eor	r25, r24
    1da4:	80 7f       	andi	r24, 0xF0	; 240
    1da6:	98 27       	eor	r25, r24
    1da8:	84 2b       	or	r24, r20
    1daa:	8c 93       	st	X, r24
    1dac:	fb c1       	rjmp	.+1014   	; 0x21a4 <PWM_enuInit+0x576>
				}
				else
					Local_enuErrorState = ES_OUT_OF_RANGE;
    1dae:	82 e0       	ldi	r24, 0x02	; 2
    1db0:	8a 83       	std	Y+2, r24	; 0x02
    1db2:	f8 c1       	rjmp	.+1008   	; 0x21a4 <PWM_enuInit+0x576>
			}//end TIMER0_ID
			else if(Copy_pAstrPWMWaveConfig[Local_u8Iter].Timer_Num == TIMER1_ID){
    1db4:	89 81       	ldd	r24, Y+1	; 0x01
    1db6:	28 2f       	mov	r18, r24
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	c9 01       	movw	r24, r18
    1dbc:	88 0f       	add	r24, r24
    1dbe:	99 1f       	adc	r25, r25
    1dc0:	88 0f       	add	r24, r24
    1dc2:	99 1f       	adc	r25, r25
    1dc4:	28 0f       	add	r18, r24
    1dc6:	39 1f       	adc	r19, r25
    1dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dca:	9c 81       	ldd	r25, Y+4	; 0x04
    1dcc:	fc 01       	movw	r30, r24
    1dce:	e2 0f       	add	r30, r18
    1dd0:	f3 1f       	adc	r31, r19
    1dd2:	80 81       	ld	r24, Z
    1dd4:	82 32       	cpi	r24, 0x22	; 34
    1dd6:	09 f0       	breq	.+2      	; 0x1dda <PWM_enuInit+0x1ac>
    1dd8:	31 c1       	rjmp	.+610    	; 0x203c <PWM_enuInit+0x40e>
				if(Copy_pAstrPWMWaveConfig[Local_u8Iter].PWM_Mode <= 15 &&
    1dda:	89 81       	ldd	r24, Y+1	; 0x01
    1ddc:	28 2f       	mov	r18, r24
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	c9 01       	movw	r24, r18
    1de2:	88 0f       	add	r24, r24
    1de4:	99 1f       	adc	r25, r25
    1de6:	88 0f       	add	r24, r24
    1de8:	99 1f       	adc	r25, r25
    1dea:	28 0f       	add	r18, r24
    1dec:	39 1f       	adc	r19, r25
    1dee:	8b 81       	ldd	r24, Y+3	; 0x03
    1df0:	9c 81       	ldd	r25, Y+4	; 0x04
    1df2:	fc 01       	movw	r30, r24
    1df4:	e2 0f       	add	r30, r18
    1df6:	f3 1f       	adc	r31, r19
    1df8:	81 81       	ldd	r24, Z+1	; 0x01
    1dfa:	80 31       	cpi	r24, 0x10	; 16
    1dfc:	08 f0       	brcs	.+2      	; 0x1e00 <PWM_enuInit+0x1d2>
    1dfe:	82 c0       	rjmp	.+260    	; 0x1f04 <PWM_enuInit+0x2d6>
    1e00:	89 81       	ldd	r24, Y+1	; 0x01
    1e02:	28 2f       	mov	r18, r24
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	c9 01       	movw	r24, r18
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	88 0f       	add	r24, r24
    1e0e:	99 1f       	adc	r25, r25
    1e10:	28 0f       	add	r18, r24
    1e12:	39 1f       	adc	r19, r25
    1e14:	8b 81       	ldd	r24, Y+3	; 0x03
    1e16:	9c 81       	ldd	r25, Y+4	; 0x04
    1e18:	fc 01       	movw	r30, r24
    1e1a:	e2 0f       	add	r30, r18
    1e1c:	f3 1f       	adc	r31, r19
    1e1e:	81 81       	ldd	r24, Z+1	; 0x01
    1e20:	88 23       	and	r24, r24
    1e22:	09 f4       	brne	.+2      	; 0x1e26 <PWM_enuInit+0x1f8>
    1e24:	6f c0       	rjmp	.+222    	; 0x1f04 <PWM_enuInit+0x2d6>
    1e26:	89 81       	ldd	r24, Y+1	; 0x01
    1e28:	28 2f       	mov	r18, r24
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	c9 01       	movw	r24, r18
    1e2e:	88 0f       	add	r24, r24
    1e30:	99 1f       	adc	r25, r25
    1e32:	88 0f       	add	r24, r24
    1e34:	99 1f       	adc	r25, r25
    1e36:	28 0f       	add	r18, r24
    1e38:	39 1f       	adc	r19, r25
    1e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e3e:	fc 01       	movw	r30, r24
    1e40:	e2 0f       	add	r30, r18
    1e42:	f3 1f       	adc	r31, r19
    1e44:	81 81       	ldd	r24, Z+1	; 0x01
    1e46:	84 30       	cpi	r24, 0x04	; 4
    1e48:	09 f4       	brne	.+2      	; 0x1e4c <PWM_enuInit+0x21e>
    1e4a:	5c c0       	rjmp	.+184    	; 0x1f04 <PWM_enuInit+0x2d6>
    1e4c:	89 81       	ldd	r24, Y+1	; 0x01
    1e4e:	28 2f       	mov	r18, r24
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	c9 01       	movw	r24, r18
    1e54:	88 0f       	add	r24, r24
    1e56:	99 1f       	adc	r25, r25
    1e58:	88 0f       	add	r24, r24
    1e5a:	99 1f       	adc	r25, r25
    1e5c:	28 0f       	add	r18, r24
    1e5e:	39 1f       	adc	r19, r25
    1e60:	8b 81       	ldd	r24, Y+3	; 0x03
    1e62:	9c 81       	ldd	r25, Y+4	; 0x04
    1e64:	fc 01       	movw	r30, r24
    1e66:	e2 0f       	add	r30, r18
    1e68:	f3 1f       	adc	r31, r19
    1e6a:	81 81       	ldd	r24, Z+1	; 0x01
    1e6c:	8c 30       	cpi	r24, 0x0C	; 12
    1e6e:	09 f4       	brne	.+2      	; 0x1e72 <PWM_enuInit+0x244>
    1e70:	49 c0       	rjmp	.+146    	; 0x1f04 <PWM_enuInit+0x2d6>
    1e72:	89 81       	ldd	r24, Y+1	; 0x01
    1e74:	28 2f       	mov	r18, r24
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	c9 01       	movw	r24, r18
    1e7a:	88 0f       	add	r24, r24
    1e7c:	99 1f       	adc	r25, r25
    1e7e:	88 0f       	add	r24, r24
    1e80:	99 1f       	adc	r25, r25
    1e82:	28 0f       	add	r18, r24
    1e84:	39 1f       	adc	r19, r25
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8a:	fc 01       	movw	r30, r24
    1e8c:	e2 0f       	add	r30, r18
    1e8e:	f3 1f       	adc	r31, r19
    1e90:	81 81       	ldd	r24, Z+1	; 0x01
    1e92:	8d 30       	cpi	r24, 0x0D	; 13
    1e94:	b9 f1       	breq	.+110    	; 0x1f04 <PWM_enuInit+0x2d6>
						Copy_pAstrPWMWaveConfig[Local_u8Iter].PWM_Mode != 0  &&
						Copy_pAstrPWMWaveConfig[Local_u8Iter].PWM_Mode != 4  &&
						Copy_pAstrPWMWaveConfig[Local_u8Iter].PWM_Mode != 12 &&
						Copy_pAstrPWMWaveConfig[Local_u8Iter].PWM_Mode != 13 ){
					TCCR1A |= ((Copy_pAstrPWMWaveConfig[Local_u8Iter].PWM_Mode) & (0x03));
    1e96:	af e4       	ldi	r26, 0x4F	; 79
    1e98:	b0 e0       	ldi	r27, 0x00	; 0
    1e9a:	ef e4       	ldi	r30, 0x4F	; 79
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	48 2f       	mov	r20, r24
    1ea2:	89 81       	ldd	r24, Y+1	; 0x01
    1ea4:	28 2f       	mov	r18, r24
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	c9 01       	movw	r24, r18
    1eaa:	88 0f       	add	r24, r24
    1eac:	99 1f       	adc	r25, r25
    1eae:	88 0f       	add	r24, r24
    1eb0:	99 1f       	adc	r25, r25
    1eb2:	28 0f       	add	r18, r24
    1eb4:	39 1f       	adc	r19, r25
    1eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eba:	fc 01       	movw	r30, r24
    1ebc:	e2 0f       	add	r30, r18
    1ebe:	f3 1f       	adc	r31, r19
    1ec0:	81 81       	ldd	r24, Z+1	; 0x01
    1ec2:	83 70       	andi	r24, 0x03	; 3
    1ec4:	84 2b       	or	r24, r20
    1ec6:	8c 93       	st	X, r24
					TCCR1B |= ((Copy_pAstrPWMWaveConfig[Local_u8Iter].PWM_Mode<<1) & (0x18));
    1ec8:	ae e4       	ldi	r26, 0x4E	; 78
    1eca:	b0 e0       	ldi	r27, 0x00	; 0
    1ecc:	ee e4       	ldi	r30, 0x4E	; 78
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	80 81       	ld	r24, Z
    1ed2:	48 2f       	mov	r20, r24
    1ed4:	89 81       	ldd	r24, Y+1	; 0x01
    1ed6:	28 2f       	mov	r18, r24
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	c9 01       	movw	r24, r18
    1edc:	88 0f       	add	r24, r24
    1ede:	99 1f       	adc	r25, r25
    1ee0:	88 0f       	add	r24, r24
    1ee2:	99 1f       	adc	r25, r25
    1ee4:	28 0f       	add	r18, r24
    1ee6:	39 1f       	adc	r19, r25
    1ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eea:	9c 81       	ldd	r25, Y+4	; 0x04
    1eec:	fc 01       	movw	r30, r24
    1eee:	e2 0f       	add	r30, r18
    1ef0:	f3 1f       	adc	r31, r19
    1ef2:	81 81       	ldd	r24, Z+1	; 0x01
    1ef4:	88 2f       	mov	r24, r24
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	88 0f       	add	r24, r24
    1efa:	99 1f       	adc	r25, r25
    1efc:	88 71       	andi	r24, 0x18	; 24
    1efe:	84 2b       	or	r24, r20
    1f00:	8c 93       	st	X, r24
    1f02:	02 c0       	rjmp	.+4      	; 0x1f08 <PWM_enuInit+0x2da>
				}
				else
					Local_enuErrorState = ES_OUT_OF_RANGE;
    1f04:	82 e0       	ldi	r24, 0x02	; 2
    1f06:	8a 83       	std	Y+2, r24	; 0x02
				if(Copy_pAstrPWMWaveConfig[Local_u8Iter].Prescaler <= 5){
    1f08:	89 81       	ldd	r24, Y+1	; 0x01
    1f0a:	28 2f       	mov	r18, r24
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	c9 01       	movw	r24, r18
    1f10:	88 0f       	add	r24, r24
    1f12:	99 1f       	adc	r25, r25
    1f14:	88 0f       	add	r24, r24
    1f16:	99 1f       	adc	r25, r25
    1f18:	28 0f       	add	r18, r24
    1f1a:	39 1f       	adc	r19, r25
    1f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f20:	fc 01       	movw	r30, r24
    1f22:	e2 0f       	add	r30, r18
    1f24:	f3 1f       	adc	r31, r19
    1f26:	84 81       	ldd	r24, Z+4	; 0x04
    1f28:	86 30       	cpi	r24, 0x06	; 6
    1f2a:	c0 f4       	brcc	.+48     	; 0x1f5c <PWM_enuInit+0x32e>
					TCCR1B |= Copy_pAstrPWMWaveConfig[Local_u8Iter].Prescaler;
    1f2c:	ae e4       	ldi	r26, 0x4E	; 78
    1f2e:	b0 e0       	ldi	r27, 0x00	; 0
    1f30:	ee e4       	ldi	r30, 0x4E	; 78
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	40 81       	ld	r20, Z
    1f36:	89 81       	ldd	r24, Y+1	; 0x01
    1f38:	28 2f       	mov	r18, r24
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	c9 01       	movw	r24, r18
    1f3e:	88 0f       	add	r24, r24
    1f40:	99 1f       	adc	r25, r25
    1f42:	88 0f       	add	r24, r24
    1f44:	99 1f       	adc	r25, r25
    1f46:	28 0f       	add	r18, r24
    1f48:	39 1f       	adc	r19, r25
    1f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f4e:	fc 01       	movw	r30, r24
    1f50:	e2 0f       	add	r30, r18
    1f52:	f3 1f       	adc	r31, r19
    1f54:	84 81       	ldd	r24, Z+4	; 0x04
    1f56:	84 2b       	or	r24, r20
    1f58:	8c 93       	st	X, r24
    1f5a:	02 c0       	rjmp	.+4      	; 0x1f60 <PWM_enuInit+0x332>
				}
				else
					Local_enuErrorState = ES_OUT_OF_RANGE;
    1f5c:	82 e0       	ldi	r24, 0x02	; 2
    1f5e:	8a 83       	std	Y+2, r24	; 0x02
				if(Copy_pAstrPWMWaveConfig[Local_u8Iter].ComA_Mode <= 3){
    1f60:	89 81       	ldd	r24, Y+1	; 0x01
    1f62:	28 2f       	mov	r18, r24
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	c9 01       	movw	r24, r18
    1f68:	88 0f       	add	r24, r24
    1f6a:	99 1f       	adc	r25, r25
    1f6c:	88 0f       	add	r24, r24
    1f6e:	99 1f       	adc	r25, r25
    1f70:	28 0f       	add	r18, r24
    1f72:	39 1f       	adc	r19, r25
    1f74:	8b 81       	ldd	r24, Y+3	; 0x03
    1f76:	9c 81       	ldd	r25, Y+4	; 0x04
    1f78:	fc 01       	movw	r30, r24
    1f7a:	e2 0f       	add	r30, r18
    1f7c:	f3 1f       	adc	r31, r19
    1f7e:	82 81       	ldd	r24, Z+2	; 0x02
    1f80:	84 30       	cpi	r24, 0x04	; 4
    1f82:	20 f5       	brcc	.+72     	; 0x1fcc <PWM_enuInit+0x39e>
					TCCR1A |= (Copy_pAstrPWMWaveConfig[Local_u8Iter].ComA_Mode << 6);
    1f84:	af e4       	ldi	r26, 0x4F	; 79
    1f86:	b0 e0       	ldi	r27, 0x00	; 0
    1f88:	ef e4       	ldi	r30, 0x4F	; 79
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	80 81       	ld	r24, Z
    1f8e:	48 2f       	mov	r20, r24
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
    1f92:	28 2f       	mov	r18, r24
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	c9 01       	movw	r24, r18
    1f98:	88 0f       	add	r24, r24
    1f9a:	99 1f       	adc	r25, r25
    1f9c:	88 0f       	add	r24, r24
    1f9e:	99 1f       	adc	r25, r25
    1fa0:	28 0f       	add	r18, r24
    1fa2:	39 1f       	adc	r19, r25
    1fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa8:	fc 01       	movw	r30, r24
    1faa:	e2 0f       	add	r30, r18
    1fac:	f3 1f       	adc	r31, r19
    1fae:	82 81       	ldd	r24, Z+2	; 0x02
    1fb0:	88 2f       	mov	r24, r24
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	00 24       	eor	r0, r0
    1fb6:	96 95       	lsr	r25
    1fb8:	87 95       	ror	r24
    1fba:	07 94       	ror	r0
    1fbc:	96 95       	lsr	r25
    1fbe:	87 95       	ror	r24
    1fc0:	07 94       	ror	r0
    1fc2:	98 2f       	mov	r25, r24
    1fc4:	80 2d       	mov	r24, r0
    1fc6:	84 2b       	or	r24, r20
    1fc8:	8c 93       	st	X, r24
    1fca:	02 c0       	rjmp	.+4      	; 0x1fd0 <PWM_enuInit+0x3a2>
				}
				else
					Local_enuErrorState = ES_OUT_OF_RANGE;
    1fcc:	82 e0       	ldi	r24, 0x02	; 2
    1fce:	8a 83       	std	Y+2, r24	; 0x02
				if(Copy_pAstrPWMWaveConfig[Local_u8Iter].ComB_Mode <= 3){
    1fd0:	89 81       	ldd	r24, Y+1	; 0x01
    1fd2:	28 2f       	mov	r18, r24
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	c9 01       	movw	r24, r18
    1fd8:	88 0f       	add	r24, r24
    1fda:	99 1f       	adc	r25, r25
    1fdc:	88 0f       	add	r24, r24
    1fde:	99 1f       	adc	r25, r25
    1fe0:	28 0f       	add	r18, r24
    1fe2:	39 1f       	adc	r19, r25
    1fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe8:	fc 01       	movw	r30, r24
    1fea:	e2 0f       	add	r30, r18
    1fec:	f3 1f       	adc	r31, r19
    1fee:	83 81       	ldd	r24, Z+3	; 0x03
    1ff0:	84 30       	cpi	r24, 0x04	; 4
    1ff2:	08 f5       	brcc	.+66     	; 0x2036 <PWM_enuInit+0x408>
					TCCR1A |= (Copy_pAstrPWMWaveConfig[Local_u8Iter].ComB_Mode << 4);
    1ff4:	af e4       	ldi	r26, 0x4F	; 79
    1ff6:	b0 e0       	ldi	r27, 0x00	; 0
    1ff8:	ef e4       	ldi	r30, 0x4F	; 79
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	80 81       	ld	r24, Z
    1ffe:	48 2f       	mov	r20, r24
    2000:	89 81       	ldd	r24, Y+1	; 0x01
    2002:	28 2f       	mov	r18, r24
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	c9 01       	movw	r24, r18
    2008:	88 0f       	add	r24, r24
    200a:	99 1f       	adc	r25, r25
    200c:	88 0f       	add	r24, r24
    200e:	99 1f       	adc	r25, r25
    2010:	28 0f       	add	r18, r24
    2012:	39 1f       	adc	r19, r25
    2014:	8b 81       	ldd	r24, Y+3	; 0x03
    2016:	9c 81       	ldd	r25, Y+4	; 0x04
    2018:	fc 01       	movw	r30, r24
    201a:	e2 0f       	add	r30, r18
    201c:	f3 1f       	adc	r31, r19
    201e:	83 81       	ldd	r24, Z+3	; 0x03
    2020:	88 2f       	mov	r24, r24
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	82 95       	swap	r24
    2026:	92 95       	swap	r25
    2028:	90 7f       	andi	r25, 0xF0	; 240
    202a:	98 27       	eor	r25, r24
    202c:	80 7f       	andi	r24, 0xF0	; 240
    202e:	98 27       	eor	r25, r24
    2030:	84 2b       	or	r24, r20
    2032:	8c 93       	st	X, r24
    2034:	b7 c0       	rjmp	.+366    	; 0x21a4 <PWM_enuInit+0x576>
				}
				else
					Local_enuErrorState = ES_OUT_OF_RANGE;
    2036:	82 e0       	ldi	r24, 0x02	; 2
    2038:	8a 83       	std	Y+2, r24	; 0x02
    203a:	b4 c0       	rjmp	.+360    	; 0x21a4 <PWM_enuInit+0x576>
			}//end TIMER1_ID
			else if(Copy_pAstrPWMWaveConfig[Local_u8Iter].Timer_Num == TIMER2_ID){
    203c:	89 81       	ldd	r24, Y+1	; 0x01
    203e:	28 2f       	mov	r18, r24
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	c9 01       	movw	r24, r18
    2044:	88 0f       	add	r24, r24
    2046:	99 1f       	adc	r25, r25
    2048:	88 0f       	add	r24, r24
    204a:	99 1f       	adc	r25, r25
    204c:	28 0f       	add	r18, r24
    204e:	39 1f       	adc	r19, r25
    2050:	8b 81       	ldd	r24, Y+3	; 0x03
    2052:	9c 81       	ldd	r25, Y+4	; 0x04
    2054:	fc 01       	movw	r30, r24
    2056:	e2 0f       	add	r30, r18
    2058:	f3 1f       	adc	r31, r19
    205a:	80 81       	ld	r24, Z
    205c:	88 35       	cpi	r24, 0x58	; 88
    205e:	09 f0       	breq	.+2      	; 0x2062 <PWM_enuInit+0x434>
    2060:	9f c0       	rjmp	.+318    	; 0x21a0 <PWM_enuInit+0x572>
				if(Copy_pAstrPWMWaveConfig[Local_u8Iter].PWM_Mode == FAST_PWM){
    2062:	89 81       	ldd	r24, Y+1	; 0x01
    2064:	28 2f       	mov	r18, r24
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	c9 01       	movw	r24, r18
    206a:	88 0f       	add	r24, r24
    206c:	99 1f       	adc	r25, r25
    206e:	88 0f       	add	r24, r24
    2070:	99 1f       	adc	r25, r25
    2072:	28 0f       	add	r18, r24
    2074:	39 1f       	adc	r19, r25
    2076:	8b 81       	ldd	r24, Y+3	; 0x03
    2078:	9c 81       	ldd	r25, Y+4	; 0x04
    207a:	fc 01       	movw	r30, r24
    207c:	e2 0f       	add	r30, r18
    207e:	f3 1f       	adc	r31, r19
    2080:	81 81       	ldd	r24, Z+1	; 0x01
    2082:	83 30       	cpi	r24, 0x03	; 3
    2084:	41 f4       	brne	.+16     	; 0x2096 <PWM_enuInit+0x468>
					TCCR2 |= (0x48);
    2086:	a5 e4       	ldi	r26, 0x45	; 69
    2088:	b0 e0       	ldi	r27, 0x00	; 0
    208a:	e5 e4       	ldi	r30, 0x45	; 69
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	88 64       	ori	r24, 0x48	; 72
    2092:	8c 93       	st	X, r24
    2094:	23 c0       	rjmp	.+70     	; 0x20dc <PWM_enuInit+0x4ae>
				}
				else if(Copy_pAstrPWMWaveConfig[Local_u8Iter].PWM_Mode == PHC_PWM){
    2096:	89 81       	ldd	r24, Y+1	; 0x01
    2098:	28 2f       	mov	r18, r24
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	c9 01       	movw	r24, r18
    209e:	88 0f       	add	r24, r24
    20a0:	99 1f       	adc	r25, r25
    20a2:	88 0f       	add	r24, r24
    20a4:	99 1f       	adc	r25, r25
    20a6:	28 0f       	add	r18, r24
    20a8:	39 1f       	adc	r19, r25
    20aa:	8b 81       	ldd	r24, Y+3	; 0x03
    20ac:	9c 81       	ldd	r25, Y+4	; 0x04
    20ae:	fc 01       	movw	r30, r24
    20b0:	e2 0f       	add	r30, r18
    20b2:	f3 1f       	adc	r31, r19
    20b4:	81 81       	ldd	r24, Z+1	; 0x01
    20b6:	81 30       	cpi	r24, 0x01	; 1
    20b8:	79 f4       	brne	.+30     	; 0x20d8 <PWM_enuInit+0x4aa>
					TCCR2 |=  (0x40);
    20ba:	a5 e4       	ldi	r26, 0x45	; 69
    20bc:	b0 e0       	ldi	r27, 0x00	; 0
    20be:	e5 e4       	ldi	r30, 0x45	; 69
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	80 81       	ld	r24, Z
    20c4:	80 64       	ori	r24, 0x40	; 64
    20c6:	8c 93       	st	X, r24
					TCCR2 &= ~(0x08);
    20c8:	a5 e4       	ldi	r26, 0x45	; 69
    20ca:	b0 e0       	ldi	r27, 0x00	; 0
    20cc:	e5 e4       	ldi	r30, 0x45	; 69
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	80 81       	ld	r24, Z
    20d2:	87 7f       	andi	r24, 0xF7	; 247
    20d4:	8c 93       	st	X, r24
    20d6:	02 c0       	rjmp	.+4      	; 0x20dc <PWM_enuInit+0x4ae>
				}
				else
					Local_enuErrorState = ES_OUT_OF_RANGE;
    20d8:	82 e0       	ldi	r24, 0x02	; 2
    20da:	8a 83       	std	Y+2, r24	; 0x02
				if(Copy_pAstrPWMWaveConfig[Local_u8Iter].Prescaler <= 7){
    20dc:	89 81       	ldd	r24, Y+1	; 0x01
    20de:	28 2f       	mov	r18, r24
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	c9 01       	movw	r24, r18
    20e4:	88 0f       	add	r24, r24
    20e6:	99 1f       	adc	r25, r25
    20e8:	88 0f       	add	r24, r24
    20ea:	99 1f       	adc	r25, r25
    20ec:	28 0f       	add	r18, r24
    20ee:	39 1f       	adc	r19, r25
    20f0:	8b 81       	ldd	r24, Y+3	; 0x03
    20f2:	9c 81       	ldd	r25, Y+4	; 0x04
    20f4:	fc 01       	movw	r30, r24
    20f6:	e2 0f       	add	r30, r18
    20f8:	f3 1f       	adc	r31, r19
    20fa:	84 81       	ldd	r24, Z+4	; 0x04
    20fc:	88 30       	cpi	r24, 0x08	; 8
    20fe:	c0 f4       	brcc	.+48     	; 0x2130 <PWM_enuInit+0x502>
					TCCR2 |= Copy_pAstrPWMWaveConfig[Local_u8Iter].Prescaler;
    2100:	a5 e4       	ldi	r26, 0x45	; 69
    2102:	b0 e0       	ldi	r27, 0x00	; 0
    2104:	e5 e4       	ldi	r30, 0x45	; 69
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	40 81       	ld	r20, Z
    210a:	89 81       	ldd	r24, Y+1	; 0x01
    210c:	28 2f       	mov	r18, r24
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	c9 01       	movw	r24, r18
    2112:	88 0f       	add	r24, r24
    2114:	99 1f       	adc	r25, r25
    2116:	88 0f       	add	r24, r24
    2118:	99 1f       	adc	r25, r25
    211a:	28 0f       	add	r18, r24
    211c:	39 1f       	adc	r19, r25
    211e:	8b 81       	ldd	r24, Y+3	; 0x03
    2120:	9c 81       	ldd	r25, Y+4	; 0x04
    2122:	fc 01       	movw	r30, r24
    2124:	e2 0f       	add	r30, r18
    2126:	f3 1f       	adc	r31, r19
    2128:	84 81       	ldd	r24, Z+4	; 0x04
    212a:	84 2b       	or	r24, r20
    212c:	8c 93       	st	X, r24
    212e:	02 c0       	rjmp	.+4      	; 0x2134 <PWM_enuInit+0x506>
				}
				else
					Local_enuErrorState = ES_OUT_OF_RANGE;
    2130:	82 e0       	ldi	r24, 0x02	; 2
    2132:	8a 83       	std	Y+2, r24	; 0x02
				if(Copy_pAstrPWMWaveConfig[Local_u8Iter].ComA_Mode <= 3){
    2134:	89 81       	ldd	r24, Y+1	; 0x01
    2136:	28 2f       	mov	r18, r24
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	c9 01       	movw	r24, r18
    213c:	88 0f       	add	r24, r24
    213e:	99 1f       	adc	r25, r25
    2140:	88 0f       	add	r24, r24
    2142:	99 1f       	adc	r25, r25
    2144:	28 0f       	add	r18, r24
    2146:	39 1f       	adc	r19, r25
    2148:	8b 81       	ldd	r24, Y+3	; 0x03
    214a:	9c 81       	ldd	r25, Y+4	; 0x04
    214c:	fc 01       	movw	r30, r24
    214e:	e2 0f       	add	r30, r18
    2150:	f3 1f       	adc	r31, r19
    2152:	82 81       	ldd	r24, Z+2	; 0x02
    2154:	84 30       	cpi	r24, 0x04	; 4
    2156:	08 f5       	brcc	.+66     	; 0x219a <PWM_enuInit+0x56c>
					TCCR2 |= (Copy_pAstrPWMWaveConfig[Local_u8Iter].ComA_Mode<<4);
    2158:	a5 e4       	ldi	r26, 0x45	; 69
    215a:	b0 e0       	ldi	r27, 0x00	; 0
    215c:	e5 e4       	ldi	r30, 0x45	; 69
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	80 81       	ld	r24, Z
    2162:	48 2f       	mov	r20, r24
    2164:	89 81       	ldd	r24, Y+1	; 0x01
    2166:	28 2f       	mov	r18, r24
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	c9 01       	movw	r24, r18
    216c:	88 0f       	add	r24, r24
    216e:	99 1f       	adc	r25, r25
    2170:	88 0f       	add	r24, r24
    2172:	99 1f       	adc	r25, r25
    2174:	28 0f       	add	r18, r24
    2176:	39 1f       	adc	r19, r25
    2178:	8b 81       	ldd	r24, Y+3	; 0x03
    217a:	9c 81       	ldd	r25, Y+4	; 0x04
    217c:	fc 01       	movw	r30, r24
    217e:	e2 0f       	add	r30, r18
    2180:	f3 1f       	adc	r31, r19
    2182:	82 81       	ldd	r24, Z+2	; 0x02
    2184:	88 2f       	mov	r24, r24
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	82 95       	swap	r24
    218a:	92 95       	swap	r25
    218c:	90 7f       	andi	r25, 0xF0	; 240
    218e:	98 27       	eor	r25, r24
    2190:	80 7f       	andi	r24, 0xF0	; 240
    2192:	98 27       	eor	r25, r24
    2194:	84 2b       	or	r24, r20
    2196:	8c 93       	st	X, r24
    2198:	05 c0       	rjmp	.+10     	; 0x21a4 <PWM_enuInit+0x576>
				}
				else
					Local_enuErrorState = ES_OUT_OF_RANGE;
    219a:	82 e0       	ldi	r24, 0x02	; 2
    219c:	8a 83       	std	Y+2, r24	; 0x02
    219e:	02 c0       	rjmp	.+4      	; 0x21a4 <PWM_enuInit+0x576>
			}//end TIMER2_ID
			else
				Local_enuErrorState = ES_OUT_OF_RANGE;
    21a0:	82 e0       	ldi	r24, 0x02	; 2
    21a2:	8a 83       	std	Y+2, r24	; 0x02
extern u8 PWM_u8PWMWaveNum;

ES_t PWM_enuInit(PWM_t * Copy_pAstrPWMWaveConfig){
	ES_t Local_enuErrorState = ES_OK;
	if(Copy_pAstrPWMWaveConfig != NULL){
		for(u8 Local_u8Iter = 0; Local_u8Iter < PWM_u8PWMWaveNum; Local_u8Iter++){
    21a4:	89 81       	ldd	r24, Y+1	; 0x01
    21a6:	8f 5f       	subi	r24, 0xFF	; 255
    21a8:	89 83       	std	Y+1, r24	; 0x01
    21aa:	90 91 ae 00 	lds	r25, 0x00AE
    21ae:	89 81       	ldd	r24, Y+1	; 0x01
    21b0:	89 17       	cp	r24, r25
    21b2:	08 f4       	brcc	.+2      	; 0x21b6 <PWM_enuInit+0x588>
    21b4:	4d cd       	rjmp	.-1382   	; 0x1c50 <PWM_enuInit+0x22>
    21b6:	02 c0       	rjmp	.+4      	; 0x21bc <PWM_enuInit+0x58e>
			else
				Local_enuErrorState = ES_OUT_OF_RANGE;
		}//end for loop
	}
	else
		Local_enuErrorState = ES_NULL_POINTER;
    21b8:	83 e0       	ldi	r24, 0x03	; 3
    21ba:	8a 83       	std	Y+2, r24	; 0x02
	return Local_enuErrorState;
    21bc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    21be:	0f 90       	pop	r0
    21c0:	0f 90       	pop	r0
    21c2:	0f 90       	pop	r0
    21c4:	0f 90       	pop	r0
    21c6:	cf 91       	pop	r28
    21c8:	df 91       	pop	r29
    21ca:	08 95       	ret

000021cc <PWM_enuSetPrescaler>:
ES_t PWM_enuSetPrescaler(PWM_t * Copy_pstrPWMWaveConfig, u8 Copy_u8Prescaler){
    21cc:	df 93       	push	r29
    21ce:	cf 93       	push	r28
    21d0:	00 d0       	rcall	.+0      	; 0x21d2 <PWM_enuSetPrescaler+0x6>
    21d2:	00 d0       	rcall	.+0      	; 0x21d4 <PWM_enuSetPrescaler+0x8>
    21d4:	cd b7       	in	r28, 0x3d	; 61
    21d6:	de b7       	in	r29, 0x3e	; 62
    21d8:	9b 83       	std	Y+3, r25	; 0x03
    21da:	8a 83       	std	Y+2, r24	; 0x02
    21dc:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    21de:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pstrPWMWaveConfig != NULL){
    21e0:	8a 81       	ldd	r24, Y+2	; 0x02
    21e2:	9b 81       	ldd	r25, Y+3	; 0x03
    21e4:	00 97       	sbiw	r24, 0x00	; 0
    21e6:	09 f4       	brne	.+2      	; 0x21ea <PWM_enuSetPrescaler+0x1e>
    21e8:	4c c0       	rjmp	.+152    	; 0x2282 <PWM_enuSetPrescaler+0xb6>
		if(Copy_u8Prescaler <= 5){
    21ea:	8c 81       	ldd	r24, Y+4	; 0x04
    21ec:	86 30       	cpi	r24, 0x06	; 6
    21ee:	08 f0       	brcs	.+2      	; 0x21f2 <PWM_enuSetPrescaler+0x26>
    21f0:	4a c0       	rjmp	.+148    	; 0x2286 <PWM_enuSetPrescaler+0xba>
			if(Copy_pstrPWMWaveConfig->Timer_Num == TIMER0_ID){
    21f2:	ea 81       	ldd	r30, Y+2	; 0x02
    21f4:	fb 81       	ldd	r31, Y+3	; 0x03
    21f6:	80 81       	ld	r24, Z
    21f8:	8b 34       	cpi	r24, 0x4B	; 75
    21fa:	91 f4       	brne	.+36     	; 0x2220 <PWM_enuSetPrescaler+0x54>
				TCCR0 &= ~(0x07);
    21fc:	a3 e5       	ldi	r26, 0x53	; 83
    21fe:	b0 e0       	ldi	r27, 0x00	; 0
    2200:	e3 e5       	ldi	r30, 0x53	; 83
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	80 81       	ld	r24, Z
    2206:	88 7f       	andi	r24, 0xF8	; 248
    2208:	8c 93       	st	X, r24
				TCCR0 |= Copy_u8Prescaler;
    220a:	a3 e5       	ldi	r26, 0x53	; 83
    220c:	b0 e0       	ldi	r27, 0x00	; 0
    220e:	e3 e5       	ldi	r30, 0x53	; 83
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	90 81       	ld	r25, Z
    2214:	8c 81       	ldd	r24, Y+4	; 0x04
    2216:	89 2b       	or	r24, r25
    2218:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	89 83       	std	Y+1, r24	; 0x01
    221e:	33 c0       	rjmp	.+102    	; 0x2286 <PWM_enuSetPrescaler+0xba>
			}
			else if(Copy_pstrPWMWaveConfig->Timer_Num == TIMER1_ID){
    2220:	ea 81       	ldd	r30, Y+2	; 0x02
    2222:	fb 81       	ldd	r31, Y+3	; 0x03
    2224:	80 81       	ld	r24, Z
    2226:	82 32       	cpi	r24, 0x22	; 34
    2228:	91 f4       	brne	.+36     	; 0x224e <PWM_enuSetPrescaler+0x82>
				TCCR1B &= ~(0x07);
    222a:	ae e4       	ldi	r26, 0x4E	; 78
    222c:	b0 e0       	ldi	r27, 0x00	; 0
    222e:	ee e4       	ldi	r30, 0x4E	; 78
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	80 81       	ld	r24, Z
    2234:	88 7f       	andi	r24, 0xF8	; 248
    2236:	8c 93       	st	X, r24
				TCCR1B |= Copy_u8Prescaler;
    2238:	ae e4       	ldi	r26, 0x4E	; 78
    223a:	b0 e0       	ldi	r27, 0x00	; 0
    223c:	ee e4       	ldi	r30, 0x4E	; 78
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	90 81       	ld	r25, Z
    2242:	8c 81       	ldd	r24, Y+4	; 0x04
    2244:	89 2b       	or	r24, r25
    2246:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	89 83       	std	Y+1, r24	; 0x01
    224c:	1c c0       	rjmp	.+56     	; 0x2286 <PWM_enuSetPrescaler+0xba>
			}
			else if(Copy_pstrPWMWaveConfig->Timer_Num == TIMER2_ID){
    224e:	ea 81       	ldd	r30, Y+2	; 0x02
    2250:	fb 81       	ldd	r31, Y+3	; 0x03
    2252:	80 81       	ld	r24, Z
    2254:	88 35       	cpi	r24, 0x58	; 88
    2256:	91 f4       	brne	.+36     	; 0x227c <PWM_enuSetPrescaler+0xb0>
				TCCR2 &= ~(0x07);
    2258:	a5 e4       	ldi	r26, 0x45	; 69
    225a:	b0 e0       	ldi	r27, 0x00	; 0
    225c:	e5 e4       	ldi	r30, 0x45	; 69
    225e:	f0 e0       	ldi	r31, 0x00	; 0
    2260:	80 81       	ld	r24, Z
    2262:	88 7f       	andi	r24, 0xF8	; 248
    2264:	8c 93       	st	X, r24
				TCCR2 |= Copy_u8Prescaler;
    2266:	a5 e4       	ldi	r26, 0x45	; 69
    2268:	b0 e0       	ldi	r27, 0x00	; 0
    226a:	e5 e4       	ldi	r30, 0x45	; 69
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	90 81       	ld	r25, Z
    2270:	8c 81       	ldd	r24, Y+4	; 0x04
    2272:	89 2b       	or	r24, r25
    2274:	8c 93       	st	X, r24
				Local_enuErrorState = ES_OK;
    2276:	81 e0       	ldi	r24, 0x01	; 1
    2278:	89 83       	std	Y+1, r24	; 0x01
    227a:	05 c0       	rjmp	.+10     	; 0x2286 <PWM_enuSetPrescaler+0xba>
			}
			else
				Local_enuErrorState = ES_OUT_OF_RANGE;
    227c:	82 e0       	ldi	r24, 0x02	; 2
    227e:	89 83       	std	Y+1, r24	; 0x01
    2280:	02 c0       	rjmp	.+4      	; 0x2286 <PWM_enuSetPrescaler+0xba>
		}
	}
	else
		Local_enuErrorState = ES_NULL_POINTER;
    2282:	83 e0       	ldi	r24, 0x03	; 3
    2284:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    2286:	89 81       	ldd	r24, Y+1	; 0x01
}
    2288:	0f 90       	pop	r0
    228a:	0f 90       	pop	r0
    228c:	0f 90       	pop	r0
    228e:	0f 90       	pop	r0
    2290:	cf 91       	pop	r28
    2292:	df 91       	pop	r29
    2294:	08 95       	ret

00002296 <PWM_enuSetOutputCompare>:

ES_t PWM_enuSetOutputCompare(u8 Copy_u8OCR, u16 Copy_u16OCValue){
    2296:	df 93       	push	r29
    2298:	cf 93       	push	r28
    229a:	00 d0       	rcall	.+0      	; 0x229c <PWM_enuSetOutputCompare+0x6>
    229c:	00 d0       	rcall	.+0      	; 0x229e <PWM_enuSetOutputCompare+0x8>
    229e:	00 d0       	rcall	.+0      	; 0x22a0 <PWM_enuSetOutputCompare+0xa>
    22a0:	cd b7       	in	r28, 0x3d	; 61
    22a2:	de b7       	in	r29, 0x3e	; 62
    22a4:	8a 83       	std	Y+2, r24	; 0x02
    22a6:	7c 83       	std	Y+4, r23	; 0x04
    22a8:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_OK;
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8OCR){
    22ae:	8a 81       	ldd	r24, Y+2	; 0x02
    22b0:	28 2f       	mov	r18, r24
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	3e 83       	std	Y+6, r19	; 0x06
    22b6:	2d 83       	std	Y+5, r18	; 0x05
    22b8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ba:	9e 81       	ldd	r25, Y+6	; 0x06
    22bc:	87 31       	cpi	r24, 0x17	; 23
    22be:	91 05       	cpc	r25, r1
    22c0:	d9 f0       	breq	.+54     	; 0x22f8 <PWM_enuSetOutputCompare+0x62>
    22c2:	2d 81       	ldd	r18, Y+5	; 0x05
    22c4:	3e 81       	ldd	r19, Y+6	; 0x06
    22c6:	28 31       	cpi	r18, 0x18	; 24
    22c8:	31 05       	cpc	r19, r1
    22ca:	34 f4       	brge	.+12     	; 0x22d8 <PWM_enuSetOutputCompare+0x42>
    22cc:	8d 81       	ldd	r24, Y+5	; 0x05
    22ce:	9e 81       	ldd	r25, Y+6	; 0x06
    22d0:	8e 30       	cpi	r24, 0x0E	; 14
    22d2:	91 05       	cpc	r25, r1
    22d4:	61 f0       	breq	.+24     	; 0x22ee <PWM_enuSetOutputCompare+0x58>
    22d6:	2d c0       	rjmp	.+90     	; 0x2332 <PWM_enuSetOutputCompare+0x9c>
    22d8:	2d 81       	ldd	r18, Y+5	; 0x05
    22da:	3e 81       	ldd	r19, Y+6	; 0x06
    22dc:	20 32       	cpi	r18, 0x20	; 32
    22de:	31 05       	cpc	r19, r1
    22e0:	b9 f0       	breq	.+46     	; 0x2310 <PWM_enuSetOutputCompare+0x7a>
    22e2:	8d 81       	ldd	r24, Y+5	; 0x05
    22e4:	9e 81       	ldd	r25, Y+6	; 0x06
    22e6:	89 32       	cpi	r24, 0x29	; 41
    22e8:	91 05       	cpc	r25, r1
    22ea:	f1 f0       	breq	.+60     	; 0x2328 <PWM_enuSetOutputCompare+0x92>
    22ec:	22 c0       	rjmp	.+68     	; 0x2332 <PWM_enuSetOutputCompare+0x9c>
	case T0_OCR:
		OCR0 = ((u8)Copy_u16OCValue);
    22ee:	ec e5       	ldi	r30, 0x5C	; 92
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	8b 81       	ldd	r24, Y+3	; 0x03
    22f4:	80 83       	st	Z, r24
    22f6:	1e c0       	rjmp	.+60     	; 0x2334 <PWM_enuSetOutputCompare+0x9e>
		break;
	case T1A_OCR:
		OCR1AH = (Copy_u16OCValue>>8);
    22f8:	eb e4       	ldi	r30, 0x4B	; 75
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	8b 81       	ldd	r24, Y+3	; 0x03
    22fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2300:	89 2f       	mov	r24, r25
    2302:	99 27       	eor	r25, r25
    2304:	80 83       	st	Z, r24
		OCR1AL = ((u8)Copy_u16OCValue);
    2306:	ea e4       	ldi	r30, 0x4A	; 74
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	8b 81       	ldd	r24, Y+3	; 0x03
    230c:	80 83       	st	Z, r24
    230e:	12 c0       	rjmp	.+36     	; 0x2334 <PWM_enuSetOutputCompare+0x9e>
		break;
	case T1B_OCR:
		OCR1BH = (Copy_u16OCValue>>8);
    2310:	e9 e4       	ldi	r30, 0x49	; 73
    2312:	f0 e0       	ldi	r31, 0x00	; 0
    2314:	8b 81       	ldd	r24, Y+3	; 0x03
    2316:	9c 81       	ldd	r25, Y+4	; 0x04
    2318:	89 2f       	mov	r24, r25
    231a:	99 27       	eor	r25, r25
    231c:	80 83       	st	Z, r24
		OCR1BL = ((u8)Copy_u16OCValue);
    231e:	e8 e4       	ldi	r30, 0x48	; 72
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	8b 81       	ldd	r24, Y+3	; 0x03
    2324:	80 83       	st	Z, r24
    2326:	06 c0       	rjmp	.+12     	; 0x2334 <PWM_enuSetOutputCompare+0x9e>
		break;
	case T2_OCR:
		OCR2 = ((u8)Copy_u16OCValue);
    2328:	e3 e4       	ldi	r30, 0x43	; 67
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	8b 81       	ldd	r24, Y+3	; 0x03
    232e:	80 83       	st	Z, r24
    2330:	01 c0       	rjmp	.+2      	; 0x2334 <PWM_enuSetOutputCompare+0x9e>
		break;
	default:
		Local_enuErrorState = ES_NOK;
    2332:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_enuErrorState;
    2334:	89 81       	ldd	r24, Y+1	; 0x01
}
    2336:	26 96       	adiw	r28, 0x06	; 6
    2338:	0f b6       	in	r0, 0x3f	; 63
    233a:	f8 94       	cli
    233c:	de bf       	out	0x3e, r29	; 62
    233e:	0f be       	out	0x3f, r0	; 63
    2340:	cd bf       	out	0x3d, r28	; 61
    2342:	cf 91       	pop	r28
    2344:	df 91       	pop	r29
    2346:	08 95       	ret

00002348 <PWM_enuSetOCRMode>:

ES_t PWM_enuSetOCRMode(u8 Copy_u8OCR ,u8 Copy_u8OCRMode){
    2348:	df 93       	push	r29
    234a:	cf 93       	push	r28
    234c:	00 d0       	rcall	.+0      	; 0x234e <PWM_enuSetOCRMode+0x6>
    234e:	00 d0       	rcall	.+0      	; 0x2350 <PWM_enuSetOCRMode+0x8>
    2350:	0f 92       	push	r0
    2352:	cd b7       	in	r28, 0x3d	; 61
    2354:	de b7       	in	r29, 0x3e	; 62
    2356:	8a 83       	std	Y+2, r24	; 0x02
    2358:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_OK;
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8OCRMode <= 3){
    235e:	8b 81       	ldd	r24, Y+3	; 0x03
    2360:	84 30       	cpi	r24, 0x04	; 4
    2362:	08 f0       	brcs	.+2      	; 0x2366 <PWM_enuSetOCRMode+0x1e>
    2364:	6d c0       	rjmp	.+218    	; 0x2440 <PWM_enuSetOCRMode+0xf8>
		switch(Copy_u8OCR){
    2366:	8a 81       	ldd	r24, Y+2	; 0x02
    2368:	28 2f       	mov	r18, r24
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	3d 83       	std	Y+5, r19	; 0x05
    236e:	2c 83       	std	Y+4, r18	; 0x04
    2370:	8c 81       	ldd	r24, Y+4	; 0x04
    2372:	9d 81       	ldd	r25, Y+5	; 0x05
    2374:	87 31       	cpi	r24, 0x17	; 23
    2376:	91 05       	cpc	r25, r1
    2378:	41 f1       	breq	.+80     	; 0x23ca <PWM_enuSetOCRMode+0x82>
    237a:	2c 81       	ldd	r18, Y+4	; 0x04
    237c:	3d 81       	ldd	r19, Y+5	; 0x05
    237e:	28 31       	cpi	r18, 0x18	; 24
    2380:	31 05       	cpc	r19, r1
    2382:	34 f4       	brge	.+12     	; 0x2390 <PWM_enuSetOCRMode+0x48>
    2384:	8c 81       	ldd	r24, Y+4	; 0x04
    2386:	9d 81       	ldd	r25, Y+5	; 0x05
    2388:	8e 30       	cpi	r24, 0x0E	; 14
    238a:	91 05       	cpc	r25, r1
    238c:	61 f0       	breq	.+24     	; 0x23a6 <PWM_enuSetOCRMode+0x5e>
    238e:	56 c0       	rjmp	.+172    	; 0x243c <PWM_enuSetOCRMode+0xf4>
    2390:	2c 81       	ldd	r18, Y+4	; 0x04
    2392:	3d 81       	ldd	r19, Y+5	; 0x05
    2394:	20 32       	cpi	r18, 0x20	; 32
    2396:	31 05       	cpc	r19, r1
    2398:	69 f1       	breq	.+90     	; 0x23f4 <PWM_enuSetOCRMode+0xac>
    239a:	8c 81       	ldd	r24, Y+4	; 0x04
    239c:	9d 81       	ldd	r25, Y+5	; 0x05
    239e:	89 32       	cpi	r24, 0x29	; 41
    23a0:	91 05       	cpc	r25, r1
    23a2:	d1 f1       	breq	.+116    	; 0x2418 <PWM_enuSetOCRMode+0xd0>
    23a4:	4b c0       	rjmp	.+150    	; 0x243c <PWM_enuSetOCRMode+0xf4>
		case T0_OCR:
			TCCR0 |= (Copy_u8OCRMode << 4);
    23a6:	a3 e5       	ldi	r26, 0x53	; 83
    23a8:	b0 e0       	ldi	r27, 0x00	; 0
    23aa:	e3 e5       	ldi	r30, 0x53	; 83
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	80 81       	ld	r24, Z
    23b0:	28 2f       	mov	r18, r24
    23b2:	8b 81       	ldd	r24, Y+3	; 0x03
    23b4:	88 2f       	mov	r24, r24
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	82 95       	swap	r24
    23ba:	92 95       	swap	r25
    23bc:	90 7f       	andi	r25, 0xF0	; 240
    23be:	98 27       	eor	r25, r24
    23c0:	80 7f       	andi	r24, 0xF0	; 240
    23c2:	98 27       	eor	r25, r24
    23c4:	82 2b       	or	r24, r18
    23c6:	8c 93       	st	X, r24
    23c8:	3d c0       	rjmp	.+122    	; 0x2444 <PWM_enuSetOCRMode+0xfc>
			break;
		case T1A_OCR:
			TCCR1A |= (Copy_u8OCRMode << 6);
    23ca:	af e4       	ldi	r26, 0x4F	; 79
    23cc:	b0 e0       	ldi	r27, 0x00	; 0
    23ce:	ef e4       	ldi	r30, 0x4F	; 79
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	80 81       	ld	r24, Z
    23d4:	28 2f       	mov	r18, r24
    23d6:	8b 81       	ldd	r24, Y+3	; 0x03
    23d8:	88 2f       	mov	r24, r24
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	00 24       	eor	r0, r0
    23de:	96 95       	lsr	r25
    23e0:	87 95       	ror	r24
    23e2:	07 94       	ror	r0
    23e4:	96 95       	lsr	r25
    23e6:	87 95       	ror	r24
    23e8:	07 94       	ror	r0
    23ea:	98 2f       	mov	r25, r24
    23ec:	80 2d       	mov	r24, r0
    23ee:	82 2b       	or	r24, r18
    23f0:	8c 93       	st	X, r24
    23f2:	28 c0       	rjmp	.+80     	; 0x2444 <PWM_enuSetOCRMode+0xfc>
			break;
		case T1B_OCR:
			TCCR1A |= (Copy_u8OCRMode << 4);
    23f4:	af e4       	ldi	r26, 0x4F	; 79
    23f6:	b0 e0       	ldi	r27, 0x00	; 0
    23f8:	ef e4       	ldi	r30, 0x4F	; 79
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	80 81       	ld	r24, Z
    23fe:	28 2f       	mov	r18, r24
    2400:	8b 81       	ldd	r24, Y+3	; 0x03
    2402:	88 2f       	mov	r24, r24
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	82 95       	swap	r24
    2408:	92 95       	swap	r25
    240a:	90 7f       	andi	r25, 0xF0	; 240
    240c:	98 27       	eor	r25, r24
    240e:	80 7f       	andi	r24, 0xF0	; 240
    2410:	98 27       	eor	r25, r24
    2412:	82 2b       	or	r24, r18
    2414:	8c 93       	st	X, r24
    2416:	16 c0       	rjmp	.+44     	; 0x2444 <PWM_enuSetOCRMode+0xfc>
			break;
		case T2_OCR:
			TCCR2 |= (Copy_u8OCRMode << 4);
    2418:	a5 e4       	ldi	r26, 0x45	; 69
    241a:	b0 e0       	ldi	r27, 0x00	; 0
    241c:	e5 e4       	ldi	r30, 0x45	; 69
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	80 81       	ld	r24, Z
    2422:	28 2f       	mov	r18, r24
    2424:	8b 81       	ldd	r24, Y+3	; 0x03
    2426:	88 2f       	mov	r24, r24
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	82 95       	swap	r24
    242c:	92 95       	swap	r25
    242e:	90 7f       	andi	r25, 0xF0	; 240
    2430:	98 27       	eor	r25, r24
    2432:	80 7f       	andi	r24, 0xF0	; 240
    2434:	98 27       	eor	r25, r24
    2436:	82 2b       	or	r24, r18
    2438:	8c 93       	st	X, r24
    243a:	04 c0       	rjmp	.+8      	; 0x2444 <PWM_enuSetOCRMode+0xfc>
			break;
		default:
			Local_enuErrorState = ES_NOK;
    243c:	19 82       	std	Y+1, r1	; 0x01
    243e:	02 c0       	rjmp	.+4      	; 0x2444 <PWM_enuSetOCRMode+0xfc>
		}
	}
	else
		Local_enuErrorState = ES_OUT_OF_RANGE;
    2440:	82 e0       	ldi	r24, 0x02	; 2
    2442:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    2444:	89 81       	ldd	r24, Y+1	; 0x01
}
    2446:	0f 90       	pop	r0
    2448:	0f 90       	pop	r0
    244a:	0f 90       	pop	r0
    244c:	0f 90       	pop	r0
    244e:	0f 90       	pop	r0
    2450:	cf 91       	pop	r28
    2452:	df 91       	pop	r29
    2454:	08 95       	ret

00002456 <PWM_enuSetICR1>:

ES_t PWM_enuSetICR1(u16 Copy_u16ICR1){
    2456:	df 93       	push	r29
    2458:	cf 93       	push	r28
    245a:	00 d0       	rcall	.+0      	; 0x245c <PWM_enuSetICR1+0x6>
    245c:	cd b7       	in	r28, 0x3d	; 61
    245e:	de b7       	in	r29, 0x3e	; 62
    2460:	9a 83       	std	Y+2, r25	; 0x02
    2462:	89 83       	std	Y+1, r24	; 0x01
	ICR1L = ((u8)Copy_u16ICR1);
    2464:	e6 e4       	ldi	r30, 0x46	; 70
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	89 81       	ldd	r24, Y+1	; 0x01
    246a:	80 83       	st	Z, r24
	ICR1H = (Copy_u16ICR1>>8);
    246c:	e7 e4       	ldi	r30, 0x47	; 71
    246e:	f0 e0       	ldi	r31, 0x00	; 0
    2470:	89 81       	ldd	r24, Y+1	; 0x01
    2472:	9a 81       	ldd	r25, Y+2	; 0x02
    2474:	89 2f       	mov	r24, r25
    2476:	99 27       	eor	r25, r25
    2478:	80 83       	st	Z, r24
	return ES_OK;
    247a:	81 e0       	ldi	r24, 0x01	; 1
}
    247c:	0f 90       	pop	r0
    247e:	0f 90       	pop	r0
    2480:	cf 91       	pop	r28
    2482:	df 91       	pop	r29
    2484:	08 95       	ret

00002486 <GIE_enuInit>:
#include "../../LIB/stdTypes.h"
#include "../../LIB/errorState.h"

#include "GIE_priv.h"

ES_t GIE_enuInit(void){
    2486:	df 93       	push	r29
    2488:	cf 93       	push	r28
    248a:	cd b7       	in	r28, 0x3d	; 61
    248c:	de b7       	in	r29, 0x3e	; 62
	asm("CLI");
    248e:	f8 94       	cli
	return ES_OK;
    2490:	81 e0       	ldi	r24, 0x01	; 1
}
    2492:	cf 91       	pop	r28
    2494:	df 91       	pop	r29
    2496:	08 95       	ret

00002498 <GIE_enuEnable>:

ES_t GIE_enuEnable(void){
    2498:	df 93       	push	r29
    249a:	cf 93       	push	r28
    249c:	cd b7       	in	r28, 0x3d	; 61
    249e:	de b7       	in	r29, 0x3e	; 62
	//SREG |= (1<<I_BIT); //asm("SBI 0x-- , -");
	asm("SEI");
    24a0:	78 94       	sei
	return ES_OK;
    24a2:	81 e0       	ldi	r24, 0x01	; 1
}
    24a4:	cf 91       	pop	r28
    24a6:	df 91       	pop	r29
    24a8:	08 95       	ret

000024aa <GIE_enuDisable>:

ES_t GIE_enuDisable(void){
    24aa:	df 93       	push	r29
    24ac:	cf 93       	push	r28
    24ae:	cd b7       	in	r28, 0x3d	; 61
    24b0:	de b7       	in	r29, 0x3e	; 62
	asm("CLI");
    24b2:	f8 94       	cli
	return ES_OK;
    24b4:	81 e0       	ldi	r24, 0x01	; 1
}
    24b6:	cf 91       	pop	r28
    24b8:	df 91       	pop	r29
    24ba:	08 95       	ret

000024bc <EXTI_enuInit>:
static void (* EXTI_ApfunISRFun[3])(void*)= {NULL, NULL,NULL};
static void * EXTI_ApvidISRParameter[3] = {NULL, NULL,NULL};

extern u8 EXTI_u8IntNum;

ES_t EXTI_enuInit(EXTI_t * Copy_pAstrEXTIConfig){
    24bc:	df 93       	push	r29
    24be:	cf 93       	push	r28
    24c0:	cd b7       	in	r28, 0x3d	; 61
    24c2:	de b7       	in	r29, 0x3e	; 62
    24c4:	2a 97       	sbiw	r28, 0x0a	; 10
    24c6:	0f b6       	in	r0, 0x3f	; 63
    24c8:	f8 94       	cli
    24ca:	de bf       	out	0x3e, r29	; 62
    24cc:	0f be       	out	0x3f, r0	; 63
    24ce:	cd bf       	out	0x3d, r28	; 61
    24d0:	9c 83       	std	Y+4, r25	; 0x04
    24d2:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    24d4:	1a 82       	std	Y+2, r1	; 0x02
	if (Copy_pAstrEXTIConfig != NULL){
    24d6:	8b 81       	ldd	r24, Y+3	; 0x03
    24d8:	9c 81       	ldd	r25, Y+4	; 0x04
    24da:	00 97       	sbiw	r24, 0x00	; 0
    24dc:	09 f4       	brne	.+2      	; 0x24e0 <EXTI_enuInit+0x24>
    24de:	9e c1       	rjmp	.+828    	; 0x281c <EXTI_enuInit+0x360>
		for (u8 Local_u8EXTIter = 0; Local_u8EXTIter < EXTI_u8IntNum; Local_u8EXTIter++){
    24e0:	19 82       	std	Y+1, r1	; 0x01
    24e2:	95 c1       	rjmp	.+810    	; 0x280e <EXTI_enuInit+0x352>
			if (Copy_pAstrEXTIConfig[Local_u8EXTIter].intNum == INT0_ID){
    24e4:	89 81       	ldd	r24, Y+1	; 0x01
    24e6:	28 2f       	mov	r18, r24
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	c9 01       	movw	r24, r18
    24ec:	88 0f       	add	r24, r24
    24ee:	99 1f       	adc	r25, r25
    24f0:	28 0f       	add	r18, r24
    24f2:	39 1f       	adc	r19, r25
    24f4:	8b 81       	ldd	r24, Y+3	; 0x03
    24f6:	9c 81       	ldd	r25, Y+4	; 0x04
    24f8:	fc 01       	movw	r30, r24
    24fa:	e2 0f       	add	r30, r18
    24fc:	f3 1f       	adc	r31, r19
    24fe:	82 81       	ldd	r24, Z+2	; 0x02
    2500:	88 23       	and	r24, r24
    2502:	09 f0       	breq	.+2      	; 0x2506 <EXTI_enuInit+0x4a>
    2504:	7e c0       	rjmp	.+252    	; 0x2602 <EXTI_enuInit+0x146>
				MCUCR &=~(3<<0);
    2506:	a5 e5       	ldi	r26, 0x55	; 85
    2508:	b0 e0       	ldi	r27, 0x00	; 0
    250a:	e5 e5       	ldi	r30, 0x55	; 85
    250c:	f0 e0       	ldi	r31, 0x00	; 0
    250e:	80 81       	ld	r24, Z
    2510:	8c 7f       	andi	r24, 0xFC	; 252
    2512:	8c 93       	st	X, r24
				switch (Copy_pAstrEXTIConfig[Local_u8EXTIter].senseLvl){
    2514:	89 81       	ldd	r24, Y+1	; 0x01
    2516:	28 2f       	mov	r18, r24
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	c9 01       	movw	r24, r18
    251c:	88 0f       	add	r24, r24
    251e:	99 1f       	adc	r25, r25
    2520:	28 0f       	add	r18, r24
    2522:	39 1f       	adc	r19, r25
    2524:	8b 81       	ldd	r24, Y+3	; 0x03
    2526:	9c 81       	ldd	r25, Y+4	; 0x04
    2528:	fc 01       	movw	r30, r24
    252a:	e2 0f       	add	r30, r18
    252c:	f3 1f       	adc	r31, r19
    252e:	80 81       	ld	r24, Z
    2530:	28 2f       	mov	r18, r24
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	3a 87       	std	Y+10, r19	; 0x0a
    2536:	29 87       	std	Y+9, r18	; 0x09
    2538:	89 85       	ldd	r24, Y+9	; 0x09
    253a:	9a 85       	ldd	r25, Y+10	; 0x0a
    253c:	8a 34       	cpi	r24, 0x4A	; 74
    253e:	91 05       	cpc	r25, r1
    2540:	b1 f0       	breq	.+44     	; 0x256e <EXTI_enuInit+0xb2>
    2542:	29 85       	ldd	r18, Y+9	; 0x09
    2544:	3a 85       	ldd	r19, Y+10	; 0x0a
    2546:	2b 34       	cpi	r18, 0x4B	; 75
    2548:	31 05       	cpc	r19, r1
    254a:	5c f4       	brge	.+22     	; 0x2562 <EXTI_enuInit+0xa6>
    254c:	89 85       	ldd	r24, Y+9	; 0x09
    254e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2550:	8c 30       	cpi	r24, 0x0C	; 12
    2552:	91 05       	cpc	r25, r1
    2554:	e1 f0       	breq	.+56     	; 0x258e <EXTI_enuInit+0xd2>
    2556:	29 85       	ldd	r18, Y+9	; 0x09
    2558:	3a 85       	ldd	r19, Y+10	; 0x0a
    255a:	2a 33       	cpi	r18, 0x3A	; 58
    255c:	31 05       	cpc	r19, r1
    255e:	01 f1       	breq	.+64     	; 0x25a0 <EXTI_enuInit+0xe4>
    2560:	1e c0       	rjmp	.+60     	; 0x259e <EXTI_enuInit+0xe2>
    2562:	89 85       	ldd	r24, Y+9	; 0x09
    2564:	9a 85       	ldd	r25, Y+10	; 0x0a
    2566:	80 36       	cpi	r24, 0x60	; 96
    2568:	91 05       	cpc	r25, r1
    256a:	49 f0       	breq	.+18     	; 0x257e <EXTI_enuInit+0xc2>
    256c:	18 c0       	rjmp	.+48     	; 0x259e <EXTI_enuInit+0xe2>
				case LOW_LEVEL: break;
				case ANY_LOGIC:
					MCUCR |=(1<<0);
    256e:	a5 e5       	ldi	r26, 0x55	; 85
    2570:	b0 e0       	ldi	r27, 0x00	; 0
    2572:	e5 e5       	ldi	r30, 0x55	; 85
    2574:	f0 e0       	ldi	r31, 0x00	; 0
    2576:	80 81       	ld	r24, Z
    2578:	81 60       	ori	r24, 0x01	; 1
    257a:	8c 93       	st	X, r24
    257c:	11 c0       	rjmp	.+34     	; 0x25a0 <EXTI_enuInit+0xe4>
					break;
				case FALLING:
					MCUCR |=(2<<0);
    257e:	a5 e5       	ldi	r26, 0x55	; 85
    2580:	b0 e0       	ldi	r27, 0x00	; 0
    2582:	e5 e5       	ldi	r30, 0x55	; 85
    2584:	f0 e0       	ldi	r31, 0x00	; 0
    2586:	80 81       	ld	r24, Z
    2588:	82 60       	ori	r24, 0x02	; 2
    258a:	8c 93       	st	X, r24
    258c:	09 c0       	rjmp	.+18     	; 0x25a0 <EXTI_enuInit+0xe4>
					break;
				case RISING:
					MCUCR |=(3<<0);
    258e:	a5 e5       	ldi	r26, 0x55	; 85
    2590:	b0 e0       	ldi	r27, 0x00	; 0
    2592:	e5 e5       	ldi	r30, 0x55	; 85
    2594:	f0 e0       	ldi	r31, 0x00	; 0
    2596:	80 81       	ld	r24, Z
    2598:	83 60       	ori	r24, 0x03	; 3
    259a:	8c 93       	st	X, r24
    259c:	01 c0       	rjmp	.+2      	; 0x25a0 <EXTI_enuInit+0xe4>
					break;
				default:
					Local_enuErrorState = ES_NOK;}
    259e:	1a 82       	std	Y+2, r1	; 0x02
				if (Copy_pAstrEXTIConfig[Local_u8EXTIter].intMode == ENABLED)
    25a0:	89 81       	ldd	r24, Y+1	; 0x01
    25a2:	28 2f       	mov	r18, r24
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	c9 01       	movw	r24, r18
    25a8:	88 0f       	add	r24, r24
    25aa:	99 1f       	adc	r25, r25
    25ac:	28 0f       	add	r18, r24
    25ae:	39 1f       	adc	r19, r25
    25b0:	8b 81       	ldd	r24, Y+3	; 0x03
    25b2:	9c 81       	ldd	r25, Y+4	; 0x04
    25b4:	fc 01       	movw	r30, r24
    25b6:	e2 0f       	add	r30, r18
    25b8:	f3 1f       	adc	r31, r19
    25ba:	81 81       	ldd	r24, Z+1	; 0x01
    25bc:	81 30       	cpi	r24, 0x01	; 1
    25be:	41 f4       	brne	.+16     	; 0x25d0 <EXTI_enuInit+0x114>
					GICR |= (1<<GICR_INT0);
    25c0:	ab e5       	ldi	r26, 0x5B	; 91
    25c2:	b0 e0       	ldi	r27, 0x00	; 0
    25c4:	eb e5       	ldi	r30, 0x5B	; 91
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	80 81       	ld	r24, Z
    25ca:	80 64       	ori	r24, 0x40	; 64
    25cc:	8c 93       	st	X, r24
    25ce:	1c c1       	rjmp	.+568    	; 0x2808 <EXTI_enuInit+0x34c>
				else if (Copy_pAstrEXTIConfig[Local_u8EXTIter].intMode == DISABLED)
    25d0:	89 81       	ldd	r24, Y+1	; 0x01
    25d2:	28 2f       	mov	r18, r24
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	c9 01       	movw	r24, r18
    25d8:	88 0f       	add	r24, r24
    25da:	99 1f       	adc	r25, r25
    25dc:	28 0f       	add	r18, r24
    25de:	39 1f       	adc	r19, r25
    25e0:	8b 81       	ldd	r24, Y+3	; 0x03
    25e2:	9c 81       	ldd	r25, Y+4	; 0x04
    25e4:	fc 01       	movw	r30, r24
    25e6:	e2 0f       	add	r30, r18
    25e8:	f3 1f       	adc	r31, r19
    25ea:	81 81       	ldd	r24, Z+1	; 0x01
    25ec:	88 23       	and	r24, r24
    25ee:	09 f0       	breq	.+2      	; 0x25f2 <EXTI_enuInit+0x136>
    25f0:	0b c1       	rjmp	.+534    	; 0x2808 <EXTI_enuInit+0x34c>
					GICR &=~(1<<GICR_INT0);
    25f2:	ab e5       	ldi	r26, 0x5B	; 91
    25f4:	b0 e0       	ldi	r27, 0x00	; 0
    25f6:	eb e5       	ldi	r30, 0x5B	; 91
    25f8:	f0 e0       	ldi	r31, 0x00	; 0
    25fa:	80 81       	ld	r24, Z
    25fc:	8f 7b       	andi	r24, 0xBF	; 191
    25fe:	8c 93       	st	X, r24
    2600:	03 c1       	rjmp	.+518    	; 0x2808 <EXTI_enuInit+0x34c>
			}
			else if (Copy_pAstrEXTIConfig[Local_u8EXTIter].intNum == INT1_ID){
    2602:	89 81       	ldd	r24, Y+1	; 0x01
    2604:	28 2f       	mov	r18, r24
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	c9 01       	movw	r24, r18
    260a:	88 0f       	add	r24, r24
    260c:	99 1f       	adc	r25, r25
    260e:	28 0f       	add	r18, r24
    2610:	39 1f       	adc	r19, r25
    2612:	8b 81       	ldd	r24, Y+3	; 0x03
    2614:	9c 81       	ldd	r25, Y+4	; 0x04
    2616:	fc 01       	movw	r30, r24
    2618:	e2 0f       	add	r30, r18
    261a:	f3 1f       	adc	r31, r19
    261c:	82 81       	ldd	r24, Z+2	; 0x02
    261e:	81 30       	cpi	r24, 0x01	; 1
    2620:	09 f0       	breq	.+2      	; 0x2624 <EXTI_enuInit+0x168>
    2622:	81 c0       	rjmp	.+258    	; 0x2726 <EXTI_enuInit+0x26a>
				MCUCR &=~(3<<2);
    2624:	a5 e5       	ldi	r26, 0x55	; 85
    2626:	b0 e0       	ldi	r27, 0x00	; 0
    2628:	e5 e5       	ldi	r30, 0x55	; 85
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	80 81       	ld	r24, Z
    262e:	83 7f       	andi	r24, 0xF3	; 243
    2630:	8c 93       	st	X, r24
				switch (Copy_pAstrEXTIConfig[Local_u8EXTIter].senseLvl){
    2632:	89 81       	ldd	r24, Y+1	; 0x01
    2634:	28 2f       	mov	r18, r24
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	c9 01       	movw	r24, r18
    263a:	88 0f       	add	r24, r24
    263c:	99 1f       	adc	r25, r25
    263e:	28 0f       	add	r18, r24
    2640:	39 1f       	adc	r19, r25
    2642:	8b 81       	ldd	r24, Y+3	; 0x03
    2644:	9c 81       	ldd	r25, Y+4	; 0x04
    2646:	fc 01       	movw	r30, r24
    2648:	e2 0f       	add	r30, r18
    264a:	f3 1f       	adc	r31, r19
    264c:	80 81       	ld	r24, Z
    264e:	28 2f       	mov	r18, r24
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	38 87       	std	Y+8, r19	; 0x08
    2654:	2f 83       	std	Y+7, r18	; 0x07
    2656:	8f 81       	ldd	r24, Y+7	; 0x07
    2658:	98 85       	ldd	r25, Y+8	; 0x08
    265a:	8a 34       	cpi	r24, 0x4A	; 74
    265c:	91 05       	cpc	r25, r1
    265e:	b1 f0       	breq	.+44     	; 0x268c <EXTI_enuInit+0x1d0>
    2660:	2f 81       	ldd	r18, Y+7	; 0x07
    2662:	38 85       	ldd	r19, Y+8	; 0x08
    2664:	2b 34       	cpi	r18, 0x4B	; 75
    2666:	31 05       	cpc	r19, r1
    2668:	5c f4       	brge	.+22     	; 0x2680 <EXTI_enuInit+0x1c4>
    266a:	8f 81       	ldd	r24, Y+7	; 0x07
    266c:	98 85       	ldd	r25, Y+8	; 0x08
    266e:	8c 30       	cpi	r24, 0x0C	; 12
    2670:	91 05       	cpc	r25, r1
    2672:	e1 f0       	breq	.+56     	; 0x26ac <EXTI_enuInit+0x1f0>
    2674:	2f 81       	ldd	r18, Y+7	; 0x07
    2676:	38 85       	ldd	r19, Y+8	; 0x08
    2678:	2a 33       	cpi	r18, 0x3A	; 58
    267a:	31 05       	cpc	r19, r1
    267c:	09 f1       	breq	.+66     	; 0x26c0 <EXTI_enuInit+0x204>
    267e:	1e c0       	rjmp	.+60     	; 0x26bc <EXTI_enuInit+0x200>
    2680:	8f 81       	ldd	r24, Y+7	; 0x07
    2682:	98 85       	ldd	r25, Y+8	; 0x08
    2684:	80 36       	cpi	r24, 0x60	; 96
    2686:	91 05       	cpc	r25, r1
    2688:	49 f0       	breq	.+18     	; 0x269c <EXTI_enuInit+0x1e0>
    268a:	18 c0       	rjmp	.+48     	; 0x26bc <EXTI_enuInit+0x200>
				case LOW_LEVEL: break;
				case ANY_LOGIC:
					MCUCR |=(1<<2);
    268c:	a5 e5       	ldi	r26, 0x55	; 85
    268e:	b0 e0       	ldi	r27, 0x00	; 0
    2690:	e5 e5       	ldi	r30, 0x55	; 85
    2692:	f0 e0       	ldi	r31, 0x00	; 0
    2694:	80 81       	ld	r24, Z
    2696:	84 60       	ori	r24, 0x04	; 4
    2698:	8c 93       	st	X, r24
    269a:	12 c0       	rjmp	.+36     	; 0x26c0 <EXTI_enuInit+0x204>
					break;
				case FALLING:
					MCUCR |=(2<<2);
    269c:	a5 e5       	ldi	r26, 0x55	; 85
    269e:	b0 e0       	ldi	r27, 0x00	; 0
    26a0:	e5 e5       	ldi	r30, 0x55	; 85
    26a2:	f0 e0       	ldi	r31, 0x00	; 0
    26a4:	80 81       	ld	r24, Z
    26a6:	88 60       	ori	r24, 0x08	; 8
    26a8:	8c 93       	st	X, r24
    26aa:	0a c0       	rjmp	.+20     	; 0x26c0 <EXTI_enuInit+0x204>
					break;
				case RISING:
					MCUCR |=(3<<2);
    26ac:	a5 e5       	ldi	r26, 0x55	; 85
    26ae:	b0 e0       	ldi	r27, 0x00	; 0
    26b0:	e5 e5       	ldi	r30, 0x55	; 85
    26b2:	f0 e0       	ldi	r31, 0x00	; 0
    26b4:	80 81       	ld	r24, Z
    26b6:	8c 60       	ori	r24, 0x0C	; 12
    26b8:	8c 93       	st	X, r24
    26ba:	02 c0       	rjmp	.+4      	; 0x26c0 <EXTI_enuInit+0x204>
					break;
				default:
					Local_enuErrorState = ES_OUT_OF_RANGE;}
    26bc:	82 e0       	ldi	r24, 0x02	; 2
    26be:	8a 83       	std	Y+2, r24	; 0x02
				if (Copy_pAstrEXTIConfig[Local_u8EXTIter].intMode == ENABLED)
    26c0:	89 81       	ldd	r24, Y+1	; 0x01
    26c2:	28 2f       	mov	r18, r24
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	c9 01       	movw	r24, r18
    26c8:	88 0f       	add	r24, r24
    26ca:	99 1f       	adc	r25, r25
    26cc:	28 0f       	add	r18, r24
    26ce:	39 1f       	adc	r19, r25
    26d0:	8b 81       	ldd	r24, Y+3	; 0x03
    26d2:	9c 81       	ldd	r25, Y+4	; 0x04
    26d4:	fc 01       	movw	r30, r24
    26d6:	e2 0f       	add	r30, r18
    26d8:	f3 1f       	adc	r31, r19
    26da:	81 81       	ldd	r24, Z+1	; 0x01
    26dc:	81 30       	cpi	r24, 0x01	; 1
    26de:	41 f4       	brne	.+16     	; 0x26f0 <EXTI_enuInit+0x234>
					GICR |= (1<<GICR_INT1);
    26e0:	ab e5       	ldi	r26, 0x5B	; 91
    26e2:	b0 e0       	ldi	r27, 0x00	; 0
    26e4:	eb e5       	ldi	r30, 0x5B	; 91
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	80 81       	ld	r24, Z
    26ea:	80 68       	ori	r24, 0x80	; 128
    26ec:	8c 93       	st	X, r24
    26ee:	8c c0       	rjmp	.+280    	; 0x2808 <EXTI_enuInit+0x34c>
				else if (Copy_pAstrEXTIConfig[Local_u8EXTIter].intMode == DISABLED)
    26f0:	89 81       	ldd	r24, Y+1	; 0x01
    26f2:	28 2f       	mov	r18, r24
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	c9 01       	movw	r24, r18
    26f8:	88 0f       	add	r24, r24
    26fa:	99 1f       	adc	r25, r25
    26fc:	28 0f       	add	r18, r24
    26fe:	39 1f       	adc	r19, r25
    2700:	8b 81       	ldd	r24, Y+3	; 0x03
    2702:	9c 81       	ldd	r25, Y+4	; 0x04
    2704:	fc 01       	movw	r30, r24
    2706:	e2 0f       	add	r30, r18
    2708:	f3 1f       	adc	r31, r19
    270a:	81 81       	ldd	r24, Z+1	; 0x01
    270c:	88 23       	and	r24, r24
    270e:	41 f4       	brne	.+16     	; 0x2720 <EXTI_enuInit+0x264>
					GICR &=~(1<<GICR_INT1);
    2710:	ab e5       	ldi	r26, 0x5B	; 91
    2712:	b0 e0       	ldi	r27, 0x00	; 0
    2714:	eb e5       	ldi	r30, 0x5B	; 91
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	80 81       	ld	r24, Z
    271a:	8f 77       	andi	r24, 0x7F	; 127
    271c:	8c 93       	st	X, r24
    271e:	74 c0       	rjmp	.+232    	; 0x2808 <EXTI_enuInit+0x34c>
				else
					Local_enuErrorState = ES_OUT_OF_RANGE;}
    2720:	82 e0       	ldi	r24, 0x02	; 2
    2722:	8a 83       	std	Y+2, r24	; 0x02
    2724:	71 c0       	rjmp	.+226    	; 0x2808 <EXTI_enuInit+0x34c>
			else if (Copy_pAstrEXTIConfig[Local_u8EXTIter].intNum == INT2_ID){
    2726:	89 81       	ldd	r24, Y+1	; 0x01
    2728:	28 2f       	mov	r18, r24
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	c9 01       	movw	r24, r18
    272e:	88 0f       	add	r24, r24
    2730:	99 1f       	adc	r25, r25
    2732:	28 0f       	add	r18, r24
    2734:	39 1f       	adc	r19, r25
    2736:	8b 81       	ldd	r24, Y+3	; 0x03
    2738:	9c 81       	ldd	r25, Y+4	; 0x04
    273a:	fc 01       	movw	r30, r24
    273c:	e2 0f       	add	r30, r18
    273e:	f3 1f       	adc	r31, r19
    2740:	82 81       	ldd	r24, Z+2	; 0x02
    2742:	82 30       	cpi	r24, 0x02	; 2
    2744:	09 f0       	breq	.+2      	; 0x2748 <EXTI_enuInit+0x28c>
    2746:	5e c0       	rjmp	.+188    	; 0x2804 <EXTI_enuInit+0x348>
				MCUCSR &=~(1<<6);
    2748:	a4 e5       	ldi	r26, 0x54	; 84
    274a:	b0 e0       	ldi	r27, 0x00	; 0
    274c:	e4 e5       	ldi	r30, 0x54	; 84
    274e:	f0 e0       	ldi	r31, 0x00	; 0
    2750:	80 81       	ld	r24, Z
    2752:	8f 7b       	andi	r24, 0xBF	; 191
    2754:	8c 93       	st	X, r24
				switch (Copy_pAstrEXTIConfig[Local_u8EXTIter].senseLvl){
    2756:	89 81       	ldd	r24, Y+1	; 0x01
    2758:	28 2f       	mov	r18, r24
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	c9 01       	movw	r24, r18
    275e:	88 0f       	add	r24, r24
    2760:	99 1f       	adc	r25, r25
    2762:	28 0f       	add	r18, r24
    2764:	39 1f       	adc	r19, r25
    2766:	8b 81       	ldd	r24, Y+3	; 0x03
    2768:	9c 81       	ldd	r25, Y+4	; 0x04
    276a:	fc 01       	movw	r30, r24
    276c:	e2 0f       	add	r30, r18
    276e:	f3 1f       	adc	r31, r19
    2770:	80 81       	ld	r24, Z
    2772:	28 2f       	mov	r18, r24
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	3e 83       	std	Y+6, r19	; 0x06
    2778:	2d 83       	std	Y+5, r18	; 0x05
    277a:	8d 81       	ldd	r24, Y+5	; 0x05
    277c:	9e 81       	ldd	r25, Y+6	; 0x06
    277e:	8c 30       	cpi	r24, 0x0C	; 12
    2780:	91 05       	cpc	r25, r1
    2782:	31 f0       	breq	.+12     	; 0x2790 <EXTI_enuInit+0x2d4>
    2784:	2d 81       	ldd	r18, Y+5	; 0x05
    2786:	3e 81       	ldd	r19, Y+6	; 0x06
    2788:	20 36       	cpi	r18, 0x60	; 96
    278a:	31 05       	cpc	r19, r1
    278c:	59 f0       	breq	.+22     	; 0x27a4 <EXTI_enuInit+0x2e8>
    278e:	08 c0       	rjmp	.+16     	; 0x27a0 <EXTI_enuInit+0x2e4>
				case FALLING:
					break;
				case RISING:
					MCUCSR |=(1<<6);
    2790:	a4 e5       	ldi	r26, 0x54	; 84
    2792:	b0 e0       	ldi	r27, 0x00	; 0
    2794:	e4 e5       	ldi	r30, 0x54	; 84
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	80 81       	ld	r24, Z
    279a:	80 64       	ori	r24, 0x40	; 64
    279c:	8c 93       	st	X, r24
    279e:	02 c0       	rjmp	.+4      	; 0x27a4 <EXTI_enuInit+0x2e8>
					break;
				default:
					Local_enuErrorState = ES_OUT_OF_RANGE;}
    27a0:	82 e0       	ldi	r24, 0x02	; 2
    27a2:	8a 83       	std	Y+2, r24	; 0x02
				if (Copy_pAstrEXTIConfig[Local_u8EXTIter].intMode == ENABLED)
    27a4:	89 81       	ldd	r24, Y+1	; 0x01
    27a6:	28 2f       	mov	r18, r24
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	c9 01       	movw	r24, r18
    27ac:	88 0f       	add	r24, r24
    27ae:	99 1f       	adc	r25, r25
    27b0:	28 0f       	add	r18, r24
    27b2:	39 1f       	adc	r19, r25
    27b4:	8b 81       	ldd	r24, Y+3	; 0x03
    27b6:	9c 81       	ldd	r25, Y+4	; 0x04
    27b8:	fc 01       	movw	r30, r24
    27ba:	e2 0f       	add	r30, r18
    27bc:	f3 1f       	adc	r31, r19
    27be:	81 81       	ldd	r24, Z+1	; 0x01
    27c0:	81 30       	cpi	r24, 0x01	; 1
    27c2:	41 f4       	brne	.+16     	; 0x27d4 <EXTI_enuInit+0x318>
					GICR |= (1<<GICR_INT2);
    27c4:	ab e5       	ldi	r26, 0x5B	; 91
    27c6:	b0 e0       	ldi	r27, 0x00	; 0
    27c8:	eb e5       	ldi	r30, 0x5B	; 91
    27ca:	f0 e0       	ldi	r31, 0x00	; 0
    27cc:	80 81       	ld	r24, Z
    27ce:	80 62       	ori	r24, 0x20	; 32
    27d0:	8c 93       	st	X, r24
    27d2:	1a c0       	rjmp	.+52     	; 0x2808 <EXTI_enuInit+0x34c>
				else if (Copy_pAstrEXTIConfig[Local_u8EXTIter].intMode == DISABLED)
    27d4:	89 81       	ldd	r24, Y+1	; 0x01
    27d6:	28 2f       	mov	r18, r24
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	c9 01       	movw	r24, r18
    27dc:	88 0f       	add	r24, r24
    27de:	99 1f       	adc	r25, r25
    27e0:	28 0f       	add	r18, r24
    27e2:	39 1f       	adc	r19, r25
    27e4:	8b 81       	ldd	r24, Y+3	; 0x03
    27e6:	9c 81       	ldd	r25, Y+4	; 0x04
    27e8:	fc 01       	movw	r30, r24
    27ea:	e2 0f       	add	r30, r18
    27ec:	f3 1f       	adc	r31, r19
    27ee:	81 81       	ldd	r24, Z+1	; 0x01
    27f0:	88 23       	and	r24, r24
    27f2:	51 f4       	brne	.+20     	; 0x2808 <EXTI_enuInit+0x34c>
					GICR &=~(1<<GICR_INT2); }
    27f4:	ab e5       	ldi	r26, 0x5B	; 91
    27f6:	b0 e0       	ldi	r27, 0x00	; 0
    27f8:	eb e5       	ldi	r30, 0x5B	; 91
    27fa:	f0 e0       	ldi	r31, 0x00	; 0
    27fc:	80 81       	ld	r24, Z
    27fe:	8f 7d       	andi	r24, 0xDF	; 223
    2800:	8c 93       	st	X, r24
    2802:	02 c0       	rjmp	.+4      	; 0x2808 <EXTI_enuInit+0x34c>
			else // FOR intNum
				Local_enuErrorState = ES_OUT_OF_RANGE;
    2804:	82 e0       	ldi	r24, 0x02	; 2
    2806:	8a 83       	std	Y+2, r24	; 0x02
extern u8 EXTI_u8IntNum;

ES_t EXTI_enuInit(EXTI_t * Copy_pAstrEXTIConfig){
	ES_t Local_enuErrorState = ES_NOK;
	if (Copy_pAstrEXTIConfig != NULL){
		for (u8 Local_u8EXTIter = 0; Local_u8EXTIter < EXTI_u8IntNum; Local_u8EXTIter++){
    2808:	89 81       	ldd	r24, Y+1	; 0x01
    280a:	8f 5f       	subi	r24, 0xFF	; 255
    280c:	89 83       	std	Y+1, r24	; 0x01
    280e:	90 91 b4 00 	lds	r25, 0x00B4
    2812:	89 81       	ldd	r24, Y+1	; 0x01
    2814:	89 17       	cp	r24, r25
    2816:	08 f4       	brcc	.+2      	; 0x281a <EXTI_enuInit+0x35e>
    2818:	65 ce       	rjmp	.-822    	; 0x24e4 <EXTI_enuInit+0x28>
    281a:	02 c0       	rjmp	.+4      	; 0x2820 <EXTI_enuInit+0x364>
			else // FOR intNum
				Local_enuErrorState = ES_OUT_OF_RANGE;
		}// End For Loop
	}// End IF ! NULL
	else
		Local_enuErrorState = ES_NULL_POINTER;
    281c:	83 e0       	ldi	r24, 0x03	; 3
    281e:	8a 83       	std	Y+2, r24	; 0x02
	return Local_enuErrorState;}
    2820:	8a 81       	ldd	r24, Y+2	; 0x02
    2822:	2a 96       	adiw	r28, 0x0a	; 10
    2824:	0f b6       	in	r0, 0x3f	; 63
    2826:	f8 94       	cli
    2828:	de bf       	out	0x3e, r29	; 62
    282a:	0f be       	out	0x3f, r0	; 63
    282c:	cd bf       	out	0x3d, r28	; 61
    282e:	cf 91       	pop	r28
    2830:	df 91       	pop	r29
    2832:	08 95       	ret

00002834 <EXTI_enuSetSenseLvl>:

ES_t EXTI_enuSetSenseLvl(EXTI_t * Copy_pstrEXTIConfig, u8 Copy_u8SenseLvl){
    2834:	df 93       	push	r29
    2836:	cf 93       	push	r28
    2838:	cd b7       	in	r28, 0x3d	; 61
    283a:	de b7       	in	r29, 0x3e	; 62
    283c:	2a 97       	sbiw	r28, 0x0a	; 10
    283e:	0f b6       	in	r0, 0x3f	; 63
    2840:	f8 94       	cli
    2842:	de bf       	out	0x3e, r29	; 62
    2844:	0f be       	out	0x3f, r0	; 63
    2846:	cd bf       	out	0x3d, r28	; 61
    2848:	9b 83       	std	Y+3, r25	; 0x03
    284a:	8a 83       	std	Y+2, r24	; 0x02
    284c:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    284e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pstrEXTIConfig != NULL){
    2850:	8a 81       	ldd	r24, Y+2	; 0x02
    2852:	9b 81       	ldd	r25, Y+3	; 0x03
    2854:	00 97       	sbiw	r24, 0x00	; 0
    2856:	09 f4       	brne	.+2      	; 0x285a <EXTI_enuSetSenseLvl+0x26>
    2858:	b9 c0       	rjmp	.+370    	; 0x29cc <EXTI_enuSetSenseLvl+0x198>
		if(Copy_pstrEXTIConfig->intNum == INT0_ID){
    285a:	ea 81       	ldd	r30, Y+2	; 0x02
    285c:	fb 81       	ldd	r31, Y+3	; 0x03
    285e:	82 81       	ldd	r24, Z+2	; 0x02
    2860:	88 23       	and	r24, r24
    2862:	09 f0       	breq	.+2      	; 0x2866 <EXTI_enuSetSenseLvl+0x32>
    2864:	42 c0       	rjmp	.+132    	; 0x28ea <EXTI_enuSetSenseLvl+0xb6>
			MCUCR &= ~(3<<0);
    2866:	a5 e5       	ldi	r26, 0x55	; 85
    2868:	b0 e0       	ldi	r27, 0x00	; 0
    286a:	e5 e5       	ldi	r30, 0x55	; 85
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	80 81       	ld	r24, Z
    2870:	8c 7f       	andi	r24, 0xFC	; 252
    2872:	8c 93       	st	X, r24
			switch(Copy_u8SenseLvl){
    2874:	8c 81       	ldd	r24, Y+4	; 0x04
    2876:	28 2f       	mov	r18, r24
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	3a 87       	std	Y+10, r19	; 0x0a
    287c:	29 87       	std	Y+9, r18	; 0x09
    287e:	89 85       	ldd	r24, Y+9	; 0x09
    2880:	9a 85       	ldd	r25, Y+10	; 0x0a
    2882:	8a 34       	cpi	r24, 0x4A	; 74
    2884:	91 05       	cpc	r25, r1
    2886:	b9 f0       	breq	.+46     	; 0x28b6 <EXTI_enuSetSenseLvl+0x82>
    2888:	29 85       	ldd	r18, Y+9	; 0x09
    288a:	3a 85       	ldd	r19, Y+10	; 0x0a
    288c:	2b 34       	cpi	r18, 0x4B	; 75
    288e:	31 05       	cpc	r19, r1
    2890:	64 f4       	brge	.+24     	; 0x28aa <EXTI_enuSetSenseLvl+0x76>
    2892:	89 85       	ldd	r24, Y+9	; 0x09
    2894:	9a 85       	ldd	r25, Y+10	; 0x0a
    2896:	8c 30       	cpi	r24, 0x0C	; 12
    2898:	91 05       	cpc	r25, r1
    289a:	e9 f0       	breq	.+58     	; 0x28d6 <EXTI_enuSetSenseLvl+0xa2>
    289c:	29 85       	ldd	r18, Y+9	; 0x09
    289e:	3a 85       	ldd	r19, Y+10	; 0x0a
    28a0:	2a 33       	cpi	r18, 0x3A	; 58
    28a2:	31 05       	cpc	r19, r1
    28a4:	09 f4       	brne	.+2      	; 0x28a8 <EXTI_enuSetSenseLvl+0x74>
    28a6:	94 c0       	rjmp	.+296    	; 0x29d0 <EXTI_enuSetSenseLvl+0x19c>
    28a8:	1e c0       	rjmp	.+60     	; 0x28e6 <EXTI_enuSetSenseLvl+0xb2>
    28aa:	89 85       	ldd	r24, Y+9	; 0x09
    28ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ae:	80 36       	cpi	r24, 0x60	; 96
    28b0:	91 05       	cpc	r25, r1
    28b2:	49 f0       	breq	.+18     	; 0x28c6 <EXTI_enuSetSenseLvl+0x92>
    28b4:	18 c0       	rjmp	.+48     	; 0x28e6 <EXTI_enuSetSenseLvl+0xb2>
			case LOW_LEVEL:
				break;
			case ANY_LOGIC:
				MCUCR |= (1<<0); break;
    28b6:	a5 e5       	ldi	r26, 0x55	; 85
    28b8:	b0 e0       	ldi	r27, 0x00	; 0
    28ba:	e5 e5       	ldi	r30, 0x55	; 85
    28bc:	f0 e0       	ldi	r31, 0x00	; 0
    28be:	80 81       	ld	r24, Z
    28c0:	81 60       	ori	r24, 0x01	; 1
    28c2:	8c 93       	st	X, r24
    28c4:	85 c0       	rjmp	.+266    	; 0x29d0 <EXTI_enuSetSenseLvl+0x19c>
			case FALLING:
				MCUCR |= (2<<0); break;
    28c6:	a5 e5       	ldi	r26, 0x55	; 85
    28c8:	b0 e0       	ldi	r27, 0x00	; 0
    28ca:	e5 e5       	ldi	r30, 0x55	; 85
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	80 81       	ld	r24, Z
    28d0:	82 60       	ori	r24, 0x02	; 2
    28d2:	8c 93       	st	X, r24
    28d4:	7d c0       	rjmp	.+250    	; 0x29d0 <EXTI_enuSetSenseLvl+0x19c>
			case RISING:
				MCUCR |= (3<<0); break;
    28d6:	a5 e5       	ldi	r26, 0x55	; 85
    28d8:	b0 e0       	ldi	r27, 0x00	; 0
    28da:	e5 e5       	ldi	r30, 0x55	; 85
    28dc:	f0 e0       	ldi	r31, 0x00	; 0
    28de:	80 81       	ld	r24, Z
    28e0:	83 60       	ori	r24, 0x03	; 3
    28e2:	8c 93       	st	X, r24
    28e4:	75 c0       	rjmp	.+234    	; 0x29d0 <EXTI_enuSetSenseLvl+0x19c>
			default:
				Local_enuErrorState = ES_NOK;}}
    28e6:	19 82       	std	Y+1, r1	; 0x01
    28e8:	73 c0       	rjmp	.+230    	; 0x29d0 <EXTI_enuSetSenseLvl+0x19c>
		else if(Copy_pstrEXTIConfig->intNum == INT1_ID){
    28ea:	ea 81       	ldd	r30, Y+2	; 0x02
    28ec:	fb 81       	ldd	r31, Y+3	; 0x03
    28ee:	82 81       	ldd	r24, Z+2	; 0x02
    28f0:	81 30       	cpi	r24, 0x01	; 1
    28f2:	09 f0       	breq	.+2      	; 0x28f6 <EXTI_enuSetSenseLvl+0xc2>
    28f4:	42 c0       	rjmp	.+132    	; 0x297a <EXTI_enuSetSenseLvl+0x146>
			MCUCR &= ~(3<<2);
    28f6:	a5 e5       	ldi	r26, 0x55	; 85
    28f8:	b0 e0       	ldi	r27, 0x00	; 0
    28fa:	e5 e5       	ldi	r30, 0x55	; 85
    28fc:	f0 e0       	ldi	r31, 0x00	; 0
    28fe:	80 81       	ld	r24, Z
    2900:	83 7f       	andi	r24, 0xF3	; 243
    2902:	8c 93       	st	X, r24
			switch(Copy_u8SenseLvl){
    2904:	8c 81       	ldd	r24, Y+4	; 0x04
    2906:	28 2f       	mov	r18, r24
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	38 87       	std	Y+8, r19	; 0x08
    290c:	2f 83       	std	Y+7, r18	; 0x07
    290e:	8f 81       	ldd	r24, Y+7	; 0x07
    2910:	98 85       	ldd	r25, Y+8	; 0x08
    2912:	8a 34       	cpi	r24, 0x4A	; 74
    2914:	91 05       	cpc	r25, r1
    2916:	b9 f0       	breq	.+46     	; 0x2946 <EXTI_enuSetSenseLvl+0x112>
    2918:	2f 81       	ldd	r18, Y+7	; 0x07
    291a:	38 85       	ldd	r19, Y+8	; 0x08
    291c:	2b 34       	cpi	r18, 0x4B	; 75
    291e:	31 05       	cpc	r19, r1
    2920:	64 f4       	brge	.+24     	; 0x293a <EXTI_enuSetSenseLvl+0x106>
    2922:	8f 81       	ldd	r24, Y+7	; 0x07
    2924:	98 85       	ldd	r25, Y+8	; 0x08
    2926:	8c 30       	cpi	r24, 0x0C	; 12
    2928:	91 05       	cpc	r25, r1
    292a:	e9 f0       	breq	.+58     	; 0x2966 <EXTI_enuSetSenseLvl+0x132>
    292c:	2f 81       	ldd	r18, Y+7	; 0x07
    292e:	38 85       	ldd	r19, Y+8	; 0x08
    2930:	2a 33       	cpi	r18, 0x3A	; 58
    2932:	31 05       	cpc	r19, r1
    2934:	09 f4       	brne	.+2      	; 0x2938 <EXTI_enuSetSenseLvl+0x104>
    2936:	4c c0       	rjmp	.+152    	; 0x29d0 <EXTI_enuSetSenseLvl+0x19c>
    2938:	1e c0       	rjmp	.+60     	; 0x2976 <EXTI_enuSetSenseLvl+0x142>
    293a:	8f 81       	ldd	r24, Y+7	; 0x07
    293c:	98 85       	ldd	r25, Y+8	; 0x08
    293e:	80 36       	cpi	r24, 0x60	; 96
    2940:	91 05       	cpc	r25, r1
    2942:	49 f0       	breq	.+18     	; 0x2956 <EXTI_enuSetSenseLvl+0x122>
    2944:	18 c0       	rjmp	.+48     	; 0x2976 <EXTI_enuSetSenseLvl+0x142>
			case LOW_LEVEL:
				break;
			case ANY_LOGIC:
				MCUCR |= (1<<2); break;
    2946:	a5 e5       	ldi	r26, 0x55	; 85
    2948:	b0 e0       	ldi	r27, 0x00	; 0
    294a:	e5 e5       	ldi	r30, 0x55	; 85
    294c:	f0 e0       	ldi	r31, 0x00	; 0
    294e:	80 81       	ld	r24, Z
    2950:	84 60       	ori	r24, 0x04	; 4
    2952:	8c 93       	st	X, r24
    2954:	3d c0       	rjmp	.+122    	; 0x29d0 <EXTI_enuSetSenseLvl+0x19c>
			case FALLING:
				MCUCR |= (2<<2); break;
    2956:	a5 e5       	ldi	r26, 0x55	; 85
    2958:	b0 e0       	ldi	r27, 0x00	; 0
    295a:	e5 e5       	ldi	r30, 0x55	; 85
    295c:	f0 e0       	ldi	r31, 0x00	; 0
    295e:	80 81       	ld	r24, Z
    2960:	88 60       	ori	r24, 0x08	; 8
    2962:	8c 93       	st	X, r24
    2964:	35 c0       	rjmp	.+106    	; 0x29d0 <EXTI_enuSetSenseLvl+0x19c>
			case RISING:
				MCUCR |= (3<<2); break;
    2966:	a5 e5       	ldi	r26, 0x55	; 85
    2968:	b0 e0       	ldi	r27, 0x00	; 0
    296a:	e5 e5       	ldi	r30, 0x55	; 85
    296c:	f0 e0       	ldi	r31, 0x00	; 0
    296e:	80 81       	ld	r24, Z
    2970:	8c 60       	ori	r24, 0x0C	; 12
    2972:	8c 93       	st	X, r24
    2974:	2d c0       	rjmp	.+90     	; 0x29d0 <EXTI_enuSetSenseLvl+0x19c>
			default:
				Local_enuErrorState = ES_NOK;}}
    2976:	19 82       	std	Y+1, r1	; 0x01
    2978:	2b c0       	rjmp	.+86     	; 0x29d0 <EXTI_enuSetSenseLvl+0x19c>
		else if(Copy_pstrEXTIConfig->intNum == INT2_ID){
    297a:	ea 81       	ldd	r30, Y+2	; 0x02
    297c:	fb 81       	ldd	r31, Y+3	; 0x03
    297e:	82 81       	ldd	r24, Z+2	; 0x02
    2980:	82 30       	cpi	r24, 0x02	; 2
    2982:	09 f5       	brne	.+66     	; 0x29c6 <EXTI_enuSetSenseLvl+0x192>
			switch(Copy_u8SenseLvl){
    2984:	8c 81       	ldd	r24, Y+4	; 0x04
    2986:	28 2f       	mov	r18, r24
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	3e 83       	std	Y+6, r19	; 0x06
    298c:	2d 83       	std	Y+5, r18	; 0x05
    298e:	8d 81       	ldd	r24, Y+5	; 0x05
    2990:	9e 81       	ldd	r25, Y+6	; 0x06
    2992:	8c 30       	cpi	r24, 0x0C	; 12
    2994:	91 05       	cpc	r25, r1
    2996:	69 f0       	breq	.+26     	; 0x29b2 <EXTI_enuSetSenseLvl+0x17e>
    2998:	2d 81       	ldd	r18, Y+5	; 0x05
    299a:	3e 81       	ldd	r19, Y+6	; 0x06
    299c:	20 36       	cpi	r18, 0x60	; 96
    299e:	31 05       	cpc	r19, r1
    29a0:	81 f4       	brne	.+32     	; 0x29c2 <EXTI_enuSetSenseLvl+0x18e>
			case FALLING:
				MCUCSR &= ~(1<<6); break;
    29a2:	a4 e5       	ldi	r26, 0x54	; 84
    29a4:	b0 e0       	ldi	r27, 0x00	; 0
    29a6:	e4 e5       	ldi	r30, 0x54	; 84
    29a8:	f0 e0       	ldi	r31, 0x00	; 0
    29aa:	80 81       	ld	r24, Z
    29ac:	8f 7b       	andi	r24, 0xBF	; 191
    29ae:	8c 93       	st	X, r24
    29b0:	0f c0       	rjmp	.+30     	; 0x29d0 <EXTI_enuSetSenseLvl+0x19c>
			case RISING:
				MCUCSR |= (1<<6); break;
    29b2:	a4 e5       	ldi	r26, 0x54	; 84
    29b4:	b0 e0       	ldi	r27, 0x00	; 0
    29b6:	e4 e5       	ldi	r30, 0x54	; 84
    29b8:	f0 e0       	ldi	r31, 0x00	; 0
    29ba:	80 81       	ld	r24, Z
    29bc:	80 64       	ori	r24, 0x40	; 64
    29be:	8c 93       	st	X, r24
    29c0:	07 c0       	rjmp	.+14     	; 0x29d0 <EXTI_enuSetSenseLvl+0x19c>
			default:
				Local_enuErrorState = ES_NOK;}
    29c2:	19 82       	std	Y+1, r1	; 0x01
    29c4:	05 c0       	rjmp	.+10     	; 0x29d0 <EXTI_enuSetSenseLvl+0x19c>
		}
		else
			Local_enuErrorState = ES_OUT_OF_RANGE;
    29c6:	82 e0       	ldi	r24, 0x02	; 2
    29c8:	89 83       	std	Y+1, r24	; 0x01
    29ca:	02 c0       	rjmp	.+4      	; 0x29d0 <EXTI_enuSetSenseLvl+0x19c>
	}
	else
		Local_enuErrorState = ES_NULL_POINTER;
    29cc:	83 e0       	ldi	r24, 0x03	; 3
    29ce:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;}
    29d0:	89 81       	ldd	r24, Y+1	; 0x01
    29d2:	2a 96       	adiw	r28, 0x0a	; 10
    29d4:	0f b6       	in	r0, 0x3f	; 63
    29d6:	f8 94       	cli
    29d8:	de bf       	out	0x3e, r29	; 62
    29da:	0f be       	out	0x3f, r0	; 63
    29dc:	cd bf       	out	0x3d, r28	; 61
    29de:	cf 91       	pop	r28
    29e0:	df 91       	pop	r29
    29e2:	08 95       	ret

000029e4 <EXTI_enuEnableINT>:

ES_t EXTI_enuEnableINT(EXTI_t * Copy_pstrEXTIConfig){
    29e4:	df 93       	push	r29
    29e6:	cf 93       	push	r28
    29e8:	00 d0       	rcall	.+0      	; 0x29ea <EXTI_enuEnableINT+0x6>
    29ea:	00 d0       	rcall	.+0      	; 0x29ec <EXTI_enuEnableINT+0x8>
    29ec:	0f 92       	push	r0
    29ee:	cd b7       	in	r28, 0x3d	; 61
    29f0:	de b7       	in	r29, 0x3e	; 62
    29f2:	9b 83       	std	Y+3, r25	; 0x03
    29f4:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    29f6:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pstrEXTIConfig != NULL){
    29f8:	8a 81       	ldd	r24, Y+2	; 0x02
    29fa:	9b 81       	ldd	r25, Y+3	; 0x03
    29fc:	00 97       	sbiw	r24, 0x00	; 0
    29fe:	79 f1       	breq	.+94     	; 0x2a5e <EXTI_enuEnableINT+0x7a>
		switch(Copy_pstrEXTIConfig->intNum){
    2a00:	ea 81       	ldd	r30, Y+2	; 0x02
    2a02:	fb 81       	ldd	r31, Y+3	; 0x03
    2a04:	82 81       	ldd	r24, Z+2	; 0x02
    2a06:	28 2f       	mov	r18, r24
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	3d 83       	std	Y+5, r19	; 0x05
    2a0c:	2c 83       	std	Y+4, r18	; 0x04
    2a0e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a10:	9d 81       	ldd	r25, Y+5	; 0x05
    2a12:	81 30       	cpi	r24, 0x01	; 1
    2a14:	91 05       	cpc	r25, r1
    2a16:	89 f0       	breq	.+34     	; 0x2a3a <EXTI_enuEnableINT+0x56>
    2a18:	2c 81       	ldd	r18, Y+4	; 0x04
    2a1a:	3d 81       	ldd	r19, Y+5	; 0x05
    2a1c:	22 30       	cpi	r18, 0x02	; 2
    2a1e:	31 05       	cpc	r19, r1
    2a20:	a1 f0       	breq	.+40     	; 0x2a4a <EXTI_enuEnableINT+0x66>
    2a22:	8c 81       	ldd	r24, Y+4	; 0x04
    2a24:	9d 81       	ldd	r25, Y+5	; 0x05
    2a26:	00 97       	sbiw	r24, 0x00	; 0
    2a28:	c1 f4       	brne	.+48     	; 0x2a5a <EXTI_enuEnableINT+0x76>
		case(INT0_ID):
				GICR |= (1<<GICR_INT0); break;
    2a2a:	ab e5       	ldi	r26, 0x5B	; 91
    2a2c:	b0 e0       	ldi	r27, 0x00	; 0
    2a2e:	eb e5       	ldi	r30, 0x5B	; 91
    2a30:	f0 e0       	ldi	r31, 0x00	; 0
    2a32:	80 81       	ld	r24, Z
    2a34:	80 64       	ori	r24, 0x40	; 64
    2a36:	8c 93       	st	X, r24
    2a38:	14 c0       	rjmp	.+40     	; 0x2a62 <EXTI_enuEnableINT+0x7e>
		case(INT1_ID):
				GICR |= (1<<GICR_INT1); break;
    2a3a:	ab e5       	ldi	r26, 0x5B	; 91
    2a3c:	b0 e0       	ldi	r27, 0x00	; 0
    2a3e:	eb e5       	ldi	r30, 0x5B	; 91
    2a40:	f0 e0       	ldi	r31, 0x00	; 0
    2a42:	80 81       	ld	r24, Z
    2a44:	80 68       	ori	r24, 0x80	; 128
    2a46:	8c 93       	st	X, r24
    2a48:	0c c0       	rjmp	.+24     	; 0x2a62 <EXTI_enuEnableINT+0x7e>
		case(INT2_ID):
				GICR |= (1<<GICR_INT2); break;
    2a4a:	ab e5       	ldi	r26, 0x5B	; 91
    2a4c:	b0 e0       	ldi	r27, 0x00	; 0
    2a4e:	eb e5       	ldi	r30, 0x5B	; 91
    2a50:	f0 e0       	ldi	r31, 0x00	; 0
    2a52:	80 81       	ld	r24, Z
    2a54:	80 62       	ori	r24, 0x20	; 32
    2a56:	8c 93       	st	X, r24
    2a58:	04 c0       	rjmp	.+8      	; 0x2a62 <EXTI_enuEnableINT+0x7e>
		default:
			Local_enuErrorState = ES_NOK;}
    2a5a:	19 82       	std	Y+1, r1	; 0x01
    2a5c:	02 c0       	rjmp	.+4      	; 0x2a62 <EXTI_enuEnableINT+0x7e>
	}
	else
		Local_enuErrorState = ES_NULL_POINTER;
    2a5e:	83 e0       	ldi	r24, 0x03	; 3
    2a60:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    2a62:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a64:	0f 90       	pop	r0
    2a66:	0f 90       	pop	r0
    2a68:	0f 90       	pop	r0
    2a6a:	0f 90       	pop	r0
    2a6c:	0f 90       	pop	r0
    2a6e:	cf 91       	pop	r28
    2a70:	df 91       	pop	r29
    2a72:	08 95       	ret

00002a74 <EXTI_enuDisableINT>:

ES_t EXTI_enuDisableINT(EXTI_t * Copy_pstrEXTIConfig){
    2a74:	df 93       	push	r29
    2a76:	cf 93       	push	r28
    2a78:	00 d0       	rcall	.+0      	; 0x2a7a <EXTI_enuDisableINT+0x6>
    2a7a:	00 d0       	rcall	.+0      	; 0x2a7c <EXTI_enuDisableINT+0x8>
    2a7c:	0f 92       	push	r0
    2a7e:	cd b7       	in	r28, 0x3d	; 61
    2a80:	de b7       	in	r29, 0x3e	; 62
    2a82:	9b 83       	std	Y+3, r25	; 0x03
    2a84:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2a86:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pstrEXTIConfig != NULL){
    2a88:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a8c:	00 97       	sbiw	r24, 0x00	; 0
    2a8e:	79 f1       	breq	.+94     	; 0x2aee <EXTI_enuDisableINT+0x7a>
		switch(Copy_pstrEXTIConfig->intNum){
    2a90:	ea 81       	ldd	r30, Y+2	; 0x02
    2a92:	fb 81       	ldd	r31, Y+3	; 0x03
    2a94:	82 81       	ldd	r24, Z+2	; 0x02
    2a96:	28 2f       	mov	r18, r24
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	3d 83       	std	Y+5, r19	; 0x05
    2a9c:	2c 83       	std	Y+4, r18	; 0x04
    2a9e:	8c 81       	ldd	r24, Y+4	; 0x04
    2aa0:	9d 81       	ldd	r25, Y+5	; 0x05
    2aa2:	81 30       	cpi	r24, 0x01	; 1
    2aa4:	91 05       	cpc	r25, r1
    2aa6:	89 f0       	breq	.+34     	; 0x2aca <EXTI_enuDisableINT+0x56>
    2aa8:	2c 81       	ldd	r18, Y+4	; 0x04
    2aaa:	3d 81       	ldd	r19, Y+5	; 0x05
    2aac:	22 30       	cpi	r18, 0x02	; 2
    2aae:	31 05       	cpc	r19, r1
    2ab0:	a1 f0       	breq	.+40     	; 0x2ada <EXTI_enuDisableINT+0x66>
    2ab2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ab4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ab6:	00 97       	sbiw	r24, 0x00	; 0
    2ab8:	c1 f4       	brne	.+48     	; 0x2aea <EXTI_enuDisableINT+0x76>
		case(INT0_ID):
				GICR &= ~(1<<GICR_INT0); break;
    2aba:	ab e5       	ldi	r26, 0x5B	; 91
    2abc:	b0 e0       	ldi	r27, 0x00	; 0
    2abe:	eb e5       	ldi	r30, 0x5B	; 91
    2ac0:	f0 e0       	ldi	r31, 0x00	; 0
    2ac2:	80 81       	ld	r24, Z
    2ac4:	8f 7b       	andi	r24, 0xBF	; 191
    2ac6:	8c 93       	st	X, r24
    2ac8:	14 c0       	rjmp	.+40     	; 0x2af2 <EXTI_enuDisableINT+0x7e>
		case(INT1_ID):
				GICR &= ~(1<<GICR_INT1); break;
    2aca:	ab e5       	ldi	r26, 0x5B	; 91
    2acc:	b0 e0       	ldi	r27, 0x00	; 0
    2ace:	eb e5       	ldi	r30, 0x5B	; 91
    2ad0:	f0 e0       	ldi	r31, 0x00	; 0
    2ad2:	80 81       	ld	r24, Z
    2ad4:	8f 77       	andi	r24, 0x7F	; 127
    2ad6:	8c 93       	st	X, r24
    2ad8:	0c c0       	rjmp	.+24     	; 0x2af2 <EXTI_enuDisableINT+0x7e>
		case(INT2_ID):
				GICR &= ~(1<<GICR_INT2); break;
    2ada:	ab e5       	ldi	r26, 0x5B	; 91
    2adc:	b0 e0       	ldi	r27, 0x00	; 0
    2ade:	eb e5       	ldi	r30, 0x5B	; 91
    2ae0:	f0 e0       	ldi	r31, 0x00	; 0
    2ae2:	80 81       	ld	r24, Z
    2ae4:	8f 7d       	andi	r24, 0xDF	; 223
    2ae6:	8c 93       	st	X, r24
    2ae8:	04 c0       	rjmp	.+8      	; 0x2af2 <EXTI_enuDisableINT+0x7e>
		default:
			Local_enuErrorState = ES_NOK;}
    2aea:	19 82       	std	Y+1, r1	; 0x01
    2aec:	02 c0       	rjmp	.+4      	; 0x2af2 <EXTI_enuDisableINT+0x7e>
	}
	else
		Local_enuErrorState = ES_NULL_POINTER;
    2aee:	83 e0       	ldi	r24, 0x03	; 3
    2af0:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    2af2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2af4:	0f 90       	pop	r0
    2af6:	0f 90       	pop	r0
    2af8:	0f 90       	pop	r0
    2afa:	0f 90       	pop	r0
    2afc:	0f 90       	pop	r0
    2afe:	cf 91       	pop	r28
    2b00:	df 91       	pop	r29
    2b02:	08 95       	ret

00002b04 <EXTI_enuCallBack>:

ES_t EXTI_enuCallBack(EXTI_t * Copy_pstrEXTIConfig, void (*Copy_pfunAppFun)(void*), void * Copy_pvidAppParameter)
{
    2b04:	df 93       	push	r29
    2b06:	cf 93       	push	r28
    2b08:	cd b7       	in	r28, 0x3d	; 61
    2b0a:	de b7       	in	r29, 0x3e	; 62
    2b0c:	27 97       	sbiw	r28, 0x07	; 7
    2b0e:	0f b6       	in	r0, 0x3f	; 63
    2b10:	f8 94       	cli
    2b12:	de bf       	out	0x3e, r29	; 62
    2b14:	0f be       	out	0x3f, r0	; 63
    2b16:	cd bf       	out	0x3d, r28	; 61
    2b18:	9b 83       	std	Y+3, r25	; 0x03
    2b1a:	8a 83       	std	Y+2, r24	; 0x02
    2b1c:	7d 83       	std	Y+5, r23	; 0x05
    2b1e:	6c 83       	std	Y+4, r22	; 0x04
    2b20:	5f 83       	std	Y+7, r21	; 0x07
    2b22:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorState = ES_NOK;
    2b24:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pstrEXTIConfig != NULL && Copy_pfunAppFun != NULL)
    2b26:	8a 81       	ldd	r24, Y+2	; 0x02
    2b28:	9b 81       	ldd	r25, Y+3	; 0x03
    2b2a:	00 97       	sbiw	r24, 0x00	; 0
    2b2c:	01 f1       	breq	.+64     	; 0x2b6e <EXTI_enuCallBack+0x6a>
    2b2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b30:	9d 81       	ldd	r25, Y+5	; 0x05
    2b32:	00 97       	sbiw	r24, 0x00	; 0
    2b34:	e1 f0       	breq	.+56     	; 0x2b6e <EXTI_enuCallBack+0x6a>
	{
		EXTI_ApfunISRFun[ Copy_pstrEXTIConfig->intNum ] = Copy_pfunAppFun;
    2b36:	ea 81       	ldd	r30, Y+2	; 0x02
    2b38:	fb 81       	ldd	r31, Y+3	; 0x03
    2b3a:	82 81       	ldd	r24, Z+2	; 0x02
    2b3c:	88 2f       	mov	r24, r24
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	88 0f       	add	r24, r24
    2b42:	99 1f       	adc	r25, r25
    2b44:	fc 01       	movw	r30, r24
    2b46:	ec 52       	subi	r30, 0x2C	; 44
    2b48:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b4c:	9d 81       	ldd	r25, Y+5	; 0x05
    2b4e:	91 83       	std	Z+1, r25	; 0x01
    2b50:	80 83       	st	Z, r24
		EXTI_ApvidISRParameter [ Copy_pstrEXTIConfig->intNum ] = Copy_pvidAppParameter;
    2b52:	ea 81       	ldd	r30, Y+2	; 0x02
    2b54:	fb 81       	ldd	r31, Y+3	; 0x03
    2b56:	82 81       	ldd	r24, Z+2	; 0x02
    2b58:	88 2f       	mov	r24, r24
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	88 0f       	add	r24, r24
    2b5e:	99 1f       	adc	r25, r25
    2b60:	fc 01       	movw	r30, r24
    2b62:	e6 52       	subi	r30, 0x26	; 38
    2b64:	ff 4f       	sbci	r31, 0xFF	; 255
    2b66:	8e 81       	ldd	r24, Y+6	; 0x06
    2b68:	9f 81       	ldd	r25, Y+7	; 0x07
    2b6a:	91 83       	std	Z+1, r25	; 0x01
    2b6c:	80 83       	st	Z, r24
	}

	return Local_enuErrorState;
    2b6e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b70:	27 96       	adiw	r28, 0x07	; 7
    2b72:	0f b6       	in	r0, 0x3f	; 63
    2b74:	f8 94       	cli
    2b76:	de bf       	out	0x3e, r29	; 62
    2b78:	0f be       	out	0x3f, r0	; 63
    2b7a:	cd bf       	out	0x3d, r28	; 61
    2b7c:	cf 91       	pop	r28
    2b7e:	df 91       	pop	r29
    2b80:	08 95       	ret

00002b82 <__vector_1>:
void __vector_1 (void)__attribute__((signal));
void __vector_2 (void)__attribute__((signal));
void __vector_3 (void)__attribute__((signal));

void __vector_1 (void)
{
    2b82:	1f 92       	push	r1
    2b84:	0f 92       	push	r0
    2b86:	0f b6       	in	r0, 0x3f	; 63
    2b88:	0f 92       	push	r0
    2b8a:	11 24       	eor	r1, r1
    2b8c:	2f 93       	push	r18
    2b8e:	3f 93       	push	r19
    2b90:	4f 93       	push	r20
    2b92:	5f 93       	push	r21
    2b94:	6f 93       	push	r22
    2b96:	7f 93       	push	r23
    2b98:	8f 93       	push	r24
    2b9a:	9f 93       	push	r25
    2b9c:	af 93       	push	r26
    2b9e:	bf 93       	push	r27
    2ba0:	ef 93       	push	r30
    2ba2:	ff 93       	push	r31
    2ba4:	df 93       	push	r29
    2ba6:	cf 93       	push	r28
    2ba8:	cd b7       	in	r28, 0x3d	; 61
    2baa:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_ApfunISRFun[0] != NULL)
    2bac:	80 91 d4 00 	lds	r24, 0x00D4
    2bb0:	90 91 d5 00 	lds	r25, 0x00D5
    2bb4:	00 97       	sbiw	r24, 0x00	; 0
    2bb6:	49 f0       	breq	.+18     	; 0x2bca <__vector_1+0x48>
	{
		EXTI_ApfunISRFun[0] ( EXTI_ApvidISRParameter[0] );
    2bb8:	e0 91 d4 00 	lds	r30, 0x00D4
    2bbc:	f0 91 d5 00 	lds	r31, 0x00D5
    2bc0:	80 91 da 00 	lds	r24, 0x00DA
    2bc4:	90 91 db 00 	lds	r25, 0x00DB
    2bc8:	09 95       	icall
	}
}
    2bca:	cf 91       	pop	r28
    2bcc:	df 91       	pop	r29
    2bce:	ff 91       	pop	r31
    2bd0:	ef 91       	pop	r30
    2bd2:	bf 91       	pop	r27
    2bd4:	af 91       	pop	r26
    2bd6:	9f 91       	pop	r25
    2bd8:	8f 91       	pop	r24
    2bda:	7f 91       	pop	r23
    2bdc:	6f 91       	pop	r22
    2bde:	5f 91       	pop	r21
    2be0:	4f 91       	pop	r20
    2be2:	3f 91       	pop	r19
    2be4:	2f 91       	pop	r18
    2be6:	0f 90       	pop	r0
    2be8:	0f be       	out	0x3f, r0	; 63
    2bea:	0f 90       	pop	r0
    2bec:	1f 90       	pop	r1
    2bee:	18 95       	reti

00002bf0 <__vector_2>:

void __vector_2 (void)
{
    2bf0:	1f 92       	push	r1
    2bf2:	0f 92       	push	r0
    2bf4:	0f b6       	in	r0, 0x3f	; 63
    2bf6:	0f 92       	push	r0
    2bf8:	11 24       	eor	r1, r1
    2bfa:	2f 93       	push	r18
    2bfc:	3f 93       	push	r19
    2bfe:	4f 93       	push	r20
    2c00:	5f 93       	push	r21
    2c02:	6f 93       	push	r22
    2c04:	7f 93       	push	r23
    2c06:	8f 93       	push	r24
    2c08:	9f 93       	push	r25
    2c0a:	af 93       	push	r26
    2c0c:	bf 93       	push	r27
    2c0e:	ef 93       	push	r30
    2c10:	ff 93       	push	r31
    2c12:	df 93       	push	r29
    2c14:	cf 93       	push	r28
    2c16:	cd b7       	in	r28, 0x3d	; 61
    2c18:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_ApfunISRFun[1] != NULL)
    2c1a:	80 91 d6 00 	lds	r24, 0x00D6
    2c1e:	90 91 d7 00 	lds	r25, 0x00D7
    2c22:	00 97       	sbiw	r24, 0x00	; 0
    2c24:	49 f0       	breq	.+18     	; 0x2c38 <__vector_2+0x48>
	{
		EXTI_ApfunISRFun[1] ( EXTI_ApvidISRParameter[1] );
    2c26:	e0 91 d6 00 	lds	r30, 0x00D6
    2c2a:	f0 91 d7 00 	lds	r31, 0x00D7
    2c2e:	80 91 dc 00 	lds	r24, 0x00DC
    2c32:	90 91 dd 00 	lds	r25, 0x00DD
    2c36:	09 95       	icall
	}
}
    2c38:	cf 91       	pop	r28
    2c3a:	df 91       	pop	r29
    2c3c:	ff 91       	pop	r31
    2c3e:	ef 91       	pop	r30
    2c40:	bf 91       	pop	r27
    2c42:	af 91       	pop	r26
    2c44:	9f 91       	pop	r25
    2c46:	8f 91       	pop	r24
    2c48:	7f 91       	pop	r23
    2c4a:	6f 91       	pop	r22
    2c4c:	5f 91       	pop	r21
    2c4e:	4f 91       	pop	r20
    2c50:	3f 91       	pop	r19
    2c52:	2f 91       	pop	r18
    2c54:	0f 90       	pop	r0
    2c56:	0f be       	out	0x3f, r0	; 63
    2c58:	0f 90       	pop	r0
    2c5a:	1f 90       	pop	r1
    2c5c:	18 95       	reti

00002c5e <__vector_3>:

void __vector_3 (void)
{
    2c5e:	1f 92       	push	r1
    2c60:	0f 92       	push	r0
    2c62:	0f b6       	in	r0, 0x3f	; 63
    2c64:	0f 92       	push	r0
    2c66:	11 24       	eor	r1, r1
    2c68:	2f 93       	push	r18
    2c6a:	3f 93       	push	r19
    2c6c:	4f 93       	push	r20
    2c6e:	5f 93       	push	r21
    2c70:	6f 93       	push	r22
    2c72:	7f 93       	push	r23
    2c74:	8f 93       	push	r24
    2c76:	9f 93       	push	r25
    2c78:	af 93       	push	r26
    2c7a:	bf 93       	push	r27
    2c7c:	ef 93       	push	r30
    2c7e:	ff 93       	push	r31
    2c80:	df 93       	push	r29
    2c82:	cf 93       	push	r28
    2c84:	cd b7       	in	r28, 0x3d	; 61
    2c86:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_ApfunISRFun[2] != NULL)
    2c88:	80 91 d8 00 	lds	r24, 0x00D8
    2c8c:	90 91 d9 00 	lds	r25, 0x00D9
    2c90:	00 97       	sbiw	r24, 0x00	; 0
    2c92:	49 f0       	breq	.+18     	; 0x2ca6 <__vector_3+0x48>
	{
		EXTI_ApfunISRFun[2] ( EXTI_ApvidISRParameter[2] );
    2c94:	e0 91 d8 00 	lds	r30, 0x00D8
    2c98:	f0 91 d9 00 	lds	r31, 0x00D9
    2c9c:	80 91 de 00 	lds	r24, 0x00DE
    2ca0:	90 91 df 00 	lds	r25, 0x00DF
    2ca4:	09 95       	icall
	}
}
    2ca6:	cf 91       	pop	r28
    2ca8:	df 91       	pop	r29
    2caa:	ff 91       	pop	r31
    2cac:	ef 91       	pop	r30
    2cae:	bf 91       	pop	r27
    2cb0:	af 91       	pop	r26
    2cb2:	9f 91       	pop	r25
    2cb4:	8f 91       	pop	r24
    2cb6:	7f 91       	pop	r23
    2cb8:	6f 91       	pop	r22
    2cba:	5f 91       	pop	r21
    2cbc:	4f 91       	pop	r20
    2cbe:	3f 91       	pop	r19
    2cc0:	2f 91       	pop	r18
    2cc2:	0f 90       	pop	r0
    2cc4:	0f be       	out	0x3f, r0	; 63
    2cc6:	0f 90       	pop	r0
    2cc8:	1f 90       	pop	r1
    2cca:	18 95       	reti

00002ccc <DIO_enuInit>:

#include "DIO_priv.h"
#include "DIO_config.h"

ES_t DIO_enuInit(void)
{
    2ccc:	df 93       	push	r29
    2cce:	cf 93       	push	r28
    2cd0:	0f 92       	push	r0
    2cd2:	cd b7       	in	r28, 0x3d	; 61
    2cd4:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    2cd6:	19 82       	std	Y+1, r1	; 0x01

	DDRA=CONC(DIO_u8PA7_DIR,DIO_u8PA6_DIR,DIO_u8PA5_DIR,DIO_u8PA4_DIR,DIO_u8PA3_DIR,DIO_u8PA2_DIR,DIO_u8PA1_DIR,DIO_u8PA0_DIR);
    2cd8:	ea e3       	ldi	r30, 0x3A	; 58
    2cda:	f0 e0       	ldi	r31, 0x00	; 0
    2cdc:	80 ea       	ldi	r24, 0xA0	; 160
    2cde:	80 83       	st	Z, r24
	PORTA=CONC(DIO_u8PA7_VALUE,DIO_u8PA6_VALUE,DIO_u8PA5_VALUE,DIO_u8PA4_VALUE,DIO_u8PA3_VALUE,DIO_u8PA2_VALUE,DIO_u8PA1_VALUE,DIO_u8PA0_VALUE);
    2ce0:	eb e3       	ldi	r30, 0x3B	; 59
    2ce2:	f0 e0       	ldi	r31, 0x00	; 0
    2ce4:	80 e1       	ldi	r24, 0x10	; 16
    2ce6:	80 83       	st	Z, r24

	DDRB=CONC(DIO_u8PB7_DIR,DIO_u8PB6_DIR,DIO_u8PB5_DIR,DIO_u8PB4_DIR,DIO_u8PB3_DIR,DIO_u8PB2_DIR,DIO_u8PB1_DIR,DIO_u8PB0_DIR);
    2ce8:	e7 e3       	ldi	r30, 0x37	; 55
    2cea:	f0 e0       	ldi	r31, 0x00	; 0
    2cec:	10 82       	st	Z, r1
	PORTB=CONC(DIO_u8PB7_VALUE,DIO_u8PB6_VALUE,DIO_u8PB5_VALUE,DIO_u8PB4_VALUE,DIO_u8PB3_VALUE,DIO_u8PB2_VALUE,DIO_u8PB1_VALUE,DIO_u8PB0_VALUE);
    2cee:	e8 e3       	ldi	r30, 0x38	; 56
    2cf0:	f0 e0       	ldi	r31, 0x00	; 0
    2cf2:	10 82       	st	Z, r1

	DDRC=CONC(DIO_u8PC7_DIR,DIO_u8PC6_DIR,DIO_u8PC5_DIR,DIO_u8PC4_DIR,DIO_u8PC3_DIR,DIO_u8PC2_DIR,DIO_u8PC1_DIR,DIO_u8PC0_DIR);
    2cf4:	e4 e3       	ldi	r30, 0x34	; 52
    2cf6:	f0 e0       	ldi	r31, 0x00	; 0
    2cf8:	84 e8       	ldi	r24, 0x84	; 132
    2cfa:	80 83       	st	Z, r24
	PORTC=CONC(DIO_u8PC7_VALUE,DIO_u8PC6_VALUE,DIO_u8PC5_VALUE,DIO_u8PC4_VALUE,DIO_u8PC3_VALUE,DIO_u8PC2_VALUE,DIO_u8PC1_VALUE,DIO_u8PC0_VALUE);
    2cfc:	e5 e3       	ldi	r30, 0x35	; 53
    2cfe:	f0 e0       	ldi	r31, 0x00	; 0
    2d00:	10 82       	st	Z, r1

	DDRD=CONC(DIO_u8PD7_DIR,DIO_u8PD6_DIR,DIO_u8PD5_DIR,DIO_u8PD4_DIR,DIO_u8PD3_DIR,DIO_u8PD2_DIR,DIO_u8PD1_DIR,DIO_u8PD0_DIR);
    2d02:	e1 e3       	ldi	r30, 0x31	; 49
    2d04:	f0 e0       	ldi	r31, 0x00	; 0
    2d06:	88 e0       	ldi	r24, 0x08	; 8
    2d08:	80 83       	st	Z, r24
	PORTD=CONC(DIO_u8PD7_VALUE,DIO_u8PD6_VALUE,DIO_u8PD5_VALUE,DIO_u8PD4_VALUE,DIO_u8PD3_VALUE,DIO_u8PD2_VALUE,DIO_u8PD1_VALUE,DIO_u8PD0_VALUE);
    2d0a:	e2 e3       	ldi	r30, 0x32	; 50
    2d0c:	f0 e0       	ldi	r31, 0x00	; 0
    2d0e:	10 82       	st	Z, r1

	return Local_enuErrorState;
    2d10:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d12:	0f 90       	pop	r0
    2d14:	cf 91       	pop	r28
    2d16:	df 91       	pop	r29
    2d18:	08 95       	ret

00002d1a <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8Direction)
{
    2d1a:	df 93       	push	r29
    2d1c:	cf 93       	push	r28
    2d1e:	00 d0       	rcall	.+0      	; 0x2d20 <DIO_enuSetPinDirection+0x6>
    2d20:	00 d0       	rcall	.+0      	; 0x2d22 <DIO_enuSetPinDirection+0x8>
    2d22:	00 d0       	rcall	.+0      	; 0x2d24 <DIO_enuSetPinDirection+0xa>
    2d24:	cd b7       	in	r28, 0x3d	; 61
    2d26:	de b7       	in	r29, 0x3e	; 62
    2d28:	8a 83       	std	Y+2, r24	; 0x02
    2d2a:	6b 83       	std	Y+3, r22	; 0x03
    2d2c:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    2d2e:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_u8GROUP_D
    2d30:	8a 81       	ldd	r24, Y+2	; 0x02
    2d32:	84 30       	cpi	r24, 0x04	; 4
    2d34:	08 f0       	brcs	.+2      	; 0x2d38 <DIO_enuSetPinDirection+0x1e>
    2d36:	d1 c0       	rjmp	.+418    	; 0x2eda <DIO_enuSetPinDirection+0x1c0>
    2d38:	8b 81       	ldd	r24, Y+3	; 0x03
    2d3a:	88 30       	cpi	r24, 0x08	; 8
    2d3c:	08 f0       	brcs	.+2      	; 0x2d40 <DIO_enuSetPinDirection+0x26>
    2d3e:	cd c0       	rjmp	.+410    	; 0x2eda <DIO_enuSetPinDirection+0x1c0>
    2d40:	8c 81       	ldd	r24, Y+4	; 0x04
    2d42:	82 30       	cpi	r24, 0x02	; 2
    2d44:	08 f0       	brcs	.+2      	; 0x2d48 <DIO_enuSetPinDirection+0x2e>
    2d46:	c9 c0       	rjmp	.+402    	; 0x2eda <DIO_enuSetPinDirection+0x1c0>
			&& Copy_u8PinID <= DIO_u8PIN7
			&& Copy_u8Direction <= DIO_u8OUTPUT)
	{
		switch (Copy_u8PortID)
    2d48:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4a:	28 2f       	mov	r18, r24
    2d4c:	30 e0       	ldi	r19, 0x00	; 0
    2d4e:	3e 83       	std	Y+6, r19	; 0x06
    2d50:	2d 83       	std	Y+5, r18	; 0x05
    2d52:	6d 81       	ldd	r22, Y+5	; 0x05
    2d54:	7e 81       	ldd	r23, Y+6	; 0x06
    2d56:	61 30       	cpi	r22, 0x01	; 1
    2d58:	71 05       	cpc	r23, r1
    2d5a:	09 f4       	brne	.+2      	; 0x2d5e <DIO_enuSetPinDirection+0x44>
    2d5c:	41 c0       	rjmp	.+130    	; 0x2de0 <DIO_enuSetPinDirection+0xc6>
    2d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d60:	9e 81       	ldd	r25, Y+6	; 0x06
    2d62:	82 30       	cpi	r24, 0x02	; 2
    2d64:	91 05       	cpc	r25, r1
    2d66:	34 f4       	brge	.+12     	; 0x2d74 <DIO_enuSetPinDirection+0x5a>
    2d68:	2d 81       	ldd	r18, Y+5	; 0x05
    2d6a:	3e 81       	ldd	r19, Y+6	; 0x06
    2d6c:	21 15       	cp	r18, r1
    2d6e:	31 05       	cpc	r19, r1
    2d70:	71 f0       	breq	.+28     	; 0x2d8e <DIO_enuSetPinDirection+0x74>
    2d72:	b0 c0       	rjmp	.+352    	; 0x2ed4 <DIO_enuSetPinDirection+0x1ba>
    2d74:	6d 81       	ldd	r22, Y+5	; 0x05
    2d76:	7e 81       	ldd	r23, Y+6	; 0x06
    2d78:	62 30       	cpi	r22, 0x02	; 2
    2d7a:	71 05       	cpc	r23, r1
    2d7c:	09 f4       	brne	.+2      	; 0x2d80 <DIO_enuSetPinDirection+0x66>
    2d7e:	59 c0       	rjmp	.+178    	; 0x2e32 <DIO_enuSetPinDirection+0x118>
    2d80:	8d 81       	ldd	r24, Y+5	; 0x05
    2d82:	9e 81       	ldd	r25, Y+6	; 0x06
    2d84:	83 30       	cpi	r24, 0x03	; 3
    2d86:	91 05       	cpc	r25, r1
    2d88:	09 f4       	brne	.+2      	; 0x2d8c <DIO_enuSetPinDirection+0x72>
    2d8a:	7c c0       	rjmp	.+248    	; 0x2e84 <DIO_enuSetPinDirection+0x16a>
    2d8c:	a3 c0       	rjmp	.+326    	; 0x2ed4 <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_u8GROUP_A:

			DDRA &=~(DIO_MASK_BIT<<Copy_u8PinID);
    2d8e:	aa e3       	ldi	r26, 0x3A	; 58
    2d90:	b0 e0       	ldi	r27, 0x00	; 0
    2d92:	ea e3       	ldi	r30, 0x3A	; 58
    2d94:	f0 e0       	ldi	r31, 0x00	; 0
    2d96:	80 81       	ld	r24, Z
    2d98:	48 2f       	mov	r20, r24
    2d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9c:	28 2f       	mov	r18, r24
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	81 e0       	ldi	r24, 0x01	; 1
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	02 c0       	rjmp	.+4      	; 0x2daa <DIO_enuSetPinDirection+0x90>
    2da6:	88 0f       	add	r24, r24
    2da8:	99 1f       	adc	r25, r25
    2daa:	2a 95       	dec	r18
    2dac:	e2 f7       	brpl	.-8      	; 0x2da6 <DIO_enuSetPinDirection+0x8c>
    2dae:	80 95       	com	r24
    2db0:	84 23       	and	r24, r20
    2db2:	8c 93       	st	X, r24
			DDRA |= (Copy_u8Direction<<Copy_u8PinID);
    2db4:	aa e3       	ldi	r26, 0x3A	; 58
    2db6:	b0 e0       	ldi	r27, 0x00	; 0
    2db8:	ea e3       	ldi	r30, 0x3A	; 58
    2dba:	f0 e0       	ldi	r31, 0x00	; 0
    2dbc:	80 81       	ld	r24, Z
    2dbe:	48 2f       	mov	r20, r24
    2dc0:	8c 81       	ldd	r24, Y+4	; 0x04
    2dc2:	28 2f       	mov	r18, r24
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc8:	88 2f       	mov	r24, r24
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	b9 01       	movw	r22, r18
    2dce:	02 c0       	rjmp	.+4      	; 0x2dd4 <DIO_enuSetPinDirection+0xba>
    2dd0:	66 0f       	add	r22, r22
    2dd2:	77 1f       	adc	r23, r23
    2dd4:	8a 95       	dec	r24
    2dd6:	e2 f7       	brpl	.-8      	; 0x2dd0 <DIO_enuSetPinDirection+0xb6>
    2dd8:	cb 01       	movw	r24, r22
    2dda:	84 2b       	or	r24, r20
    2ddc:	8c 93       	st	X, r24
    2dde:	7a c0       	rjmp	.+244    	; 0x2ed4 <DIO_enuSetPinDirection+0x1ba>

			break;
		case DIO_u8GROUP_B:

			DDRB &=~(DIO_MASK_BIT<<Copy_u8PinID);
    2de0:	a7 e3       	ldi	r26, 0x37	; 55
    2de2:	b0 e0       	ldi	r27, 0x00	; 0
    2de4:	e7 e3       	ldi	r30, 0x37	; 55
    2de6:	f0 e0       	ldi	r31, 0x00	; 0
    2de8:	80 81       	ld	r24, Z
    2dea:	48 2f       	mov	r20, r24
    2dec:	8b 81       	ldd	r24, Y+3	; 0x03
    2dee:	28 2f       	mov	r18, r24
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	81 e0       	ldi	r24, 0x01	; 1
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	02 c0       	rjmp	.+4      	; 0x2dfc <DIO_enuSetPinDirection+0xe2>
    2df8:	88 0f       	add	r24, r24
    2dfa:	99 1f       	adc	r25, r25
    2dfc:	2a 95       	dec	r18
    2dfe:	e2 f7       	brpl	.-8      	; 0x2df8 <DIO_enuSetPinDirection+0xde>
    2e00:	80 95       	com	r24
    2e02:	84 23       	and	r24, r20
    2e04:	8c 93       	st	X, r24
			DDRB |= (Copy_u8Direction<<Copy_u8PinID);
    2e06:	a7 e3       	ldi	r26, 0x37	; 55
    2e08:	b0 e0       	ldi	r27, 0x00	; 0
    2e0a:	e7 e3       	ldi	r30, 0x37	; 55
    2e0c:	f0 e0       	ldi	r31, 0x00	; 0
    2e0e:	80 81       	ld	r24, Z
    2e10:	48 2f       	mov	r20, r24
    2e12:	8c 81       	ldd	r24, Y+4	; 0x04
    2e14:	28 2f       	mov	r18, r24
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	8b 81       	ldd	r24, Y+3	; 0x03
    2e1a:	88 2f       	mov	r24, r24
    2e1c:	90 e0       	ldi	r25, 0x00	; 0
    2e1e:	b9 01       	movw	r22, r18
    2e20:	02 c0       	rjmp	.+4      	; 0x2e26 <DIO_enuSetPinDirection+0x10c>
    2e22:	66 0f       	add	r22, r22
    2e24:	77 1f       	adc	r23, r23
    2e26:	8a 95       	dec	r24
    2e28:	e2 f7       	brpl	.-8      	; 0x2e22 <DIO_enuSetPinDirection+0x108>
    2e2a:	cb 01       	movw	r24, r22
    2e2c:	84 2b       	or	r24, r20
    2e2e:	8c 93       	st	X, r24
    2e30:	51 c0       	rjmp	.+162    	; 0x2ed4 <DIO_enuSetPinDirection+0x1ba>

			break;
		case DIO_u8GROUP_C:

			DDRC &=~(DIO_MASK_BIT<<Copy_u8PinID);
    2e32:	a4 e3       	ldi	r26, 0x34	; 52
    2e34:	b0 e0       	ldi	r27, 0x00	; 0
    2e36:	e4 e3       	ldi	r30, 0x34	; 52
    2e38:	f0 e0       	ldi	r31, 0x00	; 0
    2e3a:	80 81       	ld	r24, Z
    2e3c:	48 2f       	mov	r20, r24
    2e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e40:	28 2f       	mov	r18, r24
    2e42:	30 e0       	ldi	r19, 0x00	; 0
    2e44:	81 e0       	ldi	r24, 0x01	; 1
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	02 c0       	rjmp	.+4      	; 0x2e4e <DIO_enuSetPinDirection+0x134>
    2e4a:	88 0f       	add	r24, r24
    2e4c:	99 1f       	adc	r25, r25
    2e4e:	2a 95       	dec	r18
    2e50:	e2 f7       	brpl	.-8      	; 0x2e4a <DIO_enuSetPinDirection+0x130>
    2e52:	80 95       	com	r24
    2e54:	84 23       	and	r24, r20
    2e56:	8c 93       	st	X, r24
			DDRC |= (Copy_u8Direction<<Copy_u8PinID);
    2e58:	a4 e3       	ldi	r26, 0x34	; 52
    2e5a:	b0 e0       	ldi	r27, 0x00	; 0
    2e5c:	e4 e3       	ldi	r30, 0x34	; 52
    2e5e:	f0 e0       	ldi	r31, 0x00	; 0
    2e60:	80 81       	ld	r24, Z
    2e62:	48 2f       	mov	r20, r24
    2e64:	8c 81       	ldd	r24, Y+4	; 0x04
    2e66:	28 2f       	mov	r18, r24
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e6c:	88 2f       	mov	r24, r24
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	b9 01       	movw	r22, r18
    2e72:	02 c0       	rjmp	.+4      	; 0x2e78 <DIO_enuSetPinDirection+0x15e>
    2e74:	66 0f       	add	r22, r22
    2e76:	77 1f       	adc	r23, r23
    2e78:	8a 95       	dec	r24
    2e7a:	e2 f7       	brpl	.-8      	; 0x2e74 <DIO_enuSetPinDirection+0x15a>
    2e7c:	cb 01       	movw	r24, r22
    2e7e:	84 2b       	or	r24, r20
    2e80:	8c 93       	st	X, r24
    2e82:	28 c0       	rjmp	.+80     	; 0x2ed4 <DIO_enuSetPinDirection+0x1ba>

			break;
		case DIO_u8GROUP_D:

			DDRD &=~(DIO_MASK_BIT<<Copy_u8PinID);
    2e84:	a1 e3       	ldi	r26, 0x31	; 49
    2e86:	b0 e0       	ldi	r27, 0x00	; 0
    2e88:	e1 e3       	ldi	r30, 0x31	; 49
    2e8a:	f0 e0       	ldi	r31, 0x00	; 0
    2e8c:	80 81       	ld	r24, Z
    2e8e:	48 2f       	mov	r20, r24
    2e90:	8b 81       	ldd	r24, Y+3	; 0x03
    2e92:	28 2f       	mov	r18, r24
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	81 e0       	ldi	r24, 0x01	; 1
    2e98:	90 e0       	ldi	r25, 0x00	; 0
    2e9a:	02 c0       	rjmp	.+4      	; 0x2ea0 <DIO_enuSetPinDirection+0x186>
    2e9c:	88 0f       	add	r24, r24
    2e9e:	99 1f       	adc	r25, r25
    2ea0:	2a 95       	dec	r18
    2ea2:	e2 f7       	brpl	.-8      	; 0x2e9c <DIO_enuSetPinDirection+0x182>
    2ea4:	80 95       	com	r24
    2ea6:	84 23       	and	r24, r20
    2ea8:	8c 93       	st	X, r24
			DDRD |= (Copy_u8Direction<<Copy_u8PinID);
    2eaa:	a1 e3       	ldi	r26, 0x31	; 49
    2eac:	b0 e0       	ldi	r27, 0x00	; 0
    2eae:	e1 e3       	ldi	r30, 0x31	; 49
    2eb0:	f0 e0       	ldi	r31, 0x00	; 0
    2eb2:	80 81       	ld	r24, Z
    2eb4:	48 2f       	mov	r20, r24
    2eb6:	8c 81       	ldd	r24, Y+4	; 0x04
    2eb8:	28 2f       	mov	r18, r24
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ebe:	88 2f       	mov	r24, r24
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	b9 01       	movw	r22, r18
    2ec4:	02 c0       	rjmp	.+4      	; 0x2eca <DIO_enuSetPinDirection+0x1b0>
    2ec6:	66 0f       	add	r22, r22
    2ec8:	77 1f       	adc	r23, r23
    2eca:	8a 95       	dec	r24
    2ecc:	e2 f7       	brpl	.-8      	; 0x2ec6 <DIO_enuSetPinDirection+0x1ac>
    2ece:	cb 01       	movw	r24, r22
    2ed0:	84 2b       	or	r24, r20
    2ed2:	8c 93       	st	X, r24

			break;
		}
		Local_enuErrorState = ES_OK;
    2ed4:	81 e0       	ldi	r24, 0x01	; 1
    2ed6:	89 83       	std	Y+1, r24	; 0x01
    2ed8:	02 c0       	rjmp	.+4      	; 0x2ede <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    2eda:	82 e0       	ldi	r24, 0x02	; 2
    2edc:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    2ede:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ee0:	26 96       	adiw	r28, 0x06	; 6
    2ee2:	0f b6       	in	r0, 0x3f	; 63
    2ee4:	f8 94       	cli
    2ee6:	de bf       	out	0x3e, r29	; 62
    2ee8:	0f be       	out	0x3f, r0	; 63
    2eea:	cd bf       	out	0x3d, r28	; 61
    2eec:	cf 91       	pop	r28
    2eee:	df 91       	pop	r29
    2ef0:	08 95       	ret

00002ef2 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8Value)
{
    2ef2:	df 93       	push	r29
    2ef4:	cf 93       	push	r28
    2ef6:	00 d0       	rcall	.+0      	; 0x2ef8 <DIO_enuSetPinValue+0x6>
    2ef8:	00 d0       	rcall	.+0      	; 0x2efa <DIO_enuSetPinValue+0x8>
    2efa:	00 d0       	rcall	.+0      	; 0x2efc <DIO_enuSetPinValue+0xa>
    2efc:	cd b7       	in	r28, 0x3d	; 61
    2efe:	de b7       	in	r29, 0x3e	; 62
    2f00:	8a 83       	std	Y+2, r24	; 0x02
    2f02:	6b 83       	std	Y+3, r22	; 0x03
    2f04:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    2f06:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_u8GROUP_D
    2f08:	8a 81       	ldd	r24, Y+2	; 0x02
    2f0a:	84 30       	cpi	r24, 0x04	; 4
    2f0c:	08 f0       	brcs	.+2      	; 0x2f10 <DIO_enuSetPinValue+0x1e>
    2f0e:	d4 c0       	rjmp	.+424    	; 0x30b8 <DIO_enuSetPinValue+0x1c6>
    2f10:	8b 81       	ldd	r24, Y+3	; 0x03
    2f12:	88 30       	cpi	r24, 0x08	; 8
    2f14:	08 f0       	brcs	.+2      	; 0x2f18 <DIO_enuSetPinValue+0x26>
    2f16:	d0 c0       	rjmp	.+416    	; 0x30b8 <DIO_enuSetPinValue+0x1c6>
    2f18:	8c 81       	ldd	r24, Y+4	; 0x04
    2f1a:	82 30       	cpi	r24, 0x02	; 2
    2f1c:	20 f0       	brcs	.+8      	; 0x2f26 <DIO_enuSetPinValue+0x34>
    2f1e:	8c 81       	ldd	r24, Y+4	; 0x04
    2f20:	82 30       	cpi	r24, 0x02	; 2
    2f22:	08 f0       	brcs	.+2      	; 0x2f26 <DIO_enuSetPinValue+0x34>
    2f24:	c9 c0       	rjmp	.+402    	; 0x30b8 <DIO_enuSetPinValue+0x1c6>
			&& Copy_u8PinID <= DIO_u8PIN7
			&& (Copy_u8Value <= DIO_u8HIGH || Copy_u8Value <= DIO_u8PULL_UP ))
	{
		switch (Copy_u8PortID)
    2f26:	8a 81       	ldd	r24, Y+2	; 0x02
    2f28:	28 2f       	mov	r18, r24
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	3e 83       	std	Y+6, r19	; 0x06
    2f2e:	2d 83       	std	Y+5, r18	; 0x05
    2f30:	6d 81       	ldd	r22, Y+5	; 0x05
    2f32:	7e 81       	ldd	r23, Y+6	; 0x06
    2f34:	61 30       	cpi	r22, 0x01	; 1
    2f36:	71 05       	cpc	r23, r1
    2f38:	09 f4       	brne	.+2      	; 0x2f3c <DIO_enuSetPinValue+0x4a>
    2f3a:	41 c0       	rjmp	.+130    	; 0x2fbe <DIO_enuSetPinValue+0xcc>
    2f3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f40:	82 30       	cpi	r24, 0x02	; 2
    2f42:	91 05       	cpc	r25, r1
    2f44:	34 f4       	brge	.+12     	; 0x2f52 <DIO_enuSetPinValue+0x60>
    2f46:	2d 81       	ldd	r18, Y+5	; 0x05
    2f48:	3e 81       	ldd	r19, Y+6	; 0x06
    2f4a:	21 15       	cp	r18, r1
    2f4c:	31 05       	cpc	r19, r1
    2f4e:	71 f0       	breq	.+28     	; 0x2f6c <DIO_enuSetPinValue+0x7a>
    2f50:	b0 c0       	rjmp	.+352    	; 0x30b2 <DIO_enuSetPinValue+0x1c0>
    2f52:	6d 81       	ldd	r22, Y+5	; 0x05
    2f54:	7e 81       	ldd	r23, Y+6	; 0x06
    2f56:	62 30       	cpi	r22, 0x02	; 2
    2f58:	71 05       	cpc	r23, r1
    2f5a:	09 f4       	brne	.+2      	; 0x2f5e <DIO_enuSetPinValue+0x6c>
    2f5c:	59 c0       	rjmp	.+178    	; 0x3010 <DIO_enuSetPinValue+0x11e>
    2f5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f60:	9e 81       	ldd	r25, Y+6	; 0x06
    2f62:	83 30       	cpi	r24, 0x03	; 3
    2f64:	91 05       	cpc	r25, r1
    2f66:	09 f4       	brne	.+2      	; 0x2f6a <DIO_enuSetPinValue+0x78>
    2f68:	7c c0       	rjmp	.+248    	; 0x3062 <DIO_enuSetPinValue+0x170>
    2f6a:	a3 c0       	rjmp	.+326    	; 0x30b2 <DIO_enuSetPinValue+0x1c0>
		{
		case DIO_u8GROUP_A:

			PORTA &=~(DIO_MASK_BIT<<Copy_u8PinID);
    2f6c:	ab e3       	ldi	r26, 0x3B	; 59
    2f6e:	b0 e0       	ldi	r27, 0x00	; 0
    2f70:	eb e3       	ldi	r30, 0x3B	; 59
    2f72:	f0 e0       	ldi	r31, 0x00	; 0
    2f74:	80 81       	ld	r24, Z
    2f76:	48 2f       	mov	r20, r24
    2f78:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7a:	28 2f       	mov	r18, r24
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	81 e0       	ldi	r24, 0x01	; 1
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	02 c0       	rjmp	.+4      	; 0x2f88 <DIO_enuSetPinValue+0x96>
    2f84:	88 0f       	add	r24, r24
    2f86:	99 1f       	adc	r25, r25
    2f88:	2a 95       	dec	r18
    2f8a:	e2 f7       	brpl	.-8      	; 0x2f84 <DIO_enuSetPinValue+0x92>
    2f8c:	80 95       	com	r24
    2f8e:	84 23       	and	r24, r20
    2f90:	8c 93       	st	X, r24
			PORTA |= (Copy_u8Value<<Copy_u8PinID);
    2f92:	ab e3       	ldi	r26, 0x3B	; 59
    2f94:	b0 e0       	ldi	r27, 0x00	; 0
    2f96:	eb e3       	ldi	r30, 0x3B	; 59
    2f98:	f0 e0       	ldi	r31, 0x00	; 0
    2f9a:	80 81       	ld	r24, Z
    2f9c:	48 2f       	mov	r20, r24
    2f9e:	8c 81       	ldd	r24, Y+4	; 0x04
    2fa0:	28 2f       	mov	r18, r24
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
    2fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa6:	88 2f       	mov	r24, r24
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	b9 01       	movw	r22, r18
    2fac:	02 c0       	rjmp	.+4      	; 0x2fb2 <DIO_enuSetPinValue+0xc0>
    2fae:	66 0f       	add	r22, r22
    2fb0:	77 1f       	adc	r23, r23
    2fb2:	8a 95       	dec	r24
    2fb4:	e2 f7       	brpl	.-8      	; 0x2fae <DIO_enuSetPinValue+0xbc>
    2fb6:	cb 01       	movw	r24, r22
    2fb8:	84 2b       	or	r24, r20
    2fba:	8c 93       	st	X, r24
    2fbc:	7a c0       	rjmp	.+244    	; 0x30b2 <DIO_enuSetPinValue+0x1c0>

			break;
		case DIO_u8GROUP_B:

			PORTB &=~(DIO_MASK_BIT<<Copy_u8PinID);
    2fbe:	a8 e3       	ldi	r26, 0x38	; 56
    2fc0:	b0 e0       	ldi	r27, 0x00	; 0
    2fc2:	e8 e3       	ldi	r30, 0x38	; 56
    2fc4:	f0 e0       	ldi	r31, 0x00	; 0
    2fc6:	80 81       	ld	r24, Z
    2fc8:	48 2f       	mov	r20, r24
    2fca:	8b 81       	ldd	r24, Y+3	; 0x03
    2fcc:	28 2f       	mov	r18, r24
    2fce:	30 e0       	ldi	r19, 0x00	; 0
    2fd0:	81 e0       	ldi	r24, 0x01	; 1
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	02 c0       	rjmp	.+4      	; 0x2fda <DIO_enuSetPinValue+0xe8>
    2fd6:	88 0f       	add	r24, r24
    2fd8:	99 1f       	adc	r25, r25
    2fda:	2a 95       	dec	r18
    2fdc:	e2 f7       	brpl	.-8      	; 0x2fd6 <DIO_enuSetPinValue+0xe4>
    2fde:	80 95       	com	r24
    2fe0:	84 23       	and	r24, r20
    2fe2:	8c 93       	st	X, r24
			PORTB |= (Copy_u8Value<<Copy_u8PinID);
    2fe4:	a8 e3       	ldi	r26, 0x38	; 56
    2fe6:	b0 e0       	ldi	r27, 0x00	; 0
    2fe8:	e8 e3       	ldi	r30, 0x38	; 56
    2fea:	f0 e0       	ldi	r31, 0x00	; 0
    2fec:	80 81       	ld	r24, Z
    2fee:	48 2f       	mov	r20, r24
    2ff0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ff2:	28 2f       	mov	r18, r24
    2ff4:	30 e0       	ldi	r19, 0x00	; 0
    2ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff8:	88 2f       	mov	r24, r24
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
    2ffc:	b9 01       	movw	r22, r18
    2ffe:	02 c0       	rjmp	.+4      	; 0x3004 <DIO_enuSetPinValue+0x112>
    3000:	66 0f       	add	r22, r22
    3002:	77 1f       	adc	r23, r23
    3004:	8a 95       	dec	r24
    3006:	e2 f7       	brpl	.-8      	; 0x3000 <DIO_enuSetPinValue+0x10e>
    3008:	cb 01       	movw	r24, r22
    300a:	84 2b       	or	r24, r20
    300c:	8c 93       	st	X, r24
    300e:	51 c0       	rjmp	.+162    	; 0x30b2 <DIO_enuSetPinValue+0x1c0>

			break;
		case DIO_u8GROUP_C:

			PORTC &=~(DIO_MASK_BIT<<Copy_u8PinID);
    3010:	a5 e3       	ldi	r26, 0x35	; 53
    3012:	b0 e0       	ldi	r27, 0x00	; 0
    3014:	e5 e3       	ldi	r30, 0x35	; 53
    3016:	f0 e0       	ldi	r31, 0x00	; 0
    3018:	80 81       	ld	r24, Z
    301a:	48 2f       	mov	r20, r24
    301c:	8b 81       	ldd	r24, Y+3	; 0x03
    301e:	28 2f       	mov	r18, r24
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	81 e0       	ldi	r24, 0x01	; 1
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	02 c0       	rjmp	.+4      	; 0x302c <DIO_enuSetPinValue+0x13a>
    3028:	88 0f       	add	r24, r24
    302a:	99 1f       	adc	r25, r25
    302c:	2a 95       	dec	r18
    302e:	e2 f7       	brpl	.-8      	; 0x3028 <DIO_enuSetPinValue+0x136>
    3030:	80 95       	com	r24
    3032:	84 23       	and	r24, r20
    3034:	8c 93       	st	X, r24
			PORTC |= (Copy_u8Value<<Copy_u8PinID);
    3036:	a5 e3       	ldi	r26, 0x35	; 53
    3038:	b0 e0       	ldi	r27, 0x00	; 0
    303a:	e5 e3       	ldi	r30, 0x35	; 53
    303c:	f0 e0       	ldi	r31, 0x00	; 0
    303e:	80 81       	ld	r24, Z
    3040:	48 2f       	mov	r20, r24
    3042:	8c 81       	ldd	r24, Y+4	; 0x04
    3044:	28 2f       	mov	r18, r24
    3046:	30 e0       	ldi	r19, 0x00	; 0
    3048:	8b 81       	ldd	r24, Y+3	; 0x03
    304a:	88 2f       	mov	r24, r24
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	b9 01       	movw	r22, r18
    3050:	02 c0       	rjmp	.+4      	; 0x3056 <DIO_enuSetPinValue+0x164>
    3052:	66 0f       	add	r22, r22
    3054:	77 1f       	adc	r23, r23
    3056:	8a 95       	dec	r24
    3058:	e2 f7       	brpl	.-8      	; 0x3052 <DIO_enuSetPinValue+0x160>
    305a:	cb 01       	movw	r24, r22
    305c:	84 2b       	or	r24, r20
    305e:	8c 93       	st	X, r24
    3060:	28 c0       	rjmp	.+80     	; 0x30b2 <DIO_enuSetPinValue+0x1c0>

			break;
		case DIO_u8GROUP_D:

			PORTD &=~(DIO_MASK_BIT<<Copy_u8PinID);
    3062:	a2 e3       	ldi	r26, 0x32	; 50
    3064:	b0 e0       	ldi	r27, 0x00	; 0
    3066:	e2 e3       	ldi	r30, 0x32	; 50
    3068:	f0 e0       	ldi	r31, 0x00	; 0
    306a:	80 81       	ld	r24, Z
    306c:	48 2f       	mov	r20, r24
    306e:	8b 81       	ldd	r24, Y+3	; 0x03
    3070:	28 2f       	mov	r18, r24
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	81 e0       	ldi	r24, 0x01	; 1
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	02 c0       	rjmp	.+4      	; 0x307e <DIO_enuSetPinValue+0x18c>
    307a:	88 0f       	add	r24, r24
    307c:	99 1f       	adc	r25, r25
    307e:	2a 95       	dec	r18
    3080:	e2 f7       	brpl	.-8      	; 0x307a <DIO_enuSetPinValue+0x188>
    3082:	80 95       	com	r24
    3084:	84 23       	and	r24, r20
    3086:	8c 93       	st	X, r24
			PORTD |= (Copy_u8Value<<Copy_u8PinID);
    3088:	a2 e3       	ldi	r26, 0x32	; 50
    308a:	b0 e0       	ldi	r27, 0x00	; 0
    308c:	e2 e3       	ldi	r30, 0x32	; 50
    308e:	f0 e0       	ldi	r31, 0x00	; 0
    3090:	80 81       	ld	r24, Z
    3092:	48 2f       	mov	r20, r24
    3094:	8c 81       	ldd	r24, Y+4	; 0x04
    3096:	28 2f       	mov	r18, r24
    3098:	30 e0       	ldi	r19, 0x00	; 0
    309a:	8b 81       	ldd	r24, Y+3	; 0x03
    309c:	88 2f       	mov	r24, r24
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	b9 01       	movw	r22, r18
    30a2:	02 c0       	rjmp	.+4      	; 0x30a8 <DIO_enuSetPinValue+0x1b6>
    30a4:	66 0f       	add	r22, r22
    30a6:	77 1f       	adc	r23, r23
    30a8:	8a 95       	dec	r24
    30aa:	e2 f7       	brpl	.-8      	; 0x30a4 <DIO_enuSetPinValue+0x1b2>
    30ac:	cb 01       	movw	r24, r22
    30ae:	84 2b       	or	r24, r20
    30b0:	8c 93       	st	X, r24

			break;
		}
		Local_enuErrorState = ES_OK;
    30b2:	81 e0       	ldi	r24, 0x01	; 1
    30b4:	89 83       	std	Y+1, r24	; 0x01
    30b6:	02 c0       	rjmp	.+4      	; 0x30bc <DIO_enuSetPinValue+0x1ca>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    30b8:	82 e0       	ldi	r24, 0x02	; 2
    30ba:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    30bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    30be:	26 96       	adiw	r28, 0x06	; 6
    30c0:	0f b6       	in	r0, 0x3f	; 63
    30c2:	f8 94       	cli
    30c4:	de bf       	out	0x3e, r29	; 62
    30c6:	0f be       	out	0x3f, r0	; 63
    30c8:	cd bf       	out	0x3d, r28	; 61
    30ca:	cf 91       	pop	r28
    30cc:	df 91       	pop	r29
    30ce:	08 95       	ret

000030d0 <DIO_enuTogPinValue>:

ES_t DIO_enuTogPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID)
{
    30d0:	df 93       	push	r29
    30d2:	cf 93       	push	r28
    30d4:	00 d0       	rcall	.+0      	; 0x30d6 <DIO_enuTogPinValue+0x6>
    30d6:	00 d0       	rcall	.+0      	; 0x30d8 <DIO_enuTogPinValue+0x8>
    30d8:	0f 92       	push	r0
    30da:	cd b7       	in	r28, 0x3d	; 61
    30dc:	de b7       	in	r29, 0x3e	; 62
    30de:	8a 83       	std	Y+2, r24	; 0x02
    30e0:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    30e2:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_u8GROUP_D
    30e4:	8a 81       	ldd	r24, Y+2	; 0x02
    30e6:	84 30       	cpi	r24, 0x04	; 4
    30e8:	08 f0       	brcs	.+2      	; 0x30ec <DIO_enuTogPinValue+0x1c>
    30ea:	75 c0       	rjmp	.+234    	; 0x31d6 <DIO_enuTogPinValue+0x106>
    30ec:	8b 81       	ldd	r24, Y+3	; 0x03
    30ee:	88 30       	cpi	r24, 0x08	; 8
    30f0:	08 f0       	brcs	.+2      	; 0x30f4 <DIO_enuTogPinValue+0x24>
    30f2:	71 c0       	rjmp	.+226    	; 0x31d6 <DIO_enuTogPinValue+0x106>
			&& Copy_u8PinID <= DIO_u8PIN7)
	{
		switch (Copy_u8PortID)
    30f4:	8a 81       	ldd	r24, Y+2	; 0x02
    30f6:	28 2f       	mov	r18, r24
    30f8:	30 e0       	ldi	r19, 0x00	; 0
    30fa:	3d 83       	std	Y+5, r19	; 0x05
    30fc:	2c 83       	std	Y+4, r18	; 0x04
    30fe:	8c 81       	ldd	r24, Y+4	; 0x04
    3100:	9d 81       	ldd	r25, Y+5	; 0x05
    3102:	81 30       	cpi	r24, 0x01	; 1
    3104:	91 05       	cpc	r25, r1
    3106:	49 f1       	breq	.+82     	; 0x315a <DIO_enuTogPinValue+0x8a>
    3108:	2c 81       	ldd	r18, Y+4	; 0x04
    310a:	3d 81       	ldd	r19, Y+5	; 0x05
    310c:	22 30       	cpi	r18, 0x02	; 2
    310e:	31 05       	cpc	r19, r1
    3110:	2c f4       	brge	.+10     	; 0x311c <DIO_enuTogPinValue+0x4c>
    3112:	8c 81       	ldd	r24, Y+4	; 0x04
    3114:	9d 81       	ldd	r25, Y+5	; 0x05
    3116:	00 97       	sbiw	r24, 0x00	; 0
    3118:	61 f0       	breq	.+24     	; 0x3132 <DIO_enuTogPinValue+0x62>
    311a:	5a c0       	rjmp	.+180    	; 0x31d0 <DIO_enuTogPinValue+0x100>
    311c:	2c 81       	ldd	r18, Y+4	; 0x04
    311e:	3d 81       	ldd	r19, Y+5	; 0x05
    3120:	22 30       	cpi	r18, 0x02	; 2
    3122:	31 05       	cpc	r19, r1
    3124:	71 f1       	breq	.+92     	; 0x3182 <DIO_enuTogPinValue+0xb2>
    3126:	8c 81       	ldd	r24, Y+4	; 0x04
    3128:	9d 81       	ldd	r25, Y+5	; 0x05
    312a:	83 30       	cpi	r24, 0x03	; 3
    312c:	91 05       	cpc	r25, r1
    312e:	e9 f1       	breq	.+122    	; 0x31aa <DIO_enuTogPinValue+0xda>
    3130:	4f c0       	rjmp	.+158    	; 0x31d0 <DIO_enuTogPinValue+0x100>
		{
		case DIO_u8GROUP_A:

			PORTA ^= (DIO_MASK_BIT<<Copy_u8PinID);
    3132:	ab e3       	ldi	r26, 0x3B	; 59
    3134:	b0 e0       	ldi	r27, 0x00	; 0
    3136:	eb e3       	ldi	r30, 0x3B	; 59
    3138:	f0 e0       	ldi	r31, 0x00	; 0
    313a:	80 81       	ld	r24, Z
    313c:	48 2f       	mov	r20, r24
    313e:	8b 81       	ldd	r24, Y+3	; 0x03
    3140:	28 2f       	mov	r18, r24
    3142:	30 e0       	ldi	r19, 0x00	; 0
    3144:	81 e0       	ldi	r24, 0x01	; 1
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	02 2e       	mov	r0, r18
    314a:	02 c0       	rjmp	.+4      	; 0x3150 <DIO_enuTogPinValue+0x80>
    314c:	88 0f       	add	r24, r24
    314e:	99 1f       	adc	r25, r25
    3150:	0a 94       	dec	r0
    3152:	e2 f7       	brpl	.-8      	; 0x314c <DIO_enuTogPinValue+0x7c>
    3154:	84 27       	eor	r24, r20
    3156:	8c 93       	st	X, r24
    3158:	3b c0       	rjmp	.+118    	; 0x31d0 <DIO_enuTogPinValue+0x100>

			break;
		case DIO_u8GROUP_B:

			PORTB ^= (DIO_MASK_BIT<<Copy_u8PinID);
    315a:	a8 e3       	ldi	r26, 0x38	; 56
    315c:	b0 e0       	ldi	r27, 0x00	; 0
    315e:	e8 e3       	ldi	r30, 0x38	; 56
    3160:	f0 e0       	ldi	r31, 0x00	; 0
    3162:	80 81       	ld	r24, Z
    3164:	48 2f       	mov	r20, r24
    3166:	8b 81       	ldd	r24, Y+3	; 0x03
    3168:	28 2f       	mov	r18, r24
    316a:	30 e0       	ldi	r19, 0x00	; 0
    316c:	81 e0       	ldi	r24, 0x01	; 1
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	02 2e       	mov	r0, r18
    3172:	02 c0       	rjmp	.+4      	; 0x3178 <DIO_enuTogPinValue+0xa8>
    3174:	88 0f       	add	r24, r24
    3176:	99 1f       	adc	r25, r25
    3178:	0a 94       	dec	r0
    317a:	e2 f7       	brpl	.-8      	; 0x3174 <DIO_enuTogPinValue+0xa4>
    317c:	84 27       	eor	r24, r20
    317e:	8c 93       	st	X, r24
    3180:	27 c0       	rjmp	.+78     	; 0x31d0 <DIO_enuTogPinValue+0x100>

			break;
		case DIO_u8GROUP_C:

			PORTC ^= (DIO_MASK_BIT<<Copy_u8PinID);
    3182:	a5 e3       	ldi	r26, 0x35	; 53
    3184:	b0 e0       	ldi	r27, 0x00	; 0
    3186:	e5 e3       	ldi	r30, 0x35	; 53
    3188:	f0 e0       	ldi	r31, 0x00	; 0
    318a:	80 81       	ld	r24, Z
    318c:	48 2f       	mov	r20, r24
    318e:	8b 81       	ldd	r24, Y+3	; 0x03
    3190:	28 2f       	mov	r18, r24
    3192:	30 e0       	ldi	r19, 0x00	; 0
    3194:	81 e0       	ldi	r24, 0x01	; 1
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	02 2e       	mov	r0, r18
    319a:	02 c0       	rjmp	.+4      	; 0x31a0 <DIO_enuTogPinValue+0xd0>
    319c:	88 0f       	add	r24, r24
    319e:	99 1f       	adc	r25, r25
    31a0:	0a 94       	dec	r0
    31a2:	e2 f7       	brpl	.-8      	; 0x319c <DIO_enuTogPinValue+0xcc>
    31a4:	84 27       	eor	r24, r20
    31a6:	8c 93       	st	X, r24
    31a8:	13 c0       	rjmp	.+38     	; 0x31d0 <DIO_enuTogPinValue+0x100>

			break;
		case DIO_u8GROUP_D:

			PORTD ^= (DIO_MASK_BIT<<Copy_u8PinID);
    31aa:	a2 e3       	ldi	r26, 0x32	; 50
    31ac:	b0 e0       	ldi	r27, 0x00	; 0
    31ae:	e2 e3       	ldi	r30, 0x32	; 50
    31b0:	f0 e0       	ldi	r31, 0x00	; 0
    31b2:	80 81       	ld	r24, Z
    31b4:	48 2f       	mov	r20, r24
    31b6:	8b 81       	ldd	r24, Y+3	; 0x03
    31b8:	28 2f       	mov	r18, r24
    31ba:	30 e0       	ldi	r19, 0x00	; 0
    31bc:	81 e0       	ldi	r24, 0x01	; 1
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	02 2e       	mov	r0, r18
    31c2:	02 c0       	rjmp	.+4      	; 0x31c8 <DIO_enuTogPinValue+0xf8>
    31c4:	88 0f       	add	r24, r24
    31c6:	99 1f       	adc	r25, r25
    31c8:	0a 94       	dec	r0
    31ca:	e2 f7       	brpl	.-8      	; 0x31c4 <DIO_enuTogPinValue+0xf4>
    31cc:	84 27       	eor	r24, r20
    31ce:	8c 93       	st	X, r24

			break;
		}
		Local_enuErrorState = ES_OK;
    31d0:	81 e0       	ldi	r24, 0x01	; 1
    31d2:	89 83       	std	Y+1, r24	; 0x01
    31d4:	02 c0       	rjmp	.+4      	; 0x31da <DIO_enuTogPinValue+0x10a>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    31d6:	82 e0       	ldi	r24, 0x02	; 2
    31d8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    31da:	89 81       	ldd	r24, Y+1	; 0x01
}
    31dc:	0f 90       	pop	r0
    31de:	0f 90       	pop	r0
    31e0:	0f 90       	pop	r0
    31e2:	0f 90       	pop	r0
    31e4:	0f 90       	pop	r0
    31e6:	cf 91       	pop	r28
    31e8:	df 91       	pop	r29
    31ea:	08 95       	ret

000031ec <DIO_enuGetPinValue>:
ES_t DIO_enuGetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 * Copy_pu8Value)
{
    31ec:	df 93       	push	r29
    31ee:	cf 93       	push	r28
    31f0:	cd b7       	in	r28, 0x3d	; 61
    31f2:	de b7       	in	r29, 0x3e	; 62
    31f4:	27 97       	sbiw	r28, 0x07	; 7
    31f6:	0f b6       	in	r0, 0x3f	; 63
    31f8:	f8 94       	cli
    31fa:	de bf       	out	0x3e, r29	; 62
    31fc:	0f be       	out	0x3f, r0	; 63
    31fe:	cd bf       	out	0x3d, r28	; 61
    3200:	8a 83       	std	Y+2, r24	; 0x02
    3202:	6b 83       	std	Y+3, r22	; 0x03
    3204:	5d 83       	std	Y+5, r21	; 0x05
    3206:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    3208:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
    320a:	8c 81       	ldd	r24, Y+4	; 0x04
    320c:	9d 81       	ldd	r25, Y+5	; 0x05
    320e:	00 97       	sbiw	r24, 0x00	; 0
    3210:	09 f4       	brne	.+2      	; 0x3214 <DIO_enuGetPinValue+0x28>
    3212:	7e c0       	rjmp	.+252    	; 0x3310 <DIO_enuGetPinValue+0x124>
	{
		if(Copy_u8PortID <= DIO_u8GROUP_D
    3214:	8a 81       	ldd	r24, Y+2	; 0x02
    3216:	84 30       	cpi	r24, 0x04	; 4
    3218:	08 f0       	brcs	.+2      	; 0x321c <DIO_enuGetPinValue+0x30>
    321a:	77 c0       	rjmp	.+238    	; 0x330a <DIO_enuGetPinValue+0x11e>
    321c:	8b 81       	ldd	r24, Y+3	; 0x03
    321e:	88 30       	cpi	r24, 0x08	; 8
    3220:	08 f0       	brcs	.+2      	; 0x3224 <DIO_enuGetPinValue+0x38>
    3222:	73 c0       	rjmp	.+230    	; 0x330a <DIO_enuGetPinValue+0x11e>
				&& Copy_u8PinID <= DIO_u8PIN7)
		{
			switch (Copy_u8PortID)
    3224:	8a 81       	ldd	r24, Y+2	; 0x02
    3226:	28 2f       	mov	r18, r24
    3228:	30 e0       	ldi	r19, 0x00	; 0
    322a:	3f 83       	std	Y+7, r19	; 0x07
    322c:	2e 83       	std	Y+6, r18	; 0x06
    322e:	4e 81       	ldd	r20, Y+6	; 0x06
    3230:	5f 81       	ldd	r21, Y+7	; 0x07
    3232:	41 30       	cpi	r20, 0x01	; 1
    3234:	51 05       	cpc	r21, r1
    3236:	59 f1       	breq	.+86     	; 0x328e <DIO_enuGetPinValue+0xa2>
    3238:	8e 81       	ldd	r24, Y+6	; 0x06
    323a:	9f 81       	ldd	r25, Y+7	; 0x07
    323c:	82 30       	cpi	r24, 0x02	; 2
    323e:	91 05       	cpc	r25, r1
    3240:	34 f4       	brge	.+12     	; 0x324e <DIO_enuGetPinValue+0x62>
    3242:	2e 81       	ldd	r18, Y+6	; 0x06
    3244:	3f 81       	ldd	r19, Y+7	; 0x07
    3246:	21 15       	cp	r18, r1
    3248:	31 05       	cpc	r19, r1
    324a:	69 f0       	breq	.+26     	; 0x3266 <DIO_enuGetPinValue+0x7a>
    324c:	5b c0       	rjmp	.+182    	; 0x3304 <DIO_enuGetPinValue+0x118>
    324e:	4e 81       	ldd	r20, Y+6	; 0x06
    3250:	5f 81       	ldd	r21, Y+7	; 0x07
    3252:	42 30       	cpi	r20, 0x02	; 2
    3254:	51 05       	cpc	r21, r1
    3256:	79 f1       	breq	.+94     	; 0x32b6 <DIO_enuGetPinValue+0xca>
    3258:	8e 81       	ldd	r24, Y+6	; 0x06
    325a:	9f 81       	ldd	r25, Y+7	; 0x07
    325c:	83 30       	cpi	r24, 0x03	; 3
    325e:	91 05       	cpc	r25, r1
    3260:	09 f4       	brne	.+2      	; 0x3264 <DIO_enuGetPinValue+0x78>
    3262:	3d c0       	rjmp	.+122    	; 0x32de <DIO_enuGetPinValue+0xf2>
    3264:	4f c0       	rjmp	.+158    	; 0x3304 <DIO_enuGetPinValue+0x118>
			{
			case DIO_u8GROUP_A:

				*Copy_pu8Value = ( (PINA >> Copy_u8PinID ) & DIO_MASK_BIT);
    3266:	e9 e3       	ldi	r30, 0x39	; 57
    3268:	f0 e0       	ldi	r31, 0x00	; 0
    326a:	80 81       	ld	r24, Z
    326c:	28 2f       	mov	r18, r24
    326e:	30 e0       	ldi	r19, 0x00	; 0
    3270:	8b 81       	ldd	r24, Y+3	; 0x03
    3272:	88 2f       	mov	r24, r24
    3274:	90 e0       	ldi	r25, 0x00	; 0
    3276:	a9 01       	movw	r20, r18
    3278:	02 c0       	rjmp	.+4      	; 0x327e <DIO_enuGetPinValue+0x92>
    327a:	55 95       	asr	r21
    327c:	47 95       	ror	r20
    327e:	8a 95       	dec	r24
    3280:	e2 f7       	brpl	.-8      	; 0x327a <DIO_enuGetPinValue+0x8e>
    3282:	ca 01       	movw	r24, r20
    3284:	81 70       	andi	r24, 0x01	; 1
    3286:	ec 81       	ldd	r30, Y+4	; 0x04
    3288:	fd 81       	ldd	r31, Y+5	; 0x05
    328a:	80 83       	st	Z, r24
    328c:	3b c0       	rjmp	.+118    	; 0x3304 <DIO_enuGetPinValue+0x118>

				break;
			case DIO_u8GROUP_B:

				*Copy_pu8Value = ( (PINB >> Copy_u8PinID ) & DIO_MASK_BIT);
    328e:	e6 e3       	ldi	r30, 0x36	; 54
    3290:	f0 e0       	ldi	r31, 0x00	; 0
    3292:	80 81       	ld	r24, Z
    3294:	28 2f       	mov	r18, r24
    3296:	30 e0       	ldi	r19, 0x00	; 0
    3298:	8b 81       	ldd	r24, Y+3	; 0x03
    329a:	88 2f       	mov	r24, r24
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	a9 01       	movw	r20, r18
    32a0:	02 c0       	rjmp	.+4      	; 0x32a6 <DIO_enuGetPinValue+0xba>
    32a2:	55 95       	asr	r21
    32a4:	47 95       	ror	r20
    32a6:	8a 95       	dec	r24
    32a8:	e2 f7       	brpl	.-8      	; 0x32a2 <DIO_enuGetPinValue+0xb6>
    32aa:	ca 01       	movw	r24, r20
    32ac:	81 70       	andi	r24, 0x01	; 1
    32ae:	ec 81       	ldd	r30, Y+4	; 0x04
    32b0:	fd 81       	ldd	r31, Y+5	; 0x05
    32b2:	80 83       	st	Z, r24
    32b4:	27 c0       	rjmp	.+78     	; 0x3304 <DIO_enuGetPinValue+0x118>

				break;
			case DIO_u8GROUP_C:

				*Copy_pu8Value = ( (PINC >> Copy_u8PinID ) & DIO_MASK_BIT);
    32b6:	e3 e3       	ldi	r30, 0x33	; 51
    32b8:	f0 e0       	ldi	r31, 0x00	; 0
    32ba:	80 81       	ld	r24, Z
    32bc:	28 2f       	mov	r18, r24
    32be:	30 e0       	ldi	r19, 0x00	; 0
    32c0:	8b 81       	ldd	r24, Y+3	; 0x03
    32c2:	88 2f       	mov	r24, r24
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	a9 01       	movw	r20, r18
    32c8:	02 c0       	rjmp	.+4      	; 0x32ce <DIO_enuGetPinValue+0xe2>
    32ca:	55 95       	asr	r21
    32cc:	47 95       	ror	r20
    32ce:	8a 95       	dec	r24
    32d0:	e2 f7       	brpl	.-8      	; 0x32ca <DIO_enuGetPinValue+0xde>
    32d2:	ca 01       	movw	r24, r20
    32d4:	81 70       	andi	r24, 0x01	; 1
    32d6:	ec 81       	ldd	r30, Y+4	; 0x04
    32d8:	fd 81       	ldd	r31, Y+5	; 0x05
    32da:	80 83       	st	Z, r24
    32dc:	13 c0       	rjmp	.+38     	; 0x3304 <DIO_enuGetPinValue+0x118>

				break;
			case DIO_u8GROUP_D:

				*Copy_pu8Value = ( (PIND >> Copy_u8PinID ) & DIO_MASK_BIT);
    32de:	e0 e3       	ldi	r30, 0x30	; 48
    32e0:	f0 e0       	ldi	r31, 0x00	; 0
    32e2:	80 81       	ld	r24, Z
    32e4:	28 2f       	mov	r18, r24
    32e6:	30 e0       	ldi	r19, 0x00	; 0
    32e8:	8b 81       	ldd	r24, Y+3	; 0x03
    32ea:	88 2f       	mov	r24, r24
    32ec:	90 e0       	ldi	r25, 0x00	; 0
    32ee:	a9 01       	movw	r20, r18
    32f0:	02 c0       	rjmp	.+4      	; 0x32f6 <DIO_enuGetPinValue+0x10a>
    32f2:	55 95       	asr	r21
    32f4:	47 95       	ror	r20
    32f6:	8a 95       	dec	r24
    32f8:	e2 f7       	brpl	.-8      	; 0x32f2 <DIO_enuGetPinValue+0x106>
    32fa:	ca 01       	movw	r24, r20
    32fc:	81 70       	andi	r24, 0x01	; 1
    32fe:	ec 81       	ldd	r30, Y+4	; 0x04
    3300:	fd 81       	ldd	r31, Y+5	; 0x05
    3302:	80 83       	st	Z, r24

				break;
			}
			Local_enuErrorState = ES_OK;
    3304:	81 e0       	ldi	r24, 0x01	; 1
    3306:	89 83       	std	Y+1, r24	; 0x01
    3308:	05 c0       	rjmp	.+10     	; 0x3314 <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    330a:	82 e0       	ldi	r24, 0x02	; 2
    330c:	89 83       	std	Y+1, r24	; 0x01
    330e:	02 c0       	rjmp	.+4      	; 0x3314 <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    3310:	83 e0       	ldi	r24, 0x03	; 3
    3312:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    3314:	89 81       	ldd	r24, Y+1	; 0x01
}
    3316:	27 96       	adiw	r28, 0x07	; 7
    3318:	0f b6       	in	r0, 0x3f	; 63
    331a:	f8 94       	cli
    331c:	de bf       	out	0x3e, r29	; 62
    331e:	0f be       	out	0x3f, r0	; 63
    3320:	cd bf       	out	0x3d, r28	; 61
    3322:	cf 91       	pop	r28
    3324:	df 91       	pop	r29
    3326:	08 95       	ret

00003328 <LCD_enuInit>:

#include <util/delay.h>


ES_t LCD_enuInit(void)
{
    3328:	df 93       	push	r29
    332a:	cf 93       	push	r28
    332c:	cd b7       	in	r28, 0x3d	; 61
    332e:	de b7       	in	r29, 0x3e	; 62
    3330:	ab 97       	sbiw	r28, 0x2b	; 43
    3332:	0f b6       	in	r0, 0x3f	; 63
    3334:	f8 94       	cli
    3336:	de bf       	out	0x3e, r29	; 62
    3338:	0f be       	out	0x3f, r0	; 63
    333a:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    333c:	1b a6       	std	Y+43, r1	; 0x2b
    333e:	80 e0       	ldi	r24, 0x00	; 0
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	a0 e0       	ldi	r26, 0x00	; 0
    3344:	b2 e4       	ldi	r27, 0x42	; 66
    3346:	8f a3       	std	Y+39, r24	; 0x27
    3348:	98 a7       	std	Y+40, r25	; 0x28
    334a:	a9 a7       	std	Y+41, r26	; 0x29
    334c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    334e:	6f a1       	ldd	r22, Y+39	; 0x27
    3350:	78 a5       	ldd	r23, Y+40	; 0x28
    3352:	89 a5       	ldd	r24, Y+41	; 0x29
    3354:	9a a5       	ldd	r25, Y+42	; 0x2a
    3356:	20 e0       	ldi	r18, 0x00	; 0
    3358:	30 e0       	ldi	r19, 0x00	; 0
    335a:	4a e7       	ldi	r20, 0x7A	; 122
    335c:	55 e4       	ldi	r21, 0x45	; 69
    335e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3362:	dc 01       	movw	r26, r24
    3364:	cb 01       	movw	r24, r22
    3366:	8b a3       	std	Y+35, r24	; 0x23
    3368:	9c a3       	std	Y+36, r25	; 0x24
    336a:	ad a3       	std	Y+37, r26	; 0x25
    336c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    336e:	6b a1       	ldd	r22, Y+35	; 0x23
    3370:	7c a1       	ldd	r23, Y+36	; 0x24
    3372:	8d a1       	ldd	r24, Y+37	; 0x25
    3374:	9e a1       	ldd	r25, Y+38	; 0x26
    3376:	20 e0       	ldi	r18, 0x00	; 0
    3378:	30 e0       	ldi	r19, 0x00	; 0
    337a:	40 e8       	ldi	r20, 0x80	; 128
    337c:	5f e3       	ldi	r21, 0x3F	; 63
    337e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3382:	88 23       	and	r24, r24
    3384:	2c f4       	brge	.+10     	; 0x3390 <LCD_enuInit+0x68>
		__ticks = 1;
    3386:	81 e0       	ldi	r24, 0x01	; 1
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	9a a3       	std	Y+34, r25	; 0x22
    338c:	89 a3       	std	Y+33, r24	; 0x21
    338e:	3f c0       	rjmp	.+126    	; 0x340e <LCD_enuInit+0xe6>
	else if (__tmp > 65535)
    3390:	6b a1       	ldd	r22, Y+35	; 0x23
    3392:	7c a1       	ldd	r23, Y+36	; 0x24
    3394:	8d a1       	ldd	r24, Y+37	; 0x25
    3396:	9e a1       	ldd	r25, Y+38	; 0x26
    3398:	20 e0       	ldi	r18, 0x00	; 0
    339a:	3f ef       	ldi	r19, 0xFF	; 255
    339c:	4f e7       	ldi	r20, 0x7F	; 127
    339e:	57 e4       	ldi	r21, 0x47	; 71
    33a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33a4:	18 16       	cp	r1, r24
    33a6:	4c f5       	brge	.+82     	; 0x33fa <LCD_enuInit+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33a8:	6f a1       	ldd	r22, Y+39	; 0x27
    33aa:	78 a5       	ldd	r23, Y+40	; 0x28
    33ac:	89 a5       	ldd	r24, Y+41	; 0x29
    33ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    33b0:	20 e0       	ldi	r18, 0x00	; 0
    33b2:	30 e0       	ldi	r19, 0x00	; 0
    33b4:	40 e2       	ldi	r20, 0x20	; 32
    33b6:	51 e4       	ldi	r21, 0x41	; 65
    33b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33bc:	dc 01       	movw	r26, r24
    33be:	cb 01       	movw	r24, r22
    33c0:	bc 01       	movw	r22, r24
    33c2:	cd 01       	movw	r24, r26
    33c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33c8:	dc 01       	movw	r26, r24
    33ca:	cb 01       	movw	r24, r22
    33cc:	9a a3       	std	Y+34, r25	; 0x22
    33ce:	89 a3       	std	Y+33, r24	; 0x21
    33d0:	0f c0       	rjmp	.+30     	; 0x33f0 <LCD_enuInit+0xc8>
    33d2:	80 e9       	ldi	r24, 0x90	; 144
    33d4:	91 e0       	ldi	r25, 0x01	; 1
    33d6:	98 a3       	std	Y+32, r25	; 0x20
    33d8:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    33da:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33dc:	98 a1       	ldd	r25, Y+32	; 0x20
    33de:	01 97       	sbiw	r24, 0x01	; 1
    33e0:	f1 f7       	brne	.-4      	; 0x33de <LCD_enuInit+0xb6>
    33e2:	98 a3       	std	Y+32, r25	; 0x20
    33e4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33e6:	89 a1       	ldd	r24, Y+33	; 0x21
    33e8:	9a a1       	ldd	r25, Y+34	; 0x22
    33ea:	01 97       	sbiw	r24, 0x01	; 1
    33ec:	9a a3       	std	Y+34, r25	; 0x22
    33ee:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33f0:	89 a1       	ldd	r24, Y+33	; 0x21
    33f2:	9a a1       	ldd	r25, Y+34	; 0x22
    33f4:	00 97       	sbiw	r24, 0x00	; 0
    33f6:	69 f7       	brne	.-38     	; 0x33d2 <LCD_enuInit+0xaa>
    33f8:	14 c0       	rjmp	.+40     	; 0x3422 <LCD_enuInit+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33fa:	6b a1       	ldd	r22, Y+35	; 0x23
    33fc:	7c a1       	ldd	r23, Y+36	; 0x24
    33fe:	8d a1       	ldd	r24, Y+37	; 0x25
    3400:	9e a1       	ldd	r25, Y+38	; 0x26
    3402:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3406:	dc 01       	movw	r26, r24
    3408:	cb 01       	movw	r24, r22
    340a:	9a a3       	std	Y+34, r25	; 0x22
    340c:	89 a3       	std	Y+33, r24	; 0x21
    340e:	89 a1       	ldd	r24, Y+33	; 0x21
    3410:	9a a1       	ldd	r25, Y+34	; 0x22
    3412:	9e 8f       	std	Y+30, r25	; 0x1e
    3414:	8d 8f       	std	Y+29, r24	; 0x1d
    3416:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3418:	9e 8d       	ldd	r25, Y+30	; 0x1e
    341a:	01 97       	sbiw	r24, 0x01	; 1
    341c:	f1 f7       	brne	.-4      	; 0x341a <LCD_enuInit+0xf2>
    341e:	9e 8f       	std	Y+30, r25	; 0x1e
    3420:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(32);

	DIO_enuSetPinDirection(EN_GRP , RS_PIN , DIO_u8OUTPUT);
    3422:	81 e0       	ldi	r24, 0x01	; 1
    3424:	61 e0       	ldi	r22, 0x01	; 1
    3426:	41 e0       	ldi	r20, 0x01	; 1
    3428:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_GRP , RW_PIN , DIO_u8OUTPUT);
    342c:	81 e0       	ldi	r24, 0x01	; 1
    342e:	62 e0       	ldi	r22, 0x02	; 2
    3430:	41 e0       	ldi	r20, 0x01	; 1
    3432:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_GRP , EN_PIN , DIO_u8OUTPUT);
    3436:	81 e0       	ldi	r24, 0x01	; 1
    3438:	63 e0       	ldi	r22, 0x03	; 3
    343a:	41 e0       	ldi	r20, 0x01	; 1
    343c:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_GRP , D7_PIN , DIO_u8OUTPUT);
    3440:	80 e0       	ldi	r24, 0x00	; 0
    3442:	67 e0       	ldi	r22, 0x07	; 7
    3444:	41 e0       	ldi	r20, 0x01	; 1
    3446:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_GRP , D6_PIN , DIO_u8OUTPUT);
    344a:	80 e0       	ldi	r24, 0x00	; 0
    344c:	66 e0       	ldi	r22, 0x06	; 6
    344e:	41 e0       	ldi	r20, 0x01	; 1
    3450:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_GRP , D5_PIN , DIO_u8OUTPUT);
    3454:	80 e0       	ldi	r24, 0x00	; 0
    3456:	65 e0       	ldi	r22, 0x05	; 5
    3458:	41 e0       	ldi	r20, 0x01	; 1
    345a:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_GRP , D4_PIN , DIO_u8OUTPUT);
    345e:	80 e0       	ldi	r24, 0x00	; 0
    3460:	64 e0       	ldi	r22, 0x04	; 4
    3462:	41 e0       	ldi	r20, 0x01	; 1
    3464:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <DIO_enuSetPinDirection>
	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW );
	LCD_enuWriteNLatch(0x38);

#elif LCD_u8MODE == FOUR_BIT

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW );
    3468:	81 e0       	ldi	r24, 0x01	; 1
    346a:	61 e0       	ldi	r22, 0x01	; 1
    346c:	40 e0       	ldi	r20, 0x00	; 0
    346e:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(D7_GRP , D7_PIN , DIO_u8LOW );
    3472:	80 e0       	ldi	r24, 0x00	; 0
    3474:	67 e0       	ldi	r22, 0x07	; 7
    3476:	40 e0       	ldi	r20, 0x00	; 0
    3478:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_GRP , D6_PIN , DIO_u8LOW );
    347c:	80 e0       	ldi	r24, 0x00	; 0
    347e:	66 e0       	ldi	r22, 0x06	; 6
    3480:	40 e0       	ldi	r20, 0x00	; 0
    3482:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_GRP , D5_PIN , DIO_u8HIGH);
    3486:	80 e0       	ldi	r24, 0x00	; 0
    3488:	65 e0       	ldi	r22, 0x05	; 5
    348a:	41 e0       	ldi	r20, 0x01	; 1
    348c:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_GRP , D4_PIN , DIO_u8LOW );
    3490:	80 e0       	ldi	r24, 0x00	; 0
    3492:	64 e0       	ldi	r22, 0x04	; 4
    3494:	40 e0       	ldi	r20, 0x00	; 0
    3496:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8HIGH);
    349a:	81 e0       	ldi	r24, 0x01	; 1
    349c:	63 e0       	ldi	r22, 0x03	; 3
    349e:	41 e0       	ldi	r20, 0x01	; 1
    34a0:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>
    34a4:	80 e0       	ldi	r24, 0x00	; 0
    34a6:	90 e0       	ldi	r25, 0x00	; 0
    34a8:	a0 ea       	ldi	r26, 0xA0	; 160
    34aa:	b0 e4       	ldi	r27, 0x40	; 64
    34ac:	89 8f       	std	Y+25, r24	; 0x19
    34ae:	9a 8f       	std	Y+26, r25	; 0x1a
    34b0:	ab 8f       	std	Y+27, r26	; 0x1b
    34b2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34b4:	69 8d       	ldd	r22, Y+25	; 0x19
    34b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34bc:	20 e0       	ldi	r18, 0x00	; 0
    34be:	30 e0       	ldi	r19, 0x00	; 0
    34c0:	4a e7       	ldi	r20, 0x7A	; 122
    34c2:	55 e4       	ldi	r21, 0x45	; 69
    34c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34c8:	dc 01       	movw	r26, r24
    34ca:	cb 01       	movw	r24, r22
    34cc:	8d 8b       	std	Y+21, r24	; 0x15
    34ce:	9e 8b       	std	Y+22, r25	; 0x16
    34d0:	af 8b       	std	Y+23, r26	; 0x17
    34d2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    34d4:	6d 89       	ldd	r22, Y+21	; 0x15
    34d6:	7e 89       	ldd	r23, Y+22	; 0x16
    34d8:	8f 89       	ldd	r24, Y+23	; 0x17
    34da:	98 8d       	ldd	r25, Y+24	; 0x18
    34dc:	20 e0       	ldi	r18, 0x00	; 0
    34de:	30 e0       	ldi	r19, 0x00	; 0
    34e0:	40 e8       	ldi	r20, 0x80	; 128
    34e2:	5f e3       	ldi	r21, 0x3F	; 63
    34e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34e8:	88 23       	and	r24, r24
    34ea:	2c f4       	brge	.+10     	; 0x34f6 <LCD_enuInit+0x1ce>
		__ticks = 1;
    34ec:	81 e0       	ldi	r24, 0x01	; 1
    34ee:	90 e0       	ldi	r25, 0x00	; 0
    34f0:	9c 8b       	std	Y+20, r25	; 0x14
    34f2:	8b 8b       	std	Y+19, r24	; 0x13
    34f4:	3f c0       	rjmp	.+126    	; 0x3574 <LCD_enuInit+0x24c>
	else if (__tmp > 65535)
    34f6:	6d 89       	ldd	r22, Y+21	; 0x15
    34f8:	7e 89       	ldd	r23, Y+22	; 0x16
    34fa:	8f 89       	ldd	r24, Y+23	; 0x17
    34fc:	98 8d       	ldd	r25, Y+24	; 0x18
    34fe:	20 e0       	ldi	r18, 0x00	; 0
    3500:	3f ef       	ldi	r19, 0xFF	; 255
    3502:	4f e7       	ldi	r20, 0x7F	; 127
    3504:	57 e4       	ldi	r21, 0x47	; 71
    3506:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    350a:	18 16       	cp	r1, r24
    350c:	4c f5       	brge	.+82     	; 0x3560 <LCD_enuInit+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    350e:	69 8d       	ldd	r22, Y+25	; 0x19
    3510:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3512:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3514:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3516:	20 e0       	ldi	r18, 0x00	; 0
    3518:	30 e0       	ldi	r19, 0x00	; 0
    351a:	40 e2       	ldi	r20, 0x20	; 32
    351c:	51 e4       	ldi	r21, 0x41	; 65
    351e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3522:	dc 01       	movw	r26, r24
    3524:	cb 01       	movw	r24, r22
    3526:	bc 01       	movw	r22, r24
    3528:	cd 01       	movw	r24, r26
    352a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    352e:	dc 01       	movw	r26, r24
    3530:	cb 01       	movw	r24, r22
    3532:	9c 8b       	std	Y+20, r25	; 0x14
    3534:	8b 8b       	std	Y+19, r24	; 0x13
    3536:	0f c0       	rjmp	.+30     	; 0x3556 <LCD_enuInit+0x22e>
    3538:	80 e9       	ldi	r24, 0x90	; 144
    353a:	91 e0       	ldi	r25, 0x01	; 1
    353c:	9a 8b       	std	Y+18, r25	; 0x12
    353e:	89 8b       	std	Y+17, r24	; 0x11
    3540:	89 89       	ldd	r24, Y+17	; 0x11
    3542:	9a 89       	ldd	r25, Y+18	; 0x12
    3544:	01 97       	sbiw	r24, 0x01	; 1
    3546:	f1 f7       	brne	.-4      	; 0x3544 <LCD_enuInit+0x21c>
    3548:	9a 8b       	std	Y+18, r25	; 0x12
    354a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    354c:	8b 89       	ldd	r24, Y+19	; 0x13
    354e:	9c 89       	ldd	r25, Y+20	; 0x14
    3550:	01 97       	sbiw	r24, 0x01	; 1
    3552:	9c 8b       	std	Y+20, r25	; 0x14
    3554:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3556:	8b 89       	ldd	r24, Y+19	; 0x13
    3558:	9c 89       	ldd	r25, Y+20	; 0x14
    355a:	00 97       	sbiw	r24, 0x00	; 0
    355c:	69 f7       	brne	.-38     	; 0x3538 <LCD_enuInit+0x210>
    355e:	14 c0       	rjmp	.+40     	; 0x3588 <LCD_enuInit+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3560:	6d 89       	ldd	r22, Y+21	; 0x15
    3562:	7e 89       	ldd	r23, Y+22	; 0x16
    3564:	8f 89       	ldd	r24, Y+23	; 0x17
    3566:	98 8d       	ldd	r25, Y+24	; 0x18
    3568:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    356c:	dc 01       	movw	r26, r24
    356e:	cb 01       	movw	r24, r22
    3570:	9c 8b       	std	Y+20, r25	; 0x14
    3572:	8b 8b       	std	Y+19, r24	; 0x13
    3574:	8b 89       	ldd	r24, Y+19	; 0x13
    3576:	9c 89       	ldd	r25, Y+20	; 0x14
    3578:	98 8b       	std	Y+16, r25	; 0x10
    357a:	8f 87       	std	Y+15, r24	; 0x0f
    357c:	8f 85       	ldd	r24, Y+15	; 0x0f
    357e:	98 89       	ldd	r25, Y+16	; 0x10
    3580:	01 97       	sbiw	r24, 0x01	; 1
    3582:	f1 f7       	brne	.-4      	; 0x3580 <LCD_enuInit+0x258>
    3584:	98 8b       	std	Y+16, r25	; 0x10
    3586:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8LOW);
    3588:	81 e0       	ldi	r24, 0x01	; 1
    358a:	63 e0       	ldi	r22, 0x03	; 3
    358c:	40 e0       	ldi	r20, 0x00	; 0
    358e:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>
    3592:	80 e0       	ldi	r24, 0x00	; 0
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	a0 e0       	ldi	r26, 0x00	; 0
    3598:	b2 e4       	ldi	r27, 0x42	; 66
    359a:	8b 87       	std	Y+11, r24	; 0x0b
    359c:	9c 87       	std	Y+12, r25	; 0x0c
    359e:	ad 87       	std	Y+13, r26	; 0x0d
    35a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    35a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    35a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    35a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    35aa:	20 e0       	ldi	r18, 0x00	; 0
    35ac:	30 e0       	ldi	r19, 0x00	; 0
    35ae:	4a e7       	ldi	r20, 0x7A	; 122
    35b0:	55 e4       	ldi	r21, 0x45	; 69
    35b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35b6:	dc 01       	movw	r26, r24
    35b8:	cb 01       	movw	r24, r22
    35ba:	8f 83       	std	Y+7, r24	; 0x07
    35bc:	98 87       	std	Y+8, r25	; 0x08
    35be:	a9 87       	std	Y+9, r26	; 0x09
    35c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35c2:	6f 81       	ldd	r22, Y+7	; 0x07
    35c4:	78 85       	ldd	r23, Y+8	; 0x08
    35c6:	89 85       	ldd	r24, Y+9	; 0x09
    35c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ca:	20 e0       	ldi	r18, 0x00	; 0
    35cc:	30 e0       	ldi	r19, 0x00	; 0
    35ce:	40 e8       	ldi	r20, 0x80	; 128
    35d0:	5f e3       	ldi	r21, 0x3F	; 63
    35d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35d6:	88 23       	and	r24, r24
    35d8:	2c f4       	brge	.+10     	; 0x35e4 <LCD_enuInit+0x2bc>
		__ticks = 1;
    35da:	81 e0       	ldi	r24, 0x01	; 1
    35dc:	90 e0       	ldi	r25, 0x00	; 0
    35de:	9e 83       	std	Y+6, r25	; 0x06
    35e0:	8d 83       	std	Y+5, r24	; 0x05
    35e2:	3f c0       	rjmp	.+126    	; 0x3662 <LCD_enuInit+0x33a>
	else if (__tmp > 65535)
    35e4:	6f 81       	ldd	r22, Y+7	; 0x07
    35e6:	78 85       	ldd	r23, Y+8	; 0x08
    35e8:	89 85       	ldd	r24, Y+9	; 0x09
    35ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ec:	20 e0       	ldi	r18, 0x00	; 0
    35ee:	3f ef       	ldi	r19, 0xFF	; 255
    35f0:	4f e7       	ldi	r20, 0x7F	; 127
    35f2:	57 e4       	ldi	r21, 0x47	; 71
    35f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35f8:	18 16       	cp	r1, r24
    35fa:	4c f5       	brge	.+82     	; 0x364e <LCD_enuInit+0x326>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    35fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3600:	8d 85       	ldd	r24, Y+13	; 0x0d
    3602:	9e 85       	ldd	r25, Y+14	; 0x0e
    3604:	20 e0       	ldi	r18, 0x00	; 0
    3606:	30 e0       	ldi	r19, 0x00	; 0
    3608:	40 e2       	ldi	r20, 0x20	; 32
    360a:	51 e4       	ldi	r21, 0x41	; 65
    360c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3610:	dc 01       	movw	r26, r24
    3612:	cb 01       	movw	r24, r22
    3614:	bc 01       	movw	r22, r24
    3616:	cd 01       	movw	r24, r26
    3618:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    361c:	dc 01       	movw	r26, r24
    361e:	cb 01       	movw	r24, r22
    3620:	9e 83       	std	Y+6, r25	; 0x06
    3622:	8d 83       	std	Y+5, r24	; 0x05
    3624:	0f c0       	rjmp	.+30     	; 0x3644 <LCD_enuInit+0x31c>
    3626:	80 e9       	ldi	r24, 0x90	; 144
    3628:	91 e0       	ldi	r25, 0x01	; 1
    362a:	9c 83       	std	Y+4, r25	; 0x04
    362c:	8b 83       	std	Y+3, r24	; 0x03
    362e:	8b 81       	ldd	r24, Y+3	; 0x03
    3630:	9c 81       	ldd	r25, Y+4	; 0x04
    3632:	01 97       	sbiw	r24, 0x01	; 1
    3634:	f1 f7       	brne	.-4      	; 0x3632 <LCD_enuInit+0x30a>
    3636:	9c 83       	std	Y+4, r25	; 0x04
    3638:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    363a:	8d 81       	ldd	r24, Y+5	; 0x05
    363c:	9e 81       	ldd	r25, Y+6	; 0x06
    363e:	01 97       	sbiw	r24, 0x01	; 1
    3640:	9e 83       	std	Y+6, r25	; 0x06
    3642:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3644:	8d 81       	ldd	r24, Y+5	; 0x05
    3646:	9e 81       	ldd	r25, Y+6	; 0x06
    3648:	00 97       	sbiw	r24, 0x00	; 0
    364a:	69 f7       	brne	.-38     	; 0x3626 <LCD_enuInit+0x2fe>
    364c:	14 c0       	rjmp	.+40     	; 0x3676 <LCD_enuInit+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    364e:	6f 81       	ldd	r22, Y+7	; 0x07
    3650:	78 85       	ldd	r23, Y+8	; 0x08
    3652:	89 85       	ldd	r24, Y+9	; 0x09
    3654:	9a 85       	ldd	r25, Y+10	; 0x0a
    3656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    365a:	dc 01       	movw	r26, r24
    365c:	cb 01       	movw	r24, r22
    365e:	9e 83       	std	Y+6, r25	; 0x06
    3660:	8d 83       	std	Y+5, r24	; 0x05
    3662:	8d 81       	ldd	r24, Y+5	; 0x05
    3664:	9e 81       	ldd	r25, Y+6	; 0x06
    3666:	9a 83       	std	Y+2, r25	; 0x02
    3668:	89 83       	std	Y+1, r24	; 0x01
    366a:	89 81       	ldd	r24, Y+1	; 0x01
    366c:	9a 81       	ldd	r25, Y+2	; 0x02
    366e:	01 97       	sbiw	r24, 0x01	; 1
    3670:	f1 f7       	brne	.-4      	; 0x366e <LCD_enuInit+0x346>
    3672:	9a 83       	std	Y+2, r25	; 0x02
    3674:	89 83       	std	Y+1, r24	; 0x01
	//difference speed bt. atmega & lcd
	_delay_ms(32);

	LCD_enuWriteNLatch(0x28);
    3676:	88 e2       	ldi	r24, 0x28	; 40
    3678:	0e 94 b9 1b 	call	0x3772	; 0x3772 <LCD_enuWriteNLatch>
#else
#error "LCD Mode has a wrong configuration"
#endif

	//Display control
	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW );
    367c:	81 e0       	ldi	r24, 0x01	; 1
    367e:	61 e0       	ldi	r22, 0x01	; 1
    3680:	40 e0       	ldi	r20, 0x00	; 0
    3682:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(0x0f);
    3686:	8f e0       	ldi	r24, 0x0F	; 15
    3688:	0e 94 b9 1b 	call	0x3772	; 0x3772 <LCD_enuWriteNLatch>

	//Display Clear
	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW );
    368c:	81 e0       	ldi	r24, 0x01	; 1
    368e:	61 e0       	ldi	r22, 0x01	; 1
    3690:	40 e0       	ldi	r20, 0x00	; 0
    3692:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(0x01);
    3696:	81 e0       	ldi	r24, 0x01	; 1
    3698:	0e 94 b9 1b 	call	0x3772	; 0x3772 <LCD_enuWriteNLatch>

	//Entry Set
	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW );
    369c:	81 e0       	ldi	r24, 0x01	; 1
    369e:	61 e0       	ldi	r22, 0x01	; 1
    36a0:	40 e0       	ldi	r20, 0x00	; 0
    36a2:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(0x06);
    36a6:	86 e0       	ldi	r24, 0x06	; 6
    36a8:	0e 94 b9 1b 	call	0x3772	; 0x3772 <LCD_enuWriteNLatch>


	return Local_enuErrorState;
    36ac:	8b a5       	ldd	r24, Y+43	; 0x2b
}
    36ae:	ab 96       	adiw	r28, 0x2b	; 43
    36b0:	0f b6       	in	r0, 0x3f	; 63
    36b2:	f8 94       	cli
    36b4:	de bf       	out	0x3e, r29	; 62
    36b6:	0f be       	out	0x3f, r0	; 63
    36b8:	cd bf       	out	0x3d, r28	; 61
    36ba:	cf 91       	pop	r28
    36bc:	df 91       	pop	r29
    36be:	08 95       	ret

000036c0 <LCD_enuWriteData>:

ES_t LCD_enuWriteData(u8 Copy_u8Data )
{
    36c0:	df 93       	push	r29
    36c2:	cf 93       	push	r28
    36c4:	00 d0       	rcall	.+0      	; 0x36c6 <LCD_enuWriteData+0x6>
    36c6:	cd b7       	in	r28, 0x3d	; 61
    36c8:	de b7       	in	r29, 0x3e	; 62
    36ca:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    36cc:	19 82       	std	Y+1, r1	; 0x01

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH );
    36ce:	81 e0       	ldi	r24, 0x01	; 1
    36d0:	61 e0       	ldi	r22, 0x01	; 1
    36d2:	41 e0       	ldi	r20, 0x01	; 1
    36d4:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(Copy_u8Data);
    36d8:	8a 81       	ldd	r24, Y+2	; 0x02
    36da:	0e 94 b9 1b 	call	0x3772	; 0x3772 <LCD_enuWriteNLatch>

	return Local_enuErrorState;
    36de:	89 81       	ldd	r24, Y+1	; 0x01
}
    36e0:	0f 90       	pop	r0
    36e2:	0f 90       	pop	r0
    36e4:	cf 91       	pop	r28
    36e6:	df 91       	pop	r29
    36e8:	08 95       	ret

000036ea <LCD_enuWriteCommand>:

ES_t LCD_enuWriteCommand(u8 Copy_u8Command )
{
    36ea:	df 93       	push	r29
    36ec:	cf 93       	push	r28
    36ee:	00 d0       	rcall	.+0      	; 0x36f0 <LCD_enuWriteCommand+0x6>
    36f0:	cd b7       	in	r28, 0x3d	; 61
    36f2:	de b7       	in	r29, 0x3e	; 62
    36f4:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    36f6:	19 82       	std	Y+1, r1	; 0x01

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW );
    36f8:	81 e0       	ldi	r24, 0x01	; 1
    36fa:	61 e0       	ldi	r22, 0x01	; 1
    36fc:	40 e0       	ldi	r20, 0x00	; 0
    36fe:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(Copy_u8Command);
    3702:	8a 81       	ldd	r24, Y+2	; 0x02
    3704:	0e 94 b9 1b 	call	0x3772	; 0x3772 <LCD_enuWriteNLatch>

	return Local_enuErrorState;
    3708:	89 81       	ldd	r24, Y+1	; 0x01
}
    370a:	0f 90       	pop	r0
    370c:	0f 90       	pop	r0
    370e:	cf 91       	pop	r28
    3710:	df 91       	pop	r29
    3712:	08 95       	ret

00003714 <LCD_enuSendString>:

ES_t LCD_enuSendString(const char * Copy_pcString)
{
    3714:	df 93       	push	r29
    3716:	cf 93       	push	r28
    3718:	00 d0       	rcall	.+0      	; 0x371a <LCD_enuSendString+0x6>
    371a:	0f 92       	push	r0
    371c:	cd b7       	in	r28, 0x3d	; 61
    371e:	de b7       	in	r29, 0x3e	; 62
    3720:	9b 83       	std	Y+3, r25	; 0x03
    3722:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    3724:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pcString != NULL) //(void*)0
    3726:	8a 81       	ldd	r24, Y+2	; 0x02
    3728:	9b 81       	ldd	r25, Y+3	; 0x03
    372a:	00 97       	sbiw	r24, 0x00	; 0
    372c:	c9 f0       	breq	.+50     	; 0x3760 <LCD_enuSendString+0x4c>
    372e:	10 c0       	rjmp	.+32     	; 0x3750 <LCD_enuSendString+0x3c>
	{
		//Null terminator = '\0' , 0x00, 0
		while (*Copy_pcString)
		{
			DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH );
    3730:	81 e0       	ldi	r24, 0x01	; 1
    3732:	61 e0       	ldi	r22, 0x01	; 1
    3734:	41 e0       	ldi	r20, 0x01	; 1
    3736:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>
			LCD_enuWriteNLatch(*Copy_pcString++);
    373a:	ea 81       	ldd	r30, Y+2	; 0x02
    373c:	fb 81       	ldd	r31, Y+3	; 0x03
    373e:	20 81       	ld	r18, Z
    3740:	8a 81       	ldd	r24, Y+2	; 0x02
    3742:	9b 81       	ldd	r25, Y+3	; 0x03
    3744:	01 96       	adiw	r24, 0x01	; 1
    3746:	9b 83       	std	Y+3, r25	; 0x03
    3748:	8a 83       	std	Y+2, r24	; 0x02
    374a:	82 2f       	mov	r24, r18
    374c:	0e 94 b9 1b 	call	0x3772	; 0x3772 <LCD_enuWriteNLatch>
	ES_t Local_enuErrorState = ES_NOK;

	if (Copy_pcString != NULL) //(void*)0
	{
		//Null terminator = '\0' , 0x00, 0
		while (*Copy_pcString)
    3750:	ea 81       	ldd	r30, Y+2	; 0x02
    3752:	fb 81       	ldd	r31, Y+3	; 0x03
    3754:	80 81       	ld	r24, Z
    3756:	88 23       	and	r24, r24
    3758:	59 f7       	brne	.-42     	; 0x3730 <LCD_enuSendString+0x1c>
		{
			DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH );
			LCD_enuWriteNLatch(*Copy_pcString++);
		}
		Local_enuErrorState =ES_OK;
    375a:	81 e0       	ldi	r24, 0x01	; 1
    375c:	89 83       	std	Y+1, r24	; 0x01
    375e:	02 c0       	rjmp	.+4      	; 0x3764 <LCD_enuSendString+0x50>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    3760:	83 e0       	ldi	r24, 0x03	; 3
    3762:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    3764:	89 81       	ldd	r24, Y+1	; 0x01
}
    3766:	0f 90       	pop	r0
    3768:	0f 90       	pop	r0
    376a:	0f 90       	pop	r0
    376c:	cf 91       	pop	r28
    376e:	df 91       	pop	r29
    3770:	08 95       	ret

00003772 <LCD_enuWriteNLatch>:



static ES_t LCD_enuWriteNLatch( u8 Copy_u8Byte)
{
    3772:	df 93       	push	r29
    3774:	cf 93       	push	r28
    3776:	cd b7       	in	r28, 0x3d	; 61
    3778:	de b7       	in	r29, 0x3e	; 62
    377a:	ea 97       	sbiw	r28, 0x3a	; 58
    377c:	0f b6       	in	r0, 0x3f	; 63
    377e:	f8 94       	cli
    3780:	de bf       	out	0x3e, r29	; 62
    3782:	0f be       	out	0x3f, r0	; 63
    3784:	cd bf       	out	0x3d, r28	; 61
    3786:	8a af       	std	Y+58, r24	; 0x3a
	ES_t Local_enuErrorState = ES_NOK;
    3788:	19 ae       	std	Y+57, r1	; 0x39
	//difference speed bt. atmega & lcd
	_delay_ms(32);

#elif LCD_u8MODE == FOUR_BIT

	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8LOW);
    378a:	81 e0       	ldi	r24, 0x01	; 1
    378c:	63 e0       	ldi	r22, 0x03	; 3
    378e:	40 e0       	ldi	r20, 0x00	; 0
    3790:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(RW_GRP , RW_PIN , DIO_u8LOW);
    3794:	81 e0       	ldi	r24, 0x01	; 1
    3796:	62 e0       	ldi	r22, 0x02	; 2
    3798:	40 e0       	ldi	r20, 0x00	; 0
    379a:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>

	//data
	DIO_enuSetPinValue(D7_GRP , D7_PIN , ((Copy_u8Byte>>7)&1) );
    379e:	8a ad       	ldd	r24, Y+58	; 0x3a
    37a0:	98 2f       	mov	r25, r24
    37a2:	99 1f       	adc	r25, r25
    37a4:	99 27       	eor	r25, r25
    37a6:	99 1f       	adc	r25, r25
    37a8:	80 e0       	ldi	r24, 0x00	; 0
    37aa:	67 e0       	ldi	r22, 0x07	; 7
    37ac:	49 2f       	mov	r20, r25
    37ae:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_GRP , D6_PIN , ((Copy_u8Byte>>6)&1) );
    37b2:	8a ad       	ldd	r24, Y+58	; 0x3a
    37b4:	82 95       	swap	r24
    37b6:	86 95       	lsr	r24
    37b8:	86 95       	lsr	r24
    37ba:	83 70       	andi	r24, 0x03	; 3
    37bc:	98 2f       	mov	r25, r24
    37be:	91 70       	andi	r25, 0x01	; 1
    37c0:	80 e0       	ldi	r24, 0x00	; 0
    37c2:	66 e0       	ldi	r22, 0x06	; 6
    37c4:	49 2f       	mov	r20, r25
    37c6:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_GRP , D5_PIN , ((Copy_u8Byte>>5)&1) );
    37ca:	8a ad       	ldd	r24, Y+58	; 0x3a
    37cc:	82 95       	swap	r24
    37ce:	86 95       	lsr	r24
    37d0:	87 70       	andi	r24, 0x07	; 7
    37d2:	98 2f       	mov	r25, r24
    37d4:	91 70       	andi	r25, 0x01	; 1
    37d6:	80 e0       	ldi	r24, 0x00	; 0
    37d8:	65 e0       	ldi	r22, 0x05	; 5
    37da:	49 2f       	mov	r20, r25
    37dc:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_GRP , D4_PIN , ((Copy_u8Byte>>4)&1) );
    37e0:	8a ad       	ldd	r24, Y+58	; 0x3a
    37e2:	82 95       	swap	r24
    37e4:	8f 70       	andi	r24, 0x0F	; 15
    37e6:	98 2f       	mov	r25, r24
    37e8:	91 70       	andi	r25, 0x01	; 1
    37ea:	80 e0       	ldi	r24, 0x00	; 0
    37ec:	64 e0       	ldi	r22, 0x04	; 4
    37ee:	49 2f       	mov	r20, r25
    37f0:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8HIGH);
    37f4:	81 e0       	ldi	r24, 0x01	; 1
    37f6:	63 e0       	ldi	r22, 0x03	; 3
    37f8:	41 e0       	ldi	r20, 0x01	; 1
    37fa:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>
    37fe:	80 e0       	ldi	r24, 0x00	; 0
    3800:	90 e0       	ldi	r25, 0x00	; 0
    3802:	a0 ea       	ldi	r26, 0xA0	; 160
    3804:	b0 e4       	ldi	r27, 0x40	; 64
    3806:	8d ab       	std	Y+53, r24	; 0x35
    3808:	9e ab       	std	Y+54, r25	; 0x36
    380a:	af ab       	std	Y+55, r26	; 0x37
    380c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    380e:	6d a9       	ldd	r22, Y+53	; 0x35
    3810:	7e a9       	ldd	r23, Y+54	; 0x36
    3812:	8f a9       	ldd	r24, Y+55	; 0x37
    3814:	98 ad       	ldd	r25, Y+56	; 0x38
    3816:	20 e0       	ldi	r18, 0x00	; 0
    3818:	30 e0       	ldi	r19, 0x00	; 0
    381a:	4a e7       	ldi	r20, 0x7A	; 122
    381c:	55 e4       	ldi	r21, 0x45	; 69
    381e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3822:	dc 01       	movw	r26, r24
    3824:	cb 01       	movw	r24, r22
    3826:	89 ab       	std	Y+49, r24	; 0x31
    3828:	9a ab       	std	Y+50, r25	; 0x32
    382a:	ab ab       	std	Y+51, r26	; 0x33
    382c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    382e:	69 a9       	ldd	r22, Y+49	; 0x31
    3830:	7a a9       	ldd	r23, Y+50	; 0x32
    3832:	8b a9       	ldd	r24, Y+51	; 0x33
    3834:	9c a9       	ldd	r25, Y+52	; 0x34
    3836:	20 e0       	ldi	r18, 0x00	; 0
    3838:	30 e0       	ldi	r19, 0x00	; 0
    383a:	40 e8       	ldi	r20, 0x80	; 128
    383c:	5f e3       	ldi	r21, 0x3F	; 63
    383e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3842:	88 23       	and	r24, r24
    3844:	2c f4       	brge	.+10     	; 0x3850 <LCD_enuWriteNLatch+0xde>
		__ticks = 1;
    3846:	81 e0       	ldi	r24, 0x01	; 1
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	98 ab       	std	Y+48, r25	; 0x30
    384c:	8f a7       	std	Y+47, r24	; 0x2f
    384e:	3f c0       	rjmp	.+126    	; 0x38ce <LCD_enuWriteNLatch+0x15c>
	else if (__tmp > 65535)
    3850:	69 a9       	ldd	r22, Y+49	; 0x31
    3852:	7a a9       	ldd	r23, Y+50	; 0x32
    3854:	8b a9       	ldd	r24, Y+51	; 0x33
    3856:	9c a9       	ldd	r25, Y+52	; 0x34
    3858:	20 e0       	ldi	r18, 0x00	; 0
    385a:	3f ef       	ldi	r19, 0xFF	; 255
    385c:	4f e7       	ldi	r20, 0x7F	; 127
    385e:	57 e4       	ldi	r21, 0x47	; 71
    3860:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3864:	18 16       	cp	r1, r24
    3866:	4c f5       	brge	.+82     	; 0x38ba <LCD_enuWriteNLatch+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3868:	6d a9       	ldd	r22, Y+53	; 0x35
    386a:	7e a9       	ldd	r23, Y+54	; 0x36
    386c:	8f a9       	ldd	r24, Y+55	; 0x37
    386e:	98 ad       	ldd	r25, Y+56	; 0x38
    3870:	20 e0       	ldi	r18, 0x00	; 0
    3872:	30 e0       	ldi	r19, 0x00	; 0
    3874:	40 e2       	ldi	r20, 0x20	; 32
    3876:	51 e4       	ldi	r21, 0x41	; 65
    3878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    387c:	dc 01       	movw	r26, r24
    387e:	cb 01       	movw	r24, r22
    3880:	bc 01       	movw	r22, r24
    3882:	cd 01       	movw	r24, r26
    3884:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3888:	dc 01       	movw	r26, r24
    388a:	cb 01       	movw	r24, r22
    388c:	98 ab       	std	Y+48, r25	; 0x30
    388e:	8f a7       	std	Y+47, r24	; 0x2f
    3890:	0f c0       	rjmp	.+30     	; 0x38b0 <LCD_enuWriteNLatch+0x13e>
    3892:	80 e9       	ldi	r24, 0x90	; 144
    3894:	91 e0       	ldi	r25, 0x01	; 1
    3896:	9e a7       	std	Y+46, r25	; 0x2e
    3898:	8d a7       	std	Y+45, r24	; 0x2d
    389a:	8d a5       	ldd	r24, Y+45	; 0x2d
    389c:	9e a5       	ldd	r25, Y+46	; 0x2e
    389e:	01 97       	sbiw	r24, 0x01	; 1
    38a0:	f1 f7       	brne	.-4      	; 0x389e <LCD_enuWriteNLatch+0x12c>
    38a2:	9e a7       	std	Y+46, r25	; 0x2e
    38a4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    38a8:	98 a9       	ldd	r25, Y+48	; 0x30
    38aa:	01 97       	sbiw	r24, 0x01	; 1
    38ac:	98 ab       	std	Y+48, r25	; 0x30
    38ae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    38b2:	98 a9       	ldd	r25, Y+48	; 0x30
    38b4:	00 97       	sbiw	r24, 0x00	; 0
    38b6:	69 f7       	brne	.-38     	; 0x3892 <LCD_enuWriteNLatch+0x120>
    38b8:	14 c0       	rjmp	.+40     	; 0x38e2 <LCD_enuWriteNLatch+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38ba:	69 a9       	ldd	r22, Y+49	; 0x31
    38bc:	7a a9       	ldd	r23, Y+50	; 0x32
    38be:	8b a9       	ldd	r24, Y+51	; 0x33
    38c0:	9c a9       	ldd	r25, Y+52	; 0x34
    38c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38c6:	dc 01       	movw	r26, r24
    38c8:	cb 01       	movw	r24, r22
    38ca:	98 ab       	std	Y+48, r25	; 0x30
    38cc:	8f a7       	std	Y+47, r24	; 0x2f
    38ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    38d0:	98 a9       	ldd	r25, Y+48	; 0x30
    38d2:	9c a7       	std	Y+44, r25	; 0x2c
    38d4:	8b a7       	std	Y+43, r24	; 0x2b
    38d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    38d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    38da:	01 97       	sbiw	r24, 0x01	; 1
    38dc:	f1 f7       	brne	.-4      	; 0x38da <LCD_enuWriteNLatch+0x168>
    38de:	9c a7       	std	Y+44, r25	; 0x2c
    38e0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8LOW);
    38e2:	81 e0       	ldi	r24, 0x01	; 1
    38e4:	63 e0       	ldi	r22, 0x03	; 3
    38e6:	40 e0       	ldi	r20, 0x00	; 0
    38e8:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>
    38ec:	80 e0       	ldi	r24, 0x00	; 0
    38ee:	90 e0       	ldi	r25, 0x00	; 0
    38f0:	a0 ea       	ldi	r26, 0xA0	; 160
    38f2:	b1 e4       	ldi	r27, 0x41	; 65
    38f4:	8f a3       	std	Y+39, r24	; 0x27
    38f6:	98 a7       	std	Y+40, r25	; 0x28
    38f8:	a9 a7       	std	Y+41, r26	; 0x29
    38fa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38fc:	6f a1       	ldd	r22, Y+39	; 0x27
    38fe:	78 a5       	ldd	r23, Y+40	; 0x28
    3900:	89 a5       	ldd	r24, Y+41	; 0x29
    3902:	9a a5       	ldd	r25, Y+42	; 0x2a
    3904:	20 e0       	ldi	r18, 0x00	; 0
    3906:	30 e0       	ldi	r19, 0x00	; 0
    3908:	4a e7       	ldi	r20, 0x7A	; 122
    390a:	55 e4       	ldi	r21, 0x45	; 69
    390c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3910:	dc 01       	movw	r26, r24
    3912:	cb 01       	movw	r24, r22
    3914:	8b a3       	std	Y+35, r24	; 0x23
    3916:	9c a3       	std	Y+36, r25	; 0x24
    3918:	ad a3       	std	Y+37, r26	; 0x25
    391a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    391c:	6b a1       	ldd	r22, Y+35	; 0x23
    391e:	7c a1       	ldd	r23, Y+36	; 0x24
    3920:	8d a1       	ldd	r24, Y+37	; 0x25
    3922:	9e a1       	ldd	r25, Y+38	; 0x26
    3924:	20 e0       	ldi	r18, 0x00	; 0
    3926:	30 e0       	ldi	r19, 0x00	; 0
    3928:	40 e8       	ldi	r20, 0x80	; 128
    392a:	5f e3       	ldi	r21, 0x3F	; 63
    392c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3930:	88 23       	and	r24, r24
    3932:	2c f4       	brge	.+10     	; 0x393e <LCD_enuWriteNLatch+0x1cc>
		__ticks = 1;
    3934:	81 e0       	ldi	r24, 0x01	; 1
    3936:	90 e0       	ldi	r25, 0x00	; 0
    3938:	9a a3       	std	Y+34, r25	; 0x22
    393a:	89 a3       	std	Y+33, r24	; 0x21
    393c:	3f c0       	rjmp	.+126    	; 0x39bc <LCD_enuWriteNLatch+0x24a>
	else if (__tmp > 65535)
    393e:	6b a1       	ldd	r22, Y+35	; 0x23
    3940:	7c a1       	ldd	r23, Y+36	; 0x24
    3942:	8d a1       	ldd	r24, Y+37	; 0x25
    3944:	9e a1       	ldd	r25, Y+38	; 0x26
    3946:	20 e0       	ldi	r18, 0x00	; 0
    3948:	3f ef       	ldi	r19, 0xFF	; 255
    394a:	4f e7       	ldi	r20, 0x7F	; 127
    394c:	57 e4       	ldi	r21, 0x47	; 71
    394e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3952:	18 16       	cp	r1, r24
    3954:	4c f5       	brge	.+82     	; 0x39a8 <LCD_enuWriteNLatch+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3956:	6f a1       	ldd	r22, Y+39	; 0x27
    3958:	78 a5       	ldd	r23, Y+40	; 0x28
    395a:	89 a5       	ldd	r24, Y+41	; 0x29
    395c:	9a a5       	ldd	r25, Y+42	; 0x2a
    395e:	20 e0       	ldi	r18, 0x00	; 0
    3960:	30 e0       	ldi	r19, 0x00	; 0
    3962:	40 e2       	ldi	r20, 0x20	; 32
    3964:	51 e4       	ldi	r21, 0x41	; 65
    3966:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    396a:	dc 01       	movw	r26, r24
    396c:	cb 01       	movw	r24, r22
    396e:	bc 01       	movw	r22, r24
    3970:	cd 01       	movw	r24, r26
    3972:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3976:	dc 01       	movw	r26, r24
    3978:	cb 01       	movw	r24, r22
    397a:	9a a3       	std	Y+34, r25	; 0x22
    397c:	89 a3       	std	Y+33, r24	; 0x21
    397e:	0f c0       	rjmp	.+30     	; 0x399e <LCD_enuWriteNLatch+0x22c>
    3980:	80 e9       	ldi	r24, 0x90	; 144
    3982:	91 e0       	ldi	r25, 0x01	; 1
    3984:	98 a3       	std	Y+32, r25	; 0x20
    3986:	8f 8f       	std	Y+31, r24	; 0x1f
    3988:	8f 8d       	ldd	r24, Y+31	; 0x1f
    398a:	98 a1       	ldd	r25, Y+32	; 0x20
    398c:	01 97       	sbiw	r24, 0x01	; 1
    398e:	f1 f7       	brne	.-4      	; 0x398c <LCD_enuWriteNLatch+0x21a>
    3990:	98 a3       	std	Y+32, r25	; 0x20
    3992:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3994:	89 a1       	ldd	r24, Y+33	; 0x21
    3996:	9a a1       	ldd	r25, Y+34	; 0x22
    3998:	01 97       	sbiw	r24, 0x01	; 1
    399a:	9a a3       	std	Y+34, r25	; 0x22
    399c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    399e:	89 a1       	ldd	r24, Y+33	; 0x21
    39a0:	9a a1       	ldd	r25, Y+34	; 0x22
    39a2:	00 97       	sbiw	r24, 0x00	; 0
    39a4:	69 f7       	brne	.-38     	; 0x3980 <LCD_enuWriteNLatch+0x20e>
    39a6:	14 c0       	rjmp	.+40     	; 0x39d0 <LCD_enuWriteNLatch+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39a8:	6b a1       	ldd	r22, Y+35	; 0x23
    39aa:	7c a1       	ldd	r23, Y+36	; 0x24
    39ac:	8d a1       	ldd	r24, Y+37	; 0x25
    39ae:	9e a1       	ldd	r25, Y+38	; 0x26
    39b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39b4:	dc 01       	movw	r26, r24
    39b6:	cb 01       	movw	r24, r22
    39b8:	9a a3       	std	Y+34, r25	; 0x22
    39ba:	89 a3       	std	Y+33, r24	; 0x21
    39bc:	89 a1       	ldd	r24, Y+33	; 0x21
    39be:	9a a1       	ldd	r25, Y+34	; 0x22
    39c0:	9e 8f       	std	Y+30, r25	; 0x1e
    39c2:	8d 8f       	std	Y+29, r24	; 0x1d
    39c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    39c8:	01 97       	sbiw	r24, 0x01	; 1
    39ca:	f1 f7       	brne	.-4      	; 0x39c8 <LCD_enuWriteNLatch+0x256>
    39cc:	9e 8f       	std	Y+30, r25	; 0x1e
    39ce:	8d 8f       	std	Y+29, r24	; 0x1d
	//difference speed bt. atmega & lcd
	_delay_ms(20);

	DIO_enuSetPinValue(D7_GRP , D7_PIN , ((Copy_u8Byte>>3)&1) );
    39d0:	8a ad       	ldd	r24, Y+58	; 0x3a
    39d2:	86 95       	lsr	r24
    39d4:	86 95       	lsr	r24
    39d6:	86 95       	lsr	r24
    39d8:	98 2f       	mov	r25, r24
    39da:	91 70       	andi	r25, 0x01	; 1
    39dc:	80 e0       	ldi	r24, 0x00	; 0
    39de:	67 e0       	ldi	r22, 0x07	; 7
    39e0:	49 2f       	mov	r20, r25
    39e2:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_GRP , D6_PIN , ((Copy_u8Byte>>2)&1) );
    39e6:	8a ad       	ldd	r24, Y+58	; 0x3a
    39e8:	86 95       	lsr	r24
    39ea:	86 95       	lsr	r24
    39ec:	98 2f       	mov	r25, r24
    39ee:	91 70       	andi	r25, 0x01	; 1
    39f0:	80 e0       	ldi	r24, 0x00	; 0
    39f2:	66 e0       	ldi	r22, 0x06	; 6
    39f4:	49 2f       	mov	r20, r25
    39f6:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_GRP , D5_PIN , ((Copy_u8Byte>>1)&1) );
    39fa:	8a ad       	ldd	r24, Y+58	; 0x3a
    39fc:	86 95       	lsr	r24
    39fe:	98 2f       	mov	r25, r24
    3a00:	91 70       	andi	r25, 0x01	; 1
    3a02:	80 e0       	ldi	r24, 0x00	; 0
    3a04:	65 e0       	ldi	r22, 0x05	; 5
    3a06:	49 2f       	mov	r20, r25
    3a08:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_GRP , D4_PIN , ((Copy_u8Byte>>0)&1) );
    3a0c:	8a ad       	ldd	r24, Y+58	; 0x3a
    3a0e:	98 2f       	mov	r25, r24
    3a10:	91 70       	andi	r25, 0x01	; 1
    3a12:	80 e0       	ldi	r24, 0x00	; 0
    3a14:	64 e0       	ldi	r22, 0x04	; 4
    3a16:	49 2f       	mov	r20, r25
    3a18:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>


	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8HIGH);
    3a1c:	81 e0       	ldi	r24, 0x01	; 1
    3a1e:	63 e0       	ldi	r22, 0x03	; 3
    3a20:	41 e0       	ldi	r20, 0x01	; 1
    3a22:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>
    3a26:	80 e0       	ldi	r24, 0x00	; 0
    3a28:	90 e0       	ldi	r25, 0x00	; 0
    3a2a:	a0 ea       	ldi	r26, 0xA0	; 160
    3a2c:	b0 e4       	ldi	r27, 0x40	; 64
    3a2e:	89 8f       	std	Y+25, r24	; 0x19
    3a30:	9a 8f       	std	Y+26, r25	; 0x1a
    3a32:	ab 8f       	std	Y+27, r26	; 0x1b
    3a34:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a36:	69 8d       	ldd	r22, Y+25	; 0x19
    3a38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a3e:	20 e0       	ldi	r18, 0x00	; 0
    3a40:	30 e0       	ldi	r19, 0x00	; 0
    3a42:	4a e7       	ldi	r20, 0x7A	; 122
    3a44:	55 e4       	ldi	r21, 0x45	; 69
    3a46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a4a:	dc 01       	movw	r26, r24
    3a4c:	cb 01       	movw	r24, r22
    3a4e:	8d 8b       	std	Y+21, r24	; 0x15
    3a50:	9e 8b       	std	Y+22, r25	; 0x16
    3a52:	af 8b       	std	Y+23, r26	; 0x17
    3a54:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a56:	6d 89       	ldd	r22, Y+21	; 0x15
    3a58:	7e 89       	ldd	r23, Y+22	; 0x16
    3a5a:	8f 89       	ldd	r24, Y+23	; 0x17
    3a5c:	98 8d       	ldd	r25, Y+24	; 0x18
    3a5e:	20 e0       	ldi	r18, 0x00	; 0
    3a60:	30 e0       	ldi	r19, 0x00	; 0
    3a62:	40 e8       	ldi	r20, 0x80	; 128
    3a64:	5f e3       	ldi	r21, 0x3F	; 63
    3a66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a6a:	88 23       	and	r24, r24
    3a6c:	2c f4       	brge	.+10     	; 0x3a78 <LCD_enuWriteNLatch+0x306>
		__ticks = 1;
    3a6e:	81 e0       	ldi	r24, 0x01	; 1
    3a70:	90 e0       	ldi	r25, 0x00	; 0
    3a72:	9c 8b       	std	Y+20, r25	; 0x14
    3a74:	8b 8b       	std	Y+19, r24	; 0x13
    3a76:	3f c0       	rjmp	.+126    	; 0x3af6 <LCD_enuWriteNLatch+0x384>
	else if (__tmp > 65535)
    3a78:	6d 89       	ldd	r22, Y+21	; 0x15
    3a7a:	7e 89       	ldd	r23, Y+22	; 0x16
    3a7c:	8f 89       	ldd	r24, Y+23	; 0x17
    3a7e:	98 8d       	ldd	r25, Y+24	; 0x18
    3a80:	20 e0       	ldi	r18, 0x00	; 0
    3a82:	3f ef       	ldi	r19, 0xFF	; 255
    3a84:	4f e7       	ldi	r20, 0x7F	; 127
    3a86:	57 e4       	ldi	r21, 0x47	; 71
    3a88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a8c:	18 16       	cp	r1, r24
    3a8e:	4c f5       	brge	.+82     	; 0x3ae2 <LCD_enuWriteNLatch+0x370>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a90:	69 8d       	ldd	r22, Y+25	; 0x19
    3a92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a98:	20 e0       	ldi	r18, 0x00	; 0
    3a9a:	30 e0       	ldi	r19, 0x00	; 0
    3a9c:	40 e2       	ldi	r20, 0x20	; 32
    3a9e:	51 e4       	ldi	r21, 0x41	; 65
    3aa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aa4:	dc 01       	movw	r26, r24
    3aa6:	cb 01       	movw	r24, r22
    3aa8:	bc 01       	movw	r22, r24
    3aaa:	cd 01       	movw	r24, r26
    3aac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ab0:	dc 01       	movw	r26, r24
    3ab2:	cb 01       	movw	r24, r22
    3ab4:	9c 8b       	std	Y+20, r25	; 0x14
    3ab6:	8b 8b       	std	Y+19, r24	; 0x13
    3ab8:	0f c0       	rjmp	.+30     	; 0x3ad8 <LCD_enuWriteNLatch+0x366>
    3aba:	80 e9       	ldi	r24, 0x90	; 144
    3abc:	91 e0       	ldi	r25, 0x01	; 1
    3abe:	9a 8b       	std	Y+18, r25	; 0x12
    3ac0:	89 8b       	std	Y+17, r24	; 0x11
    3ac2:	89 89       	ldd	r24, Y+17	; 0x11
    3ac4:	9a 89       	ldd	r25, Y+18	; 0x12
    3ac6:	01 97       	sbiw	r24, 0x01	; 1
    3ac8:	f1 f7       	brne	.-4      	; 0x3ac6 <LCD_enuWriteNLatch+0x354>
    3aca:	9a 8b       	std	Y+18, r25	; 0x12
    3acc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ace:	8b 89       	ldd	r24, Y+19	; 0x13
    3ad0:	9c 89       	ldd	r25, Y+20	; 0x14
    3ad2:	01 97       	sbiw	r24, 0x01	; 1
    3ad4:	9c 8b       	std	Y+20, r25	; 0x14
    3ad6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ad8:	8b 89       	ldd	r24, Y+19	; 0x13
    3ada:	9c 89       	ldd	r25, Y+20	; 0x14
    3adc:	00 97       	sbiw	r24, 0x00	; 0
    3ade:	69 f7       	brne	.-38     	; 0x3aba <LCD_enuWriteNLatch+0x348>
    3ae0:	14 c0       	rjmp	.+40     	; 0x3b0a <LCD_enuWriteNLatch+0x398>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ae2:	6d 89       	ldd	r22, Y+21	; 0x15
    3ae4:	7e 89       	ldd	r23, Y+22	; 0x16
    3ae6:	8f 89       	ldd	r24, Y+23	; 0x17
    3ae8:	98 8d       	ldd	r25, Y+24	; 0x18
    3aea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aee:	dc 01       	movw	r26, r24
    3af0:	cb 01       	movw	r24, r22
    3af2:	9c 8b       	std	Y+20, r25	; 0x14
    3af4:	8b 8b       	std	Y+19, r24	; 0x13
    3af6:	8b 89       	ldd	r24, Y+19	; 0x13
    3af8:	9c 89       	ldd	r25, Y+20	; 0x14
    3afa:	98 8b       	std	Y+16, r25	; 0x10
    3afc:	8f 87       	std	Y+15, r24	; 0x0f
    3afe:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b00:	98 89       	ldd	r25, Y+16	; 0x10
    3b02:	01 97       	sbiw	r24, 0x01	; 1
    3b04:	f1 f7       	brne	.-4      	; 0x3b02 <LCD_enuWriteNLatch+0x390>
    3b06:	98 8b       	std	Y+16, r25	; 0x10
    3b08:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8LOW);
    3b0a:	81 e0       	ldi	r24, 0x01	; 1
    3b0c:	63 e0       	ldi	r22, 0x03	; 3
    3b0e:	40 e0       	ldi	r20, 0x00	; 0
    3b10:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>
    3b14:	80 e0       	ldi	r24, 0x00	; 0
    3b16:	90 e0       	ldi	r25, 0x00	; 0
    3b18:	a0 e0       	ldi	r26, 0x00	; 0
    3b1a:	b2 e4       	ldi	r27, 0x42	; 66
    3b1c:	8b 87       	std	Y+11, r24	; 0x0b
    3b1e:	9c 87       	std	Y+12, r25	; 0x0c
    3b20:	ad 87       	std	Y+13, r26	; 0x0d
    3b22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b24:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b26:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b28:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b2c:	20 e0       	ldi	r18, 0x00	; 0
    3b2e:	30 e0       	ldi	r19, 0x00	; 0
    3b30:	4a e7       	ldi	r20, 0x7A	; 122
    3b32:	55 e4       	ldi	r21, 0x45	; 69
    3b34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b38:	dc 01       	movw	r26, r24
    3b3a:	cb 01       	movw	r24, r22
    3b3c:	8f 83       	std	Y+7, r24	; 0x07
    3b3e:	98 87       	std	Y+8, r25	; 0x08
    3b40:	a9 87       	std	Y+9, r26	; 0x09
    3b42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b44:	6f 81       	ldd	r22, Y+7	; 0x07
    3b46:	78 85       	ldd	r23, Y+8	; 0x08
    3b48:	89 85       	ldd	r24, Y+9	; 0x09
    3b4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b4c:	20 e0       	ldi	r18, 0x00	; 0
    3b4e:	30 e0       	ldi	r19, 0x00	; 0
    3b50:	40 e8       	ldi	r20, 0x80	; 128
    3b52:	5f e3       	ldi	r21, 0x3F	; 63
    3b54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b58:	88 23       	and	r24, r24
    3b5a:	2c f4       	brge	.+10     	; 0x3b66 <LCD_enuWriteNLatch+0x3f4>
		__ticks = 1;
    3b5c:	81 e0       	ldi	r24, 0x01	; 1
    3b5e:	90 e0       	ldi	r25, 0x00	; 0
    3b60:	9e 83       	std	Y+6, r25	; 0x06
    3b62:	8d 83       	std	Y+5, r24	; 0x05
    3b64:	3f c0       	rjmp	.+126    	; 0x3be4 <LCD_enuWriteNLatch+0x472>
	else if (__tmp > 65535)
    3b66:	6f 81       	ldd	r22, Y+7	; 0x07
    3b68:	78 85       	ldd	r23, Y+8	; 0x08
    3b6a:	89 85       	ldd	r24, Y+9	; 0x09
    3b6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b6e:	20 e0       	ldi	r18, 0x00	; 0
    3b70:	3f ef       	ldi	r19, 0xFF	; 255
    3b72:	4f e7       	ldi	r20, 0x7F	; 127
    3b74:	57 e4       	ldi	r21, 0x47	; 71
    3b76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b7a:	18 16       	cp	r1, r24
    3b7c:	4c f5       	brge	.+82     	; 0x3bd0 <LCD_enuWriteNLatch+0x45e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b80:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b82:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b84:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b86:	20 e0       	ldi	r18, 0x00	; 0
    3b88:	30 e0       	ldi	r19, 0x00	; 0
    3b8a:	40 e2       	ldi	r20, 0x20	; 32
    3b8c:	51 e4       	ldi	r21, 0x41	; 65
    3b8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b92:	dc 01       	movw	r26, r24
    3b94:	cb 01       	movw	r24, r22
    3b96:	bc 01       	movw	r22, r24
    3b98:	cd 01       	movw	r24, r26
    3b9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b9e:	dc 01       	movw	r26, r24
    3ba0:	cb 01       	movw	r24, r22
    3ba2:	9e 83       	std	Y+6, r25	; 0x06
    3ba4:	8d 83       	std	Y+5, r24	; 0x05
    3ba6:	0f c0       	rjmp	.+30     	; 0x3bc6 <LCD_enuWriteNLatch+0x454>
    3ba8:	80 e9       	ldi	r24, 0x90	; 144
    3baa:	91 e0       	ldi	r25, 0x01	; 1
    3bac:	9c 83       	std	Y+4, r25	; 0x04
    3bae:	8b 83       	std	Y+3, r24	; 0x03
    3bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    3bb2:	9c 81       	ldd	r25, Y+4	; 0x04
    3bb4:	01 97       	sbiw	r24, 0x01	; 1
    3bb6:	f1 f7       	brne	.-4      	; 0x3bb4 <LCD_enuWriteNLatch+0x442>
    3bb8:	9c 83       	std	Y+4, r25	; 0x04
    3bba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bbc:	8d 81       	ldd	r24, Y+5	; 0x05
    3bbe:	9e 81       	ldd	r25, Y+6	; 0x06
    3bc0:	01 97       	sbiw	r24, 0x01	; 1
    3bc2:	9e 83       	std	Y+6, r25	; 0x06
    3bc4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bc6:	8d 81       	ldd	r24, Y+5	; 0x05
    3bc8:	9e 81       	ldd	r25, Y+6	; 0x06
    3bca:	00 97       	sbiw	r24, 0x00	; 0
    3bcc:	69 f7       	brne	.-38     	; 0x3ba8 <LCD_enuWriteNLatch+0x436>
    3bce:	14 c0       	rjmp	.+40     	; 0x3bf8 <LCD_enuWriteNLatch+0x486>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bd0:	6f 81       	ldd	r22, Y+7	; 0x07
    3bd2:	78 85       	ldd	r23, Y+8	; 0x08
    3bd4:	89 85       	ldd	r24, Y+9	; 0x09
    3bd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bdc:	dc 01       	movw	r26, r24
    3bde:	cb 01       	movw	r24, r22
    3be0:	9e 83       	std	Y+6, r25	; 0x06
    3be2:	8d 83       	std	Y+5, r24	; 0x05
    3be4:	8d 81       	ldd	r24, Y+5	; 0x05
    3be6:	9e 81       	ldd	r25, Y+6	; 0x06
    3be8:	9a 83       	std	Y+2, r25	; 0x02
    3bea:	89 83       	std	Y+1, r24	; 0x01
    3bec:	89 81       	ldd	r24, Y+1	; 0x01
    3bee:	9a 81       	ldd	r25, Y+2	; 0x02
    3bf0:	01 97       	sbiw	r24, 0x01	; 1
    3bf2:	f1 f7       	brne	.-4      	; 0x3bf0 <LCD_enuWriteNLatch+0x47e>
    3bf4:	9a 83       	std	Y+2, r25	; 0x02
    3bf6:	89 83       	std	Y+1, r24	; 0x01
	//difference speed bt. atmega & lcd
	_delay_ms(32);
#else
#error "LCD Mode has a wrong configuration"
#endif
	return Local_enuErrorState;
    3bf8:	89 ad       	ldd	r24, Y+57	; 0x39
}
    3bfa:	ea 96       	adiw	r28, 0x3a	; 58
    3bfc:	0f b6       	in	r0, 0x3f	; 63
    3bfe:	f8 94       	cli
    3c00:	de bf       	out	0x3e, r29	; 62
    3c02:	0f be       	out	0x3f, r0	; 63
    3c04:	cd bf       	out	0x3d, r28	; 61
    3c06:	cf 91       	pop	r28
    3c08:	df 91       	pop	r29
    3c0a:	08 95       	ret

00003c0c <LCD_enuWriteIntegerNum>:

ES_t LCD_enuWriteIntegerNum(s32 Copy_s32Num)
{
    3c0c:	df 93       	push	r29
    3c0e:	cf 93       	push	r28
    3c10:	cd b7       	in	r28, 0x3d	; 61
    3c12:	de b7       	in	r29, 0x3e	; 62
    3c14:	2b 97       	sbiw	r28, 0x0b	; 11
    3c16:	0f b6       	in	r0, 0x3f	; 63
    3c18:	f8 94       	cli
    3c1a:	de bf       	out	0x3e, r29	; 62
    3c1c:	0f be       	out	0x3f, r0	; 63
    3c1e:	cd bf       	out	0x3d, r28	; 61
    3c20:	68 87       	std	Y+8, r22	; 0x08
    3c22:	79 87       	std	Y+9, r23	; 0x09
    3c24:	8a 87       	std	Y+10, r24	; 0x0a
    3c26:	9b 87       	std	Y+11, r25	; 0x0b
	ES_t Local_enuErrorState = ES_NOK;
    3c28:	1f 82       	std	Y+7, r1	; 0x07

	s32 Local_s32Reverse=0;
    3c2a:	1b 82       	std	Y+3, r1	; 0x03
    3c2c:	1c 82       	std	Y+4, r1	; 0x04
    3c2e:	1d 82       	std	Y+5, r1	; 0x05
    3c30:	1e 82       	std	Y+6, r1	; 0x06
	u8 Local_u8Remainder=0 , Local_u8NumDigit=0;
    3c32:	1a 82       	std	Y+2, r1	; 0x02
    3c34:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_s32Num <0)
    3c36:	88 85       	ldd	r24, Y+8	; 0x08
    3c38:	99 85       	ldd	r25, Y+9	; 0x09
    3c3a:	aa 85       	ldd	r26, Y+10	; 0x0a
    3c3c:	bb 85       	ldd	r27, Y+11	; 0x0b
    3c3e:	bb 23       	and	r27, r27
    3c40:	0c f0       	brlt	.+2      	; 0x3c44 <LCD_enuWriteIntegerNum+0x38>
    3c42:	57 c0       	rjmp	.+174    	; 0x3cf2 <LCD_enuWriteIntegerNum+0xe6>
	{
		DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    3c44:	81 e0       	ldi	r24, 0x01	; 1
    3c46:	61 e0       	ldi	r22, 0x01	; 1
    3c48:	41 e0       	ldi	r20, 0x01	; 1
    3c4a:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>
		LCD_enuWriteNLatch('-');
    3c4e:	8d e2       	ldi	r24, 0x2D	; 45
    3c50:	0e 94 b9 1b 	call	0x3772	; 0x3772 <LCD_enuWriteNLatch>
		Copy_s32Num *= -1 ;
    3c54:	88 85       	ldd	r24, Y+8	; 0x08
    3c56:	99 85       	ldd	r25, Y+9	; 0x09
    3c58:	aa 85       	ldd	r26, Y+10	; 0x0a
    3c5a:	bb 85       	ldd	r27, Y+11	; 0x0b
    3c5c:	b0 95       	com	r27
    3c5e:	a0 95       	com	r26
    3c60:	90 95       	com	r25
    3c62:	81 95       	neg	r24
    3c64:	9f 4f       	sbci	r25, 0xFF	; 255
    3c66:	af 4f       	sbci	r26, 0xFF	; 255
    3c68:	bf 4f       	sbci	r27, 0xFF	; 255
    3c6a:	88 87       	std	Y+8, r24	; 0x08
    3c6c:	99 87       	std	Y+9, r25	; 0x09
    3c6e:	aa 87       	std	Y+10, r26	; 0x0a
    3c70:	bb 87       	std	Y+11, r27	; 0x0b
    3c72:	3f c0       	rjmp	.+126    	; 0x3cf2 <LCD_enuWriteIntegerNum+0xe6>
	}
	while (Copy_s32Num)
	{
		Local_u8Remainder = Copy_s32Num % 10;
    3c74:	88 85       	ldd	r24, Y+8	; 0x08
    3c76:	99 85       	ldd	r25, Y+9	; 0x09
    3c78:	aa 85       	ldd	r26, Y+10	; 0x0a
    3c7a:	bb 85       	ldd	r27, Y+11	; 0x0b
    3c7c:	2a e0       	ldi	r18, 0x0A	; 10
    3c7e:	30 e0       	ldi	r19, 0x00	; 0
    3c80:	40 e0       	ldi	r20, 0x00	; 0
    3c82:	50 e0       	ldi	r21, 0x00	; 0
    3c84:	bc 01       	movw	r22, r24
    3c86:	cd 01       	movw	r24, r26
    3c88:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <__divmodsi4>
    3c8c:	dc 01       	movw	r26, r24
    3c8e:	cb 01       	movw	r24, r22
    3c90:	8a 83       	std	Y+2, r24	; 0x02
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
    3c92:	8b 81       	ldd	r24, Y+3	; 0x03
    3c94:	9c 81       	ldd	r25, Y+4	; 0x04
    3c96:	ad 81       	ldd	r26, Y+5	; 0x05
    3c98:	be 81       	ldd	r27, Y+6	; 0x06
    3c9a:	2a e0       	ldi	r18, 0x0A	; 10
    3c9c:	30 e0       	ldi	r19, 0x00	; 0
    3c9e:	40 e0       	ldi	r20, 0x00	; 0
    3ca0:	50 e0       	ldi	r21, 0x00	; 0
    3ca2:	bc 01       	movw	r22, r24
    3ca4:	cd 01       	movw	r24, r26
    3ca6:	0e 94 7f 26 	call	0x4cfe	; 0x4cfe <__mulsi3>
    3caa:	9b 01       	movw	r18, r22
    3cac:	ac 01       	movw	r20, r24
    3cae:	8a 81       	ldd	r24, Y+2	; 0x02
    3cb0:	88 2f       	mov	r24, r24
    3cb2:	90 e0       	ldi	r25, 0x00	; 0
    3cb4:	a0 e0       	ldi	r26, 0x00	; 0
    3cb6:	b0 e0       	ldi	r27, 0x00	; 0
    3cb8:	82 0f       	add	r24, r18
    3cba:	93 1f       	adc	r25, r19
    3cbc:	a4 1f       	adc	r26, r20
    3cbe:	b5 1f       	adc	r27, r21
    3cc0:	8b 83       	std	Y+3, r24	; 0x03
    3cc2:	9c 83       	std	Y+4, r25	; 0x04
    3cc4:	ad 83       	std	Y+5, r26	; 0x05
    3cc6:	be 83       	std	Y+6, r27	; 0x06
		Copy_s32Num /=10;
    3cc8:	88 85       	ldd	r24, Y+8	; 0x08
    3cca:	99 85       	ldd	r25, Y+9	; 0x09
    3ccc:	aa 85       	ldd	r26, Y+10	; 0x0a
    3cce:	bb 85       	ldd	r27, Y+11	; 0x0b
    3cd0:	2a e0       	ldi	r18, 0x0A	; 10
    3cd2:	30 e0       	ldi	r19, 0x00	; 0
    3cd4:	40 e0       	ldi	r20, 0x00	; 0
    3cd6:	50 e0       	ldi	r21, 0x00	; 0
    3cd8:	bc 01       	movw	r22, r24
    3cda:	cd 01       	movw	r24, r26
    3cdc:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <__divmodsi4>
    3ce0:	da 01       	movw	r26, r20
    3ce2:	c9 01       	movw	r24, r18
    3ce4:	88 87       	std	Y+8, r24	; 0x08
    3ce6:	99 87       	std	Y+9, r25	; 0x09
    3ce8:	aa 87       	std	Y+10, r26	; 0x0a
    3cea:	bb 87       	std	Y+11, r27	; 0x0b
		Local_u8NumDigit ++;
    3cec:	89 81       	ldd	r24, Y+1	; 0x01
    3cee:	8f 5f       	subi	r24, 0xFF	; 255
    3cf0:	89 83       	std	Y+1, r24	; 0x01
	{
		DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
		LCD_enuWriteNLatch('-');
		Copy_s32Num *= -1 ;
	}
	while (Copy_s32Num)
    3cf2:	88 85       	ldd	r24, Y+8	; 0x08
    3cf4:	99 85       	ldd	r25, Y+9	; 0x09
    3cf6:	aa 85       	ldd	r26, Y+10	; 0x0a
    3cf8:	bb 85       	ldd	r27, Y+11	; 0x0b
    3cfa:	00 97       	sbiw	r24, 0x00	; 0
    3cfc:	a1 05       	cpc	r26, r1
    3cfe:	b1 05       	cpc	r27, r1
    3d00:	09 f0       	breq	.+2      	; 0x3d04 <LCD_enuWriteIntegerNum+0xf8>
    3d02:	b8 cf       	rjmp	.-144    	; 0x3c74 <LCD_enuWriteIntegerNum+0x68>
    3d04:	2d c0       	rjmp	.+90     	; 0x3d60 <LCD_enuWriteIntegerNum+0x154>
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
	{
		Local_u8Remainder = Local_s32Reverse % 10;
    3d06:	8b 81       	ldd	r24, Y+3	; 0x03
    3d08:	9c 81       	ldd	r25, Y+4	; 0x04
    3d0a:	ad 81       	ldd	r26, Y+5	; 0x05
    3d0c:	be 81       	ldd	r27, Y+6	; 0x06
    3d0e:	2a e0       	ldi	r18, 0x0A	; 10
    3d10:	30 e0       	ldi	r19, 0x00	; 0
    3d12:	40 e0       	ldi	r20, 0x00	; 0
    3d14:	50 e0       	ldi	r21, 0x00	; 0
    3d16:	bc 01       	movw	r22, r24
    3d18:	cd 01       	movw	r24, r26
    3d1a:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <__divmodsi4>
    3d1e:	dc 01       	movw	r26, r24
    3d20:	cb 01       	movw	r24, r22
    3d22:	8a 83       	std	Y+2, r24	; 0x02
		DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    3d24:	81 e0       	ldi	r24, 0x01	; 1
    3d26:	61 e0       	ldi	r22, 0x01	; 1
    3d28:	41 e0       	ldi	r20, 0x01	; 1
    3d2a:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>
		LCD_enuWriteNLatch(Local_u8Remainder + '0');
    3d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    3d30:	80 5d       	subi	r24, 0xD0	; 208
    3d32:	0e 94 b9 1b 	call	0x3772	; 0x3772 <LCD_enuWriteNLatch>
		Local_s32Reverse /= 10;
    3d36:	8b 81       	ldd	r24, Y+3	; 0x03
    3d38:	9c 81       	ldd	r25, Y+4	; 0x04
    3d3a:	ad 81       	ldd	r26, Y+5	; 0x05
    3d3c:	be 81       	ldd	r27, Y+6	; 0x06
    3d3e:	2a e0       	ldi	r18, 0x0A	; 10
    3d40:	30 e0       	ldi	r19, 0x00	; 0
    3d42:	40 e0       	ldi	r20, 0x00	; 0
    3d44:	50 e0       	ldi	r21, 0x00	; 0
    3d46:	bc 01       	movw	r22, r24
    3d48:	cd 01       	movw	r24, r26
    3d4a:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <__divmodsi4>
    3d4e:	da 01       	movw	r26, r20
    3d50:	c9 01       	movw	r24, r18
    3d52:	8b 83       	std	Y+3, r24	; 0x03
    3d54:	9c 83       	std	Y+4, r25	; 0x04
    3d56:	ad 83       	std	Y+5, r26	; 0x05
    3d58:	be 83       	std	Y+6, r27	; 0x06
		Local_u8NumDigit --;
    3d5a:	89 81       	ldd	r24, Y+1	; 0x01
    3d5c:	81 50       	subi	r24, 0x01	; 1
    3d5e:	89 83       	std	Y+1, r24	; 0x01
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
		Copy_s32Num /=10;
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
    3d60:	89 81       	ldd	r24, Y+1	; 0x01
    3d62:	88 23       	and	r24, r24
    3d64:	81 f6       	brne	.-96     	; 0x3d06 <LCD_enuWriteIntegerNum+0xfa>
		LCD_enuWriteNLatch(Local_u8Remainder + '0');
		Local_s32Reverse /= 10;
		Local_u8NumDigit --;
	}

	return Local_enuErrorState;
    3d66:	8f 81       	ldd	r24, Y+7	; 0x07
}
    3d68:	2b 96       	adiw	r28, 0x0b	; 11
    3d6a:	0f b6       	in	r0, 0x3f	; 63
    3d6c:	f8 94       	cli
    3d6e:	de bf       	out	0x3e, r29	; 62
    3d70:	0f be       	out	0x3f, r0	; 63
    3d72:	cd bf       	out	0x3d, r28	; 61
    3d74:	cf 91       	pop	r28
    3d76:	df 91       	pop	r29
    3d78:	08 95       	ret

00003d7a <main>:
#include <util/delay.h>
#include "Autonomous_Car_Config.h"

u16 Temp = 0;//<--- Distance of Right direction --->

int main(void){
    3d7a:	0f 93       	push	r16
    3d7c:	1f 93       	push	r17
    3d7e:	df 93       	push	r29
    3d80:	cf 93       	push	r28
    3d82:	cd b7       	in	r28, 0x3d	; 61
    3d84:	de b7       	in	r29, 0x3e	; 62
    3d86:	c6 58       	subi	r28, 0x86	; 134
    3d88:	d0 40       	sbci	r29, 0x00	; 0
    3d8a:	0f b6       	in	r0, 0x3f	; 63
    3d8c:	f8 94       	cli
    3d8e:	de bf       	out	0x3e, r29	; 62
    3d90:	0f be       	out	0x3f, r0	; 63
    3d92:	cd bf       	out	0x3d, r28	; 61
	ULTR_T ultr = {0,0,0,0};
    3d94:	ce 01       	movw	r24, r28
    3d96:	8f 57       	subi	r24, 0x7F	; 127
    3d98:	9f 4f       	sbci	r25, 0xFF	; 255
    3d9a:	26 e0       	ldi	r18, 0x06	; 6
    3d9c:	fc 01       	movw	r30, r24
    3d9e:	df 01       	movw	r26, r30
    3da0:	82 2f       	mov	r24, r18
    3da2:	1d 92       	st	X+, r1
    3da4:	8a 95       	dec	r24
    3da6:	e9 f7       	brne	.-6      	; 0x3da2 <main+0x28>
	LCD_enuInit();
    3da8:	0e 94 94 19 	call	0x3328	; 0x3328 <LCD_enuInit>
	//	<--- Motors --->
	DIO_enuSetPinDirection(Moto1_Group1 ,Moto1_Pin1 ,DIO_u8OUTPUT);
    3dac:	81 e0       	ldi	r24, 0x01	; 1
    3dae:	60 e0       	ldi	r22, 0x00	; 0
    3db0:	41 e0       	ldi	r20, 0x01	; 1
    3db2:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(Moto1_Group2 ,Moto1_Pin2 ,DIO_u8OUTPUT);
    3db6:	81 e0       	ldi	r24, 0x01	; 1
    3db8:	61 e0       	ldi	r22, 0x01	; 1
    3dba:	41 e0       	ldi	r20, 0x01	; 1
    3dbc:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(Moto2_Group1 ,Moto2_Pin1 ,DIO_u8OUTPUT);
    3dc0:	81 e0       	ldi	r24, 0x01	; 1
    3dc2:	62 e0       	ldi	r22, 0x02	; 2
    3dc4:	41 e0       	ldi	r20, 0x01	; 1
    3dc6:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(Moto2_Group2 ,Moto2_Pin2 ,DIO_u8OUTPUT);
    3dca:	81 e0       	ldi	r24, 0x01	; 1
    3dcc:	63 e0       	ldi	r22, 0x03	; 3
    3dce:	41 e0       	ldi	r20, 0x01	; 1
    3dd0:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(PuzzerGroup,PuzzerPin,DIO_u8OUTPUT);
    3dd4:	82 e0       	ldi	r24, 0x02	; 2
    3dd6:	65 e0       	ldi	r22, 0x05	; 5
    3dd8:	41 e0       	ldi	r20, 0x01	; 1
    3dda:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <DIO_enuSetPinDirection>
	DIO_enuSetPinValue(PuzzerGroup,PuzzerPin,DIO_u8HIGH);
    3dde:	82 e0       	ldi	r24, 0x02	; 2
    3de0:	65 e0       	ldi	r22, 0x05	; 5
    3de2:	41 e0       	ldi	r20, 0x01	; 1
    3de4:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>
    3de8:	fe 01       	movw	r30, r28
    3dea:	e5 58       	subi	r30, 0x85	; 133
    3dec:	ff 4f       	sbci	r31, 0xFF	; 255
    3dee:	80 e0       	ldi	r24, 0x00	; 0
    3df0:	90 e0       	ldi	r25, 0x00	; 0
    3df2:	a8 ec       	ldi	r26, 0xC8	; 200
    3df4:	b2 e4       	ldi	r27, 0x42	; 66
    3df6:	80 83       	st	Z, r24
    3df8:	91 83       	std	Z+1, r25	; 0x01
    3dfa:	a2 83       	std	Z+2, r26	; 0x02
    3dfc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dfe:	8e 01       	movw	r16, r28
    3e00:	09 58       	subi	r16, 0x89	; 137
    3e02:	1f 4f       	sbci	r17, 0xFF	; 255
    3e04:	fe 01       	movw	r30, r28
    3e06:	e5 58       	subi	r30, 0x85	; 133
    3e08:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0a:	60 81       	ld	r22, Z
    3e0c:	71 81       	ldd	r23, Z+1	; 0x01
    3e0e:	82 81       	ldd	r24, Z+2	; 0x02
    3e10:	93 81       	ldd	r25, Z+3	; 0x03
    3e12:	20 e0       	ldi	r18, 0x00	; 0
    3e14:	30 e0       	ldi	r19, 0x00	; 0
    3e16:	4a e7       	ldi	r20, 0x7A	; 122
    3e18:	55 e4       	ldi	r21, 0x45	; 69
    3e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e1e:	dc 01       	movw	r26, r24
    3e20:	cb 01       	movw	r24, r22
    3e22:	f8 01       	movw	r30, r16
    3e24:	80 83       	st	Z, r24
    3e26:	91 83       	std	Z+1, r25	; 0x01
    3e28:	a2 83       	std	Z+2, r26	; 0x02
    3e2a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e2c:	fe 01       	movw	r30, r28
    3e2e:	e9 58       	subi	r30, 0x89	; 137
    3e30:	ff 4f       	sbci	r31, 0xFF	; 255
    3e32:	60 81       	ld	r22, Z
    3e34:	71 81       	ldd	r23, Z+1	; 0x01
    3e36:	82 81       	ldd	r24, Z+2	; 0x02
    3e38:	93 81       	ldd	r25, Z+3	; 0x03
    3e3a:	20 e0       	ldi	r18, 0x00	; 0
    3e3c:	30 e0       	ldi	r19, 0x00	; 0
    3e3e:	40 e8       	ldi	r20, 0x80	; 128
    3e40:	5f e3       	ldi	r21, 0x3F	; 63
    3e42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e46:	88 23       	and	r24, r24
    3e48:	44 f4       	brge	.+16     	; 0x3e5a <main+0xe0>
		__ticks = 1;
    3e4a:	fe 01       	movw	r30, r28
    3e4c:	eb 58       	subi	r30, 0x8B	; 139
    3e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e50:	81 e0       	ldi	r24, 0x01	; 1
    3e52:	90 e0       	ldi	r25, 0x00	; 0
    3e54:	91 83       	std	Z+1, r25	; 0x01
    3e56:	80 83       	st	Z, r24
    3e58:	64 c0       	rjmp	.+200    	; 0x3f22 <main+0x1a8>
	else if (__tmp > 65535)
    3e5a:	fe 01       	movw	r30, r28
    3e5c:	e9 58       	subi	r30, 0x89	; 137
    3e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e60:	60 81       	ld	r22, Z
    3e62:	71 81       	ldd	r23, Z+1	; 0x01
    3e64:	82 81       	ldd	r24, Z+2	; 0x02
    3e66:	93 81       	ldd	r25, Z+3	; 0x03
    3e68:	20 e0       	ldi	r18, 0x00	; 0
    3e6a:	3f ef       	ldi	r19, 0xFF	; 255
    3e6c:	4f e7       	ldi	r20, 0x7F	; 127
    3e6e:	57 e4       	ldi	r21, 0x47	; 71
    3e70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e74:	18 16       	cp	r1, r24
    3e76:	0c f0       	brlt	.+2      	; 0x3e7a <main+0x100>
    3e78:	43 c0       	rjmp	.+134    	; 0x3f00 <main+0x186>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e7a:	fe 01       	movw	r30, r28
    3e7c:	e5 58       	subi	r30, 0x85	; 133
    3e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e80:	60 81       	ld	r22, Z
    3e82:	71 81       	ldd	r23, Z+1	; 0x01
    3e84:	82 81       	ldd	r24, Z+2	; 0x02
    3e86:	93 81       	ldd	r25, Z+3	; 0x03
    3e88:	20 e0       	ldi	r18, 0x00	; 0
    3e8a:	30 e0       	ldi	r19, 0x00	; 0
    3e8c:	40 e2       	ldi	r20, 0x20	; 32
    3e8e:	51 e4       	ldi	r21, 0x41	; 65
    3e90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e94:	dc 01       	movw	r26, r24
    3e96:	cb 01       	movw	r24, r22
    3e98:	8e 01       	movw	r16, r28
    3e9a:	0b 58       	subi	r16, 0x8B	; 139
    3e9c:	1f 4f       	sbci	r17, 0xFF	; 255
    3e9e:	bc 01       	movw	r22, r24
    3ea0:	cd 01       	movw	r24, r26
    3ea2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ea6:	dc 01       	movw	r26, r24
    3ea8:	cb 01       	movw	r24, r22
    3eaa:	f8 01       	movw	r30, r16
    3eac:	91 83       	std	Z+1, r25	; 0x01
    3eae:	80 83       	st	Z, r24
    3eb0:	1f c0       	rjmp	.+62     	; 0x3ef0 <main+0x176>
    3eb2:	fe 01       	movw	r30, r28
    3eb4:	ed 58       	subi	r30, 0x8D	; 141
    3eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb8:	80 e9       	ldi	r24, 0x90	; 144
    3eba:	91 e0       	ldi	r25, 0x01	; 1
    3ebc:	91 83       	std	Z+1, r25	; 0x01
    3ebe:	80 83       	st	Z, r24
    3ec0:	fe 01       	movw	r30, r28
    3ec2:	ed 58       	subi	r30, 0x8D	; 141
    3ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec6:	80 81       	ld	r24, Z
    3ec8:	91 81       	ldd	r25, Z+1	; 0x01
    3eca:	01 97       	sbiw	r24, 0x01	; 1
    3ecc:	f1 f7       	brne	.-4      	; 0x3eca <main+0x150>
    3ece:	fe 01       	movw	r30, r28
    3ed0:	ed 58       	subi	r30, 0x8D	; 141
    3ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed4:	91 83       	std	Z+1, r25	; 0x01
    3ed6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ed8:	de 01       	movw	r26, r28
    3eda:	ab 58       	subi	r26, 0x8B	; 139
    3edc:	bf 4f       	sbci	r27, 0xFF	; 255
    3ede:	fe 01       	movw	r30, r28
    3ee0:	eb 58       	subi	r30, 0x8B	; 139
    3ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee4:	80 81       	ld	r24, Z
    3ee6:	91 81       	ldd	r25, Z+1	; 0x01
    3ee8:	01 97       	sbiw	r24, 0x01	; 1
    3eea:	11 96       	adiw	r26, 0x01	; 1
    3eec:	9c 93       	st	X, r25
    3eee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ef0:	fe 01       	movw	r30, r28
    3ef2:	eb 58       	subi	r30, 0x8B	; 139
    3ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef6:	80 81       	ld	r24, Z
    3ef8:	91 81       	ldd	r25, Z+1	; 0x01
    3efa:	00 97       	sbiw	r24, 0x00	; 0
    3efc:	d1 f6       	brne	.-76     	; 0x3eb2 <main+0x138>
    3efe:	27 c0       	rjmp	.+78     	; 0x3f4e <main+0x1d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f00:	8e 01       	movw	r16, r28
    3f02:	0b 58       	subi	r16, 0x8B	; 139
    3f04:	1f 4f       	sbci	r17, 0xFF	; 255
    3f06:	fe 01       	movw	r30, r28
    3f08:	e9 58       	subi	r30, 0x89	; 137
    3f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f0c:	60 81       	ld	r22, Z
    3f0e:	71 81       	ldd	r23, Z+1	; 0x01
    3f10:	82 81       	ldd	r24, Z+2	; 0x02
    3f12:	93 81       	ldd	r25, Z+3	; 0x03
    3f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f18:	dc 01       	movw	r26, r24
    3f1a:	cb 01       	movw	r24, r22
    3f1c:	f8 01       	movw	r30, r16
    3f1e:	91 83       	std	Z+1, r25	; 0x01
    3f20:	80 83       	st	Z, r24
    3f22:	de 01       	movw	r26, r28
    3f24:	af 58       	subi	r26, 0x8F	; 143
    3f26:	bf 4f       	sbci	r27, 0xFF	; 255
    3f28:	fe 01       	movw	r30, r28
    3f2a:	eb 58       	subi	r30, 0x8B	; 139
    3f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f2e:	80 81       	ld	r24, Z
    3f30:	91 81       	ldd	r25, Z+1	; 0x01
    3f32:	8d 93       	st	X+, r24
    3f34:	9c 93       	st	X, r25
    3f36:	fe 01       	movw	r30, r28
    3f38:	ef 58       	subi	r30, 0x8F	; 143
    3f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f3c:	80 81       	ld	r24, Z
    3f3e:	91 81       	ldd	r25, Z+1	; 0x01
    3f40:	01 97       	sbiw	r24, 0x01	; 1
    3f42:	f1 f7       	brne	.-4      	; 0x3f40 <main+0x1c6>
    3f44:	fe 01       	movw	r30, r28
    3f46:	ef 58       	subi	r30, 0x8F	; 143
    3f48:	ff 4f       	sbci	r31, 0xFF	; 255
    3f4a:	91 83       	std	Z+1, r25	; 0x01
    3f4c:	80 83       	st	Z, r24
	_delay_ms(100);
	DIO_enuSetPinValue(PuzzerGroup,PuzzerPin,DIO_u8LOW);
    3f4e:	82 e0       	ldi	r24, 0x02	; 2
    3f50:	65 e0       	ldi	r22, 0x05	; 5
    3f52:	40 e0       	ldi	r20, 0x00	; 0
    3f54:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>
	//	<--- Timer And EXTI For UltraSonic --->
	Timer_enuInit(Timer_AstrTimerConfig);
    3f58:	8e e9       	ldi	r24, 0x9E	; 158
    3f5a:	90 e0       	ldi	r25, 0x00	; 0
    3f5c:	0e 94 a3 05 	call	0xb46	; 0xb46 <Timer_enuInit>
	Timer_enuCallBack(T0_OVF_INT,ICR_TIMER0,&ultr);
    3f60:	26 ec       	ldi	r18, 0xC6	; 198
    3f62:	35 e2       	ldi	r19, 0x25	; 37
    3f64:	ae 01       	movw	r20, r28
    3f66:	4f 57       	subi	r20, 0x7F	; 127
    3f68:	5f 4f       	sbci	r21, 0xFF	; 255
    3f6a:	80 e0       	ldi	r24, 0x00	; 0
    3f6c:	b9 01       	movw	r22, r18
    3f6e:	0e 94 08 0c 	call	0x1810	; 0x1810 <Timer_enuCallBack>
	Timer_enuCallBack(T1A_CTC_INT,ICR_TIMER1,&ultr);
    3f72:	22 ee       	ldi	r18, 0xE2	; 226
    3f74:	35 e2       	ldi	r19, 0x25	; 37
    3f76:	ae 01       	movw	r20, r28
    3f78:	4f 57       	subi	r20, 0x7F	; 127
    3f7a:	5f 4f       	sbci	r21, 0xFF	; 255
    3f7c:	84 e0       	ldi	r24, 0x04	; 4
    3f7e:	b9 01       	movw	r22, r18
    3f80:	0e 94 08 0c 	call	0x1810	; 0x1810 <Timer_enuCallBack>
	Timer_enuSetOutputCompare(T1A_OCR,160);
    3f84:	87 e1       	ldi	r24, 0x17	; 23
    3f86:	60 ea       	ldi	r22, 0xA0	; 160
    3f88:	70 e0       	ldi	r23, 0x00	; 0
    3f8a:	0e 94 31 0a 	call	0x1462	; 0x1462 <Timer_enuSetOutputCompare>
	DIO_enuSetPinDirection(TRIGERGROUP,TRIGERPIN,DIO_u8OUTPUT);
    3f8e:	82 e0       	ldi	r24, 0x02	; 2
    3f90:	62 e0       	ldi	r22, 0x02	; 2
    3f92:	41 e0       	ldi	r20, 0x01	; 1
    3f94:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <DIO_enuSetPinDirection>
	DIO_enuSetPinValue(TRIGERGROUP,TRIGERPIN,DIO_u8LOW);
    3f98:	82 e0       	ldi	r24, 0x02	; 2
    3f9a:	62 e0       	ldi	r22, 0x02	; 2
    3f9c:	40 e0       	ldi	r20, 0x00	; 0
    3f9e:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>
    3fa2:	fe 01       	movw	r30, r28
    3fa4:	e3 59       	subi	r30, 0x93	; 147
    3fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa8:	80 e0       	ldi	r24, 0x00	; 0
    3faa:	90 e0       	ldi	r25, 0x00	; 0
    3fac:	aa ef       	ldi	r26, 0xFA	; 250
    3fae:	b3 e4       	ldi	r27, 0x43	; 67
    3fb0:	80 83       	st	Z, r24
    3fb2:	91 83       	std	Z+1, r25	; 0x01
    3fb4:	a2 83       	std	Z+2, r26	; 0x02
    3fb6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fb8:	8e 01       	movw	r16, r28
    3fba:	07 59       	subi	r16, 0x97	; 151
    3fbc:	1f 4f       	sbci	r17, 0xFF	; 255
    3fbe:	fe 01       	movw	r30, r28
    3fc0:	e3 59       	subi	r30, 0x93	; 147
    3fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc4:	60 81       	ld	r22, Z
    3fc6:	71 81       	ldd	r23, Z+1	; 0x01
    3fc8:	82 81       	ldd	r24, Z+2	; 0x02
    3fca:	93 81       	ldd	r25, Z+3	; 0x03
    3fcc:	20 e0       	ldi	r18, 0x00	; 0
    3fce:	30 e0       	ldi	r19, 0x00	; 0
    3fd0:	4a e7       	ldi	r20, 0x7A	; 122
    3fd2:	55 e4       	ldi	r21, 0x45	; 69
    3fd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fd8:	dc 01       	movw	r26, r24
    3fda:	cb 01       	movw	r24, r22
    3fdc:	f8 01       	movw	r30, r16
    3fde:	80 83       	st	Z, r24
    3fe0:	91 83       	std	Z+1, r25	; 0x01
    3fe2:	a2 83       	std	Z+2, r26	; 0x02
    3fe4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3fe6:	fe 01       	movw	r30, r28
    3fe8:	e7 59       	subi	r30, 0x97	; 151
    3fea:	ff 4f       	sbci	r31, 0xFF	; 255
    3fec:	60 81       	ld	r22, Z
    3fee:	71 81       	ldd	r23, Z+1	; 0x01
    3ff0:	82 81       	ldd	r24, Z+2	; 0x02
    3ff2:	93 81       	ldd	r25, Z+3	; 0x03
    3ff4:	20 e0       	ldi	r18, 0x00	; 0
    3ff6:	30 e0       	ldi	r19, 0x00	; 0
    3ff8:	40 e8       	ldi	r20, 0x80	; 128
    3ffa:	5f e3       	ldi	r21, 0x3F	; 63
    3ffc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4000:	88 23       	and	r24, r24
    4002:	44 f4       	brge	.+16     	; 0x4014 <main+0x29a>
		__ticks = 1;
    4004:	fe 01       	movw	r30, r28
    4006:	e9 59       	subi	r30, 0x99	; 153
    4008:	ff 4f       	sbci	r31, 0xFF	; 255
    400a:	81 e0       	ldi	r24, 0x01	; 1
    400c:	90 e0       	ldi	r25, 0x00	; 0
    400e:	91 83       	std	Z+1, r25	; 0x01
    4010:	80 83       	st	Z, r24
    4012:	64 c0       	rjmp	.+200    	; 0x40dc <main+0x362>
	else if (__tmp > 65535)
    4014:	fe 01       	movw	r30, r28
    4016:	e7 59       	subi	r30, 0x97	; 151
    4018:	ff 4f       	sbci	r31, 0xFF	; 255
    401a:	60 81       	ld	r22, Z
    401c:	71 81       	ldd	r23, Z+1	; 0x01
    401e:	82 81       	ldd	r24, Z+2	; 0x02
    4020:	93 81       	ldd	r25, Z+3	; 0x03
    4022:	20 e0       	ldi	r18, 0x00	; 0
    4024:	3f ef       	ldi	r19, 0xFF	; 255
    4026:	4f e7       	ldi	r20, 0x7F	; 127
    4028:	57 e4       	ldi	r21, 0x47	; 71
    402a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    402e:	18 16       	cp	r1, r24
    4030:	0c f0       	brlt	.+2      	; 0x4034 <main+0x2ba>
    4032:	43 c0       	rjmp	.+134    	; 0x40ba <main+0x340>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4034:	fe 01       	movw	r30, r28
    4036:	e3 59       	subi	r30, 0x93	; 147
    4038:	ff 4f       	sbci	r31, 0xFF	; 255
    403a:	60 81       	ld	r22, Z
    403c:	71 81       	ldd	r23, Z+1	; 0x01
    403e:	82 81       	ldd	r24, Z+2	; 0x02
    4040:	93 81       	ldd	r25, Z+3	; 0x03
    4042:	20 e0       	ldi	r18, 0x00	; 0
    4044:	30 e0       	ldi	r19, 0x00	; 0
    4046:	40 e2       	ldi	r20, 0x20	; 32
    4048:	51 e4       	ldi	r21, 0x41	; 65
    404a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    404e:	dc 01       	movw	r26, r24
    4050:	cb 01       	movw	r24, r22
    4052:	8e 01       	movw	r16, r28
    4054:	09 59       	subi	r16, 0x99	; 153
    4056:	1f 4f       	sbci	r17, 0xFF	; 255
    4058:	bc 01       	movw	r22, r24
    405a:	cd 01       	movw	r24, r26
    405c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4060:	dc 01       	movw	r26, r24
    4062:	cb 01       	movw	r24, r22
    4064:	f8 01       	movw	r30, r16
    4066:	91 83       	std	Z+1, r25	; 0x01
    4068:	80 83       	st	Z, r24
    406a:	1f c0       	rjmp	.+62     	; 0x40aa <main+0x330>
    406c:	fe 01       	movw	r30, r28
    406e:	eb 59       	subi	r30, 0x9B	; 155
    4070:	ff 4f       	sbci	r31, 0xFF	; 255
    4072:	80 e9       	ldi	r24, 0x90	; 144
    4074:	91 e0       	ldi	r25, 0x01	; 1
    4076:	91 83       	std	Z+1, r25	; 0x01
    4078:	80 83       	st	Z, r24
    407a:	fe 01       	movw	r30, r28
    407c:	eb 59       	subi	r30, 0x9B	; 155
    407e:	ff 4f       	sbci	r31, 0xFF	; 255
    4080:	80 81       	ld	r24, Z
    4082:	91 81       	ldd	r25, Z+1	; 0x01
    4084:	01 97       	sbiw	r24, 0x01	; 1
    4086:	f1 f7       	brne	.-4      	; 0x4084 <main+0x30a>
    4088:	fe 01       	movw	r30, r28
    408a:	eb 59       	subi	r30, 0x9B	; 155
    408c:	ff 4f       	sbci	r31, 0xFF	; 255
    408e:	91 83       	std	Z+1, r25	; 0x01
    4090:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4092:	de 01       	movw	r26, r28
    4094:	a9 59       	subi	r26, 0x99	; 153
    4096:	bf 4f       	sbci	r27, 0xFF	; 255
    4098:	fe 01       	movw	r30, r28
    409a:	e9 59       	subi	r30, 0x99	; 153
    409c:	ff 4f       	sbci	r31, 0xFF	; 255
    409e:	80 81       	ld	r24, Z
    40a0:	91 81       	ldd	r25, Z+1	; 0x01
    40a2:	01 97       	sbiw	r24, 0x01	; 1
    40a4:	11 96       	adiw	r26, 0x01	; 1
    40a6:	9c 93       	st	X, r25
    40a8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40aa:	fe 01       	movw	r30, r28
    40ac:	e9 59       	subi	r30, 0x99	; 153
    40ae:	ff 4f       	sbci	r31, 0xFF	; 255
    40b0:	80 81       	ld	r24, Z
    40b2:	91 81       	ldd	r25, Z+1	; 0x01
    40b4:	00 97       	sbiw	r24, 0x00	; 0
    40b6:	d1 f6       	brne	.-76     	; 0x406c <main+0x2f2>
    40b8:	27 c0       	rjmp	.+78     	; 0x4108 <main+0x38e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40ba:	8e 01       	movw	r16, r28
    40bc:	09 59       	subi	r16, 0x99	; 153
    40be:	1f 4f       	sbci	r17, 0xFF	; 255
    40c0:	fe 01       	movw	r30, r28
    40c2:	e7 59       	subi	r30, 0x97	; 151
    40c4:	ff 4f       	sbci	r31, 0xFF	; 255
    40c6:	60 81       	ld	r22, Z
    40c8:	71 81       	ldd	r23, Z+1	; 0x01
    40ca:	82 81       	ldd	r24, Z+2	; 0x02
    40cc:	93 81       	ldd	r25, Z+3	; 0x03
    40ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40d2:	dc 01       	movw	r26, r24
    40d4:	cb 01       	movw	r24, r22
    40d6:	f8 01       	movw	r30, r16
    40d8:	91 83       	std	Z+1, r25	; 0x01
    40da:	80 83       	st	Z, r24
    40dc:	de 01       	movw	r26, r28
    40de:	ad 59       	subi	r26, 0x9D	; 157
    40e0:	bf 4f       	sbci	r27, 0xFF	; 255
    40e2:	fe 01       	movw	r30, r28
    40e4:	e9 59       	subi	r30, 0x99	; 153
    40e6:	ff 4f       	sbci	r31, 0xFF	; 255
    40e8:	80 81       	ld	r24, Z
    40ea:	91 81       	ldd	r25, Z+1	; 0x01
    40ec:	8d 93       	st	X+, r24
    40ee:	9c 93       	st	X, r25
    40f0:	fe 01       	movw	r30, r28
    40f2:	ed 59       	subi	r30, 0x9D	; 157
    40f4:	ff 4f       	sbci	r31, 0xFF	; 255
    40f6:	80 81       	ld	r24, Z
    40f8:	91 81       	ldd	r25, Z+1	; 0x01
    40fa:	01 97       	sbiw	r24, 0x01	; 1
    40fc:	f1 f7       	brne	.-4      	; 0x40fa <main+0x380>
    40fe:	fe 01       	movw	r30, r28
    4100:	ed 59       	subi	r30, 0x9D	; 157
    4102:	ff 4f       	sbci	r31, 0xFF	; 255
    4104:	91 83       	std	Z+1, r25	; 0x01
    4106:	80 83       	st	Z, r24
	_delay_ms(500);
	EXTI_enuInit(EXTI_AstrEXTIConfig);
    4108:	85 eb       	ldi	r24, 0xB5	; 181
    410a:	90 e0       	ldi	r25, 0x00	; 0
    410c:	0e 94 5e 12 	call	0x24bc	; 0x24bc <EXTI_enuInit>
	EXTI_enuCallBack(EXTI_AstrEXTIConfig,ICR_EXTI,&ultr);
    4110:	85 eb       	ldi	r24, 0xB5	; 181
    4112:	90 e0       	ldi	r25, 0x00	; 0
    4114:	20 e8       	ldi	r18, 0x80	; 128
    4116:	35 e2       	ldi	r19, 0x25	; 37
    4118:	ae 01       	movw	r20, r28
    411a:	4f 57       	subi	r20, 0x7F	; 127
    411c:	5f 4f       	sbci	r21, 0xFF	; 255
    411e:	b9 01       	movw	r22, r18
    4120:	0e 94 82 15 	call	0x2b04	; 0x2b04 <EXTI_enuCallBack>
	DIO_enuSetPinDirection(ECHOGROUP,ECHOPIN,DIO_u8INPUT);
    4124:	83 e0       	ldi	r24, 0x03	; 3
    4126:	63 e0       	ldi	r22, 0x03	; 3
    4128:	40 e0       	ldi	r20, 0x00	; 0
    412a:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <DIO_enuSetPinDirection>
	DIO_enuSetPinValue(ECHOGROUP,ECHOPIN,DIO_u8FLOAT);
    412e:	83 e0       	ldi	r24, 0x03	; 3
    4130:	63 e0       	ldi	r22, 0x03	; 3
    4132:	40 e0       	ldi	r20, 0x00	; 0
    4134:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>
	//	<--- PWM For Servo --->
	PWM_enuInit(PWM_AstrPWMConfig);
    4138:	8f ea       	ldi	r24, 0xAF	; 175
    413a:	90 e0       	ldi	r25, 0x00	; 0
    413c:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <PWM_enuInit>
	DIO_enuSetPinDirection(DIO_u8GROUP_D,DIO_u8PIN7,DIO_u8OUTPUT);
    4140:	83 e0       	ldi	r24, 0x03	; 3
    4142:	67 e0       	ldi	r22, 0x07	; 7
    4144:	41 e0       	ldi	r20, 0x01	; 1
    4146:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <DIO_enuSetPinDirection>
	PWM_enuSetOutputCompare(T2_OCR,Forward_Direction);
    414a:	89 e2       	ldi	r24, 0x29	; 41
    414c:	63 e1       	ldi	r22, 0x13	; 19
    414e:	70 e0       	ldi	r23, 0x00	; 0
    4150:	0e 94 4b 11 	call	0x2296	; 0x2296 <PWM_enuSetOutputCompare>
    4154:	fe 01       	movw	r30, r28
    4156:	e1 5a       	subi	r30, 0xA1	; 161
    4158:	ff 4f       	sbci	r31, 0xFF	; 255
    415a:	80 e0       	ldi	r24, 0x00	; 0
    415c:	90 e0       	ldi	r25, 0x00	; 0
    415e:	a8 ec       	ldi	r26, 0xC8	; 200
    4160:	b3 e4       	ldi	r27, 0x43	; 67
    4162:	80 83       	st	Z, r24
    4164:	91 83       	std	Z+1, r25	; 0x01
    4166:	a2 83       	std	Z+2, r26	; 0x02
    4168:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    416a:	8e 01       	movw	r16, r28
    416c:	05 5a       	subi	r16, 0xA5	; 165
    416e:	1f 4f       	sbci	r17, 0xFF	; 255
    4170:	fe 01       	movw	r30, r28
    4172:	e1 5a       	subi	r30, 0xA1	; 161
    4174:	ff 4f       	sbci	r31, 0xFF	; 255
    4176:	60 81       	ld	r22, Z
    4178:	71 81       	ldd	r23, Z+1	; 0x01
    417a:	82 81       	ldd	r24, Z+2	; 0x02
    417c:	93 81       	ldd	r25, Z+3	; 0x03
    417e:	20 e0       	ldi	r18, 0x00	; 0
    4180:	30 e0       	ldi	r19, 0x00	; 0
    4182:	4a e7       	ldi	r20, 0x7A	; 122
    4184:	55 e4       	ldi	r21, 0x45	; 69
    4186:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    418a:	dc 01       	movw	r26, r24
    418c:	cb 01       	movw	r24, r22
    418e:	f8 01       	movw	r30, r16
    4190:	80 83       	st	Z, r24
    4192:	91 83       	std	Z+1, r25	; 0x01
    4194:	a2 83       	std	Z+2, r26	; 0x02
    4196:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4198:	fe 01       	movw	r30, r28
    419a:	e5 5a       	subi	r30, 0xA5	; 165
    419c:	ff 4f       	sbci	r31, 0xFF	; 255
    419e:	60 81       	ld	r22, Z
    41a0:	71 81       	ldd	r23, Z+1	; 0x01
    41a2:	82 81       	ldd	r24, Z+2	; 0x02
    41a4:	93 81       	ldd	r25, Z+3	; 0x03
    41a6:	20 e0       	ldi	r18, 0x00	; 0
    41a8:	30 e0       	ldi	r19, 0x00	; 0
    41aa:	40 e8       	ldi	r20, 0x80	; 128
    41ac:	5f e3       	ldi	r21, 0x3F	; 63
    41ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    41b2:	88 23       	and	r24, r24
    41b4:	44 f4       	brge	.+16     	; 0x41c6 <main+0x44c>
		__ticks = 1;
    41b6:	fe 01       	movw	r30, r28
    41b8:	e7 5a       	subi	r30, 0xA7	; 167
    41ba:	ff 4f       	sbci	r31, 0xFF	; 255
    41bc:	81 e0       	ldi	r24, 0x01	; 1
    41be:	90 e0       	ldi	r25, 0x00	; 0
    41c0:	91 83       	std	Z+1, r25	; 0x01
    41c2:	80 83       	st	Z, r24
    41c4:	64 c0       	rjmp	.+200    	; 0x428e <main+0x514>
	else if (__tmp > 65535)
    41c6:	fe 01       	movw	r30, r28
    41c8:	e5 5a       	subi	r30, 0xA5	; 165
    41ca:	ff 4f       	sbci	r31, 0xFF	; 255
    41cc:	60 81       	ld	r22, Z
    41ce:	71 81       	ldd	r23, Z+1	; 0x01
    41d0:	82 81       	ldd	r24, Z+2	; 0x02
    41d2:	93 81       	ldd	r25, Z+3	; 0x03
    41d4:	20 e0       	ldi	r18, 0x00	; 0
    41d6:	3f ef       	ldi	r19, 0xFF	; 255
    41d8:	4f e7       	ldi	r20, 0x7F	; 127
    41da:	57 e4       	ldi	r21, 0x47	; 71
    41dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    41e0:	18 16       	cp	r1, r24
    41e2:	0c f0       	brlt	.+2      	; 0x41e6 <main+0x46c>
    41e4:	43 c0       	rjmp	.+134    	; 0x426c <main+0x4f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41e6:	fe 01       	movw	r30, r28
    41e8:	e1 5a       	subi	r30, 0xA1	; 161
    41ea:	ff 4f       	sbci	r31, 0xFF	; 255
    41ec:	60 81       	ld	r22, Z
    41ee:	71 81       	ldd	r23, Z+1	; 0x01
    41f0:	82 81       	ldd	r24, Z+2	; 0x02
    41f2:	93 81       	ldd	r25, Z+3	; 0x03
    41f4:	20 e0       	ldi	r18, 0x00	; 0
    41f6:	30 e0       	ldi	r19, 0x00	; 0
    41f8:	40 e2       	ldi	r20, 0x20	; 32
    41fa:	51 e4       	ldi	r21, 0x41	; 65
    41fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4200:	dc 01       	movw	r26, r24
    4202:	cb 01       	movw	r24, r22
    4204:	8e 01       	movw	r16, r28
    4206:	07 5a       	subi	r16, 0xA7	; 167
    4208:	1f 4f       	sbci	r17, 0xFF	; 255
    420a:	bc 01       	movw	r22, r24
    420c:	cd 01       	movw	r24, r26
    420e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4212:	dc 01       	movw	r26, r24
    4214:	cb 01       	movw	r24, r22
    4216:	f8 01       	movw	r30, r16
    4218:	91 83       	std	Z+1, r25	; 0x01
    421a:	80 83       	st	Z, r24
    421c:	1f c0       	rjmp	.+62     	; 0x425c <main+0x4e2>
    421e:	fe 01       	movw	r30, r28
    4220:	e9 5a       	subi	r30, 0xA9	; 169
    4222:	ff 4f       	sbci	r31, 0xFF	; 255
    4224:	80 e9       	ldi	r24, 0x90	; 144
    4226:	91 e0       	ldi	r25, 0x01	; 1
    4228:	91 83       	std	Z+1, r25	; 0x01
    422a:	80 83       	st	Z, r24
    422c:	fe 01       	movw	r30, r28
    422e:	e9 5a       	subi	r30, 0xA9	; 169
    4230:	ff 4f       	sbci	r31, 0xFF	; 255
    4232:	80 81       	ld	r24, Z
    4234:	91 81       	ldd	r25, Z+1	; 0x01
    4236:	01 97       	sbiw	r24, 0x01	; 1
    4238:	f1 f7       	brne	.-4      	; 0x4236 <main+0x4bc>
    423a:	fe 01       	movw	r30, r28
    423c:	e9 5a       	subi	r30, 0xA9	; 169
    423e:	ff 4f       	sbci	r31, 0xFF	; 255
    4240:	91 83       	std	Z+1, r25	; 0x01
    4242:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4244:	de 01       	movw	r26, r28
    4246:	a7 5a       	subi	r26, 0xA7	; 167
    4248:	bf 4f       	sbci	r27, 0xFF	; 255
    424a:	fe 01       	movw	r30, r28
    424c:	e7 5a       	subi	r30, 0xA7	; 167
    424e:	ff 4f       	sbci	r31, 0xFF	; 255
    4250:	80 81       	ld	r24, Z
    4252:	91 81       	ldd	r25, Z+1	; 0x01
    4254:	01 97       	sbiw	r24, 0x01	; 1
    4256:	11 96       	adiw	r26, 0x01	; 1
    4258:	9c 93       	st	X, r25
    425a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    425c:	fe 01       	movw	r30, r28
    425e:	e7 5a       	subi	r30, 0xA7	; 167
    4260:	ff 4f       	sbci	r31, 0xFF	; 255
    4262:	80 81       	ld	r24, Z
    4264:	91 81       	ldd	r25, Z+1	; 0x01
    4266:	00 97       	sbiw	r24, 0x00	; 0
    4268:	d1 f6       	brne	.-76     	; 0x421e <main+0x4a4>
    426a:	27 c0       	rjmp	.+78     	; 0x42ba <main+0x540>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    426c:	8e 01       	movw	r16, r28
    426e:	07 5a       	subi	r16, 0xA7	; 167
    4270:	1f 4f       	sbci	r17, 0xFF	; 255
    4272:	fe 01       	movw	r30, r28
    4274:	e5 5a       	subi	r30, 0xA5	; 165
    4276:	ff 4f       	sbci	r31, 0xFF	; 255
    4278:	60 81       	ld	r22, Z
    427a:	71 81       	ldd	r23, Z+1	; 0x01
    427c:	82 81       	ldd	r24, Z+2	; 0x02
    427e:	93 81       	ldd	r25, Z+3	; 0x03
    4280:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4284:	dc 01       	movw	r26, r24
    4286:	cb 01       	movw	r24, r22
    4288:	f8 01       	movw	r30, r16
    428a:	91 83       	std	Z+1, r25	; 0x01
    428c:	80 83       	st	Z, r24
    428e:	de 01       	movw	r26, r28
    4290:	ab 5a       	subi	r26, 0xAB	; 171
    4292:	bf 4f       	sbci	r27, 0xFF	; 255
    4294:	fe 01       	movw	r30, r28
    4296:	e7 5a       	subi	r30, 0xA7	; 167
    4298:	ff 4f       	sbci	r31, 0xFF	; 255
    429a:	80 81       	ld	r24, Z
    429c:	91 81       	ldd	r25, Z+1	; 0x01
    429e:	8d 93       	st	X+, r24
    42a0:	9c 93       	st	X, r25
    42a2:	fe 01       	movw	r30, r28
    42a4:	eb 5a       	subi	r30, 0xAB	; 171
    42a6:	ff 4f       	sbci	r31, 0xFF	; 255
    42a8:	80 81       	ld	r24, Z
    42aa:	91 81       	ldd	r25, Z+1	; 0x01
    42ac:	01 97       	sbiw	r24, 0x01	; 1
    42ae:	f1 f7       	brne	.-4      	; 0x42ac <main+0x532>
    42b0:	fe 01       	movw	r30, r28
    42b2:	eb 5a       	subi	r30, 0xAB	; 171
    42b4:	ff 4f       	sbci	r31, 0xFF	; 255
    42b6:	91 83       	std	Z+1, r25	; 0x01
    42b8:	80 83       	st	Z, r24
	_delay_ms(400);
	GIE_enuEnable();
    42ba:	0e 94 4c 12 	call	0x2498	; 0x2498 <GIE_enuEnable>
	while(1){
		u16 Distance = Ultrasonic(&ultr);
    42be:	ce 01       	movw	r24, r28
    42c0:	8f 57       	subi	r24, 0x7F	; 127
    42c2:	9f 4f       	sbci	r25, 0xFF	; 255
    42c4:	0e 94 f5 24 	call	0x49ea	; 0x49ea <Ultrasonic>
    42c8:	fe 01       	movw	r30, r28
    42ca:	e1 58       	subi	r30, 0x81	; 129
    42cc:	ff 4f       	sbci	r31, 0xFF	; 255
    42ce:	91 83       	std	Z+1, r25	; 0x01
    42d0:	80 83       	st	Z, r24
		if(Distance > Minimum_Distance){
    42d2:	fe 01       	movw	r30, r28
    42d4:	e1 58       	subi	r30, 0x81	; 129
    42d6:	ff 4f       	sbci	r31, 0xFF	; 255
    42d8:	80 81       	ld	r24, Z
    42da:	91 81       	ldd	r25, Z+1	; 0x01
    42dc:	8f 31       	cpi	r24, 0x1F	; 31
    42de:	91 05       	cpc	r25, r1
    42e0:	70 f0       	brcs	.+28     	; 0x42fe <main+0x584>
			Movement(Forward);
    42e2:	89 e0       	ldi	r24, 0x09	; 9
    42e4:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <Movement>
    42e8:	0a c0       	rjmp	.+20     	; 0x42fe <main+0x584>
		}
		while(Distance > Minimum_Distance){
			Distance = Ultrasonic(&ultr);
    42ea:	ce 01       	movw	r24, r28
    42ec:	8f 57       	subi	r24, 0x7F	; 127
    42ee:	9f 4f       	sbci	r25, 0xFF	; 255
    42f0:	0e 94 f5 24 	call	0x49ea	; 0x49ea <Ultrasonic>
    42f4:	fe 01       	movw	r30, r28
    42f6:	e1 58       	subi	r30, 0x81	; 129
    42f8:	ff 4f       	sbci	r31, 0xFF	; 255
    42fa:	91 83       	std	Z+1, r25	; 0x01
    42fc:	80 83       	st	Z, r24
	while(1){
		u16 Distance = Ultrasonic(&ultr);
		if(Distance > Minimum_Distance){
			Movement(Forward);
		}
		while(Distance > Minimum_Distance){
    42fe:	fe 01       	movw	r30, r28
    4300:	e1 58       	subi	r30, 0x81	; 129
    4302:	ff 4f       	sbci	r31, 0xFF	; 255
    4304:	80 81       	ld	r24, Z
    4306:	91 81       	ldd	r25, Z+1	; 0x01
    4308:	8f 31       	cpi	r24, 0x1F	; 31
    430a:	91 05       	cpc	r25, r1
    430c:	70 f7       	brcc	.-36     	; 0x42ea <main+0x570>
			Distance = Ultrasonic(&ultr);
		}
		Movement(Stop);
    430e:	80 e0       	ldi	r24, 0x00	; 0
    4310:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <Movement>
		PWM_enuSetOutputCompare(T2_OCR,Right_Direction);
    4314:	89 e2       	ldi	r24, 0x29	; 41
    4316:	64 e0       	ldi	r22, 0x04	; 4
    4318:	70 e0       	ldi	r23, 0x00	; 0
    431a:	0e 94 4b 11 	call	0x2296	; 0x2296 <PWM_enuSetOutputCompare>
    431e:	fe 01       	movw	r30, r28
    4320:	ef 5a       	subi	r30, 0xAF	; 175
    4322:	ff 4f       	sbci	r31, 0xFF	; 255
    4324:	80 e0       	ldi	r24, 0x00	; 0
    4326:	90 e0       	ldi	r25, 0x00	; 0
    4328:	a8 ec       	ldi	r26, 0xC8	; 200
    432a:	b2 e4       	ldi	r27, 0x42	; 66
    432c:	80 83       	st	Z, r24
    432e:	91 83       	std	Z+1, r25	; 0x01
    4330:	a2 83       	std	Z+2, r26	; 0x02
    4332:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4334:	8e 01       	movw	r16, r28
    4336:	03 5b       	subi	r16, 0xB3	; 179
    4338:	1f 4f       	sbci	r17, 0xFF	; 255
    433a:	fe 01       	movw	r30, r28
    433c:	ef 5a       	subi	r30, 0xAF	; 175
    433e:	ff 4f       	sbci	r31, 0xFF	; 255
    4340:	60 81       	ld	r22, Z
    4342:	71 81       	ldd	r23, Z+1	; 0x01
    4344:	82 81       	ldd	r24, Z+2	; 0x02
    4346:	93 81       	ldd	r25, Z+3	; 0x03
    4348:	20 e0       	ldi	r18, 0x00	; 0
    434a:	30 e0       	ldi	r19, 0x00	; 0
    434c:	4a e7       	ldi	r20, 0x7A	; 122
    434e:	55 e4       	ldi	r21, 0x45	; 69
    4350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4354:	dc 01       	movw	r26, r24
    4356:	cb 01       	movw	r24, r22
    4358:	f8 01       	movw	r30, r16
    435a:	80 83       	st	Z, r24
    435c:	91 83       	std	Z+1, r25	; 0x01
    435e:	a2 83       	std	Z+2, r26	; 0x02
    4360:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4362:	fe 01       	movw	r30, r28
    4364:	e3 5b       	subi	r30, 0xB3	; 179
    4366:	ff 4f       	sbci	r31, 0xFF	; 255
    4368:	60 81       	ld	r22, Z
    436a:	71 81       	ldd	r23, Z+1	; 0x01
    436c:	82 81       	ldd	r24, Z+2	; 0x02
    436e:	93 81       	ldd	r25, Z+3	; 0x03
    4370:	20 e0       	ldi	r18, 0x00	; 0
    4372:	30 e0       	ldi	r19, 0x00	; 0
    4374:	40 e8       	ldi	r20, 0x80	; 128
    4376:	5f e3       	ldi	r21, 0x3F	; 63
    4378:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    437c:	88 23       	and	r24, r24
    437e:	44 f4       	brge	.+16     	; 0x4390 <main+0x616>
		__ticks = 1;
    4380:	fe 01       	movw	r30, r28
    4382:	e5 5b       	subi	r30, 0xB5	; 181
    4384:	ff 4f       	sbci	r31, 0xFF	; 255
    4386:	81 e0       	ldi	r24, 0x01	; 1
    4388:	90 e0       	ldi	r25, 0x00	; 0
    438a:	91 83       	std	Z+1, r25	; 0x01
    438c:	80 83       	st	Z, r24
    438e:	64 c0       	rjmp	.+200    	; 0x4458 <main+0x6de>
	else if (__tmp > 65535)
    4390:	fe 01       	movw	r30, r28
    4392:	e3 5b       	subi	r30, 0xB3	; 179
    4394:	ff 4f       	sbci	r31, 0xFF	; 255
    4396:	60 81       	ld	r22, Z
    4398:	71 81       	ldd	r23, Z+1	; 0x01
    439a:	82 81       	ldd	r24, Z+2	; 0x02
    439c:	93 81       	ldd	r25, Z+3	; 0x03
    439e:	20 e0       	ldi	r18, 0x00	; 0
    43a0:	3f ef       	ldi	r19, 0xFF	; 255
    43a2:	4f e7       	ldi	r20, 0x7F	; 127
    43a4:	57 e4       	ldi	r21, 0x47	; 71
    43a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    43aa:	18 16       	cp	r1, r24
    43ac:	0c f0       	brlt	.+2      	; 0x43b0 <main+0x636>
    43ae:	43 c0       	rjmp	.+134    	; 0x4436 <main+0x6bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43b0:	fe 01       	movw	r30, r28
    43b2:	ef 5a       	subi	r30, 0xAF	; 175
    43b4:	ff 4f       	sbci	r31, 0xFF	; 255
    43b6:	60 81       	ld	r22, Z
    43b8:	71 81       	ldd	r23, Z+1	; 0x01
    43ba:	82 81       	ldd	r24, Z+2	; 0x02
    43bc:	93 81       	ldd	r25, Z+3	; 0x03
    43be:	20 e0       	ldi	r18, 0x00	; 0
    43c0:	30 e0       	ldi	r19, 0x00	; 0
    43c2:	40 e2       	ldi	r20, 0x20	; 32
    43c4:	51 e4       	ldi	r21, 0x41	; 65
    43c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43ca:	dc 01       	movw	r26, r24
    43cc:	cb 01       	movw	r24, r22
    43ce:	8e 01       	movw	r16, r28
    43d0:	05 5b       	subi	r16, 0xB5	; 181
    43d2:	1f 4f       	sbci	r17, 0xFF	; 255
    43d4:	bc 01       	movw	r22, r24
    43d6:	cd 01       	movw	r24, r26
    43d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43dc:	dc 01       	movw	r26, r24
    43de:	cb 01       	movw	r24, r22
    43e0:	f8 01       	movw	r30, r16
    43e2:	91 83       	std	Z+1, r25	; 0x01
    43e4:	80 83       	st	Z, r24
    43e6:	1f c0       	rjmp	.+62     	; 0x4426 <main+0x6ac>
    43e8:	fe 01       	movw	r30, r28
    43ea:	e7 5b       	subi	r30, 0xB7	; 183
    43ec:	ff 4f       	sbci	r31, 0xFF	; 255
    43ee:	80 e9       	ldi	r24, 0x90	; 144
    43f0:	91 e0       	ldi	r25, 0x01	; 1
    43f2:	91 83       	std	Z+1, r25	; 0x01
    43f4:	80 83       	st	Z, r24
    43f6:	fe 01       	movw	r30, r28
    43f8:	e7 5b       	subi	r30, 0xB7	; 183
    43fa:	ff 4f       	sbci	r31, 0xFF	; 255
    43fc:	80 81       	ld	r24, Z
    43fe:	91 81       	ldd	r25, Z+1	; 0x01
    4400:	01 97       	sbiw	r24, 0x01	; 1
    4402:	f1 f7       	brne	.-4      	; 0x4400 <main+0x686>
    4404:	fe 01       	movw	r30, r28
    4406:	e7 5b       	subi	r30, 0xB7	; 183
    4408:	ff 4f       	sbci	r31, 0xFF	; 255
    440a:	91 83       	std	Z+1, r25	; 0x01
    440c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    440e:	de 01       	movw	r26, r28
    4410:	a5 5b       	subi	r26, 0xB5	; 181
    4412:	bf 4f       	sbci	r27, 0xFF	; 255
    4414:	fe 01       	movw	r30, r28
    4416:	e5 5b       	subi	r30, 0xB5	; 181
    4418:	ff 4f       	sbci	r31, 0xFF	; 255
    441a:	80 81       	ld	r24, Z
    441c:	91 81       	ldd	r25, Z+1	; 0x01
    441e:	01 97       	sbiw	r24, 0x01	; 1
    4420:	11 96       	adiw	r26, 0x01	; 1
    4422:	9c 93       	st	X, r25
    4424:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4426:	fe 01       	movw	r30, r28
    4428:	e5 5b       	subi	r30, 0xB5	; 181
    442a:	ff 4f       	sbci	r31, 0xFF	; 255
    442c:	80 81       	ld	r24, Z
    442e:	91 81       	ldd	r25, Z+1	; 0x01
    4430:	00 97       	sbiw	r24, 0x00	; 0
    4432:	d1 f6       	brne	.-76     	; 0x43e8 <main+0x66e>
    4434:	27 c0       	rjmp	.+78     	; 0x4484 <main+0x70a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4436:	8e 01       	movw	r16, r28
    4438:	05 5b       	subi	r16, 0xB5	; 181
    443a:	1f 4f       	sbci	r17, 0xFF	; 255
    443c:	fe 01       	movw	r30, r28
    443e:	e3 5b       	subi	r30, 0xB3	; 179
    4440:	ff 4f       	sbci	r31, 0xFF	; 255
    4442:	60 81       	ld	r22, Z
    4444:	71 81       	ldd	r23, Z+1	; 0x01
    4446:	82 81       	ldd	r24, Z+2	; 0x02
    4448:	93 81       	ldd	r25, Z+3	; 0x03
    444a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    444e:	dc 01       	movw	r26, r24
    4450:	cb 01       	movw	r24, r22
    4452:	f8 01       	movw	r30, r16
    4454:	91 83       	std	Z+1, r25	; 0x01
    4456:	80 83       	st	Z, r24
    4458:	de 01       	movw	r26, r28
    445a:	a9 5b       	subi	r26, 0xB9	; 185
    445c:	bf 4f       	sbci	r27, 0xFF	; 255
    445e:	fe 01       	movw	r30, r28
    4460:	e5 5b       	subi	r30, 0xB5	; 181
    4462:	ff 4f       	sbci	r31, 0xFF	; 255
    4464:	80 81       	ld	r24, Z
    4466:	91 81       	ldd	r25, Z+1	; 0x01
    4468:	8d 93       	st	X+, r24
    446a:	9c 93       	st	X, r25
    446c:	fe 01       	movw	r30, r28
    446e:	e9 5b       	subi	r30, 0xB9	; 185
    4470:	ff 4f       	sbci	r31, 0xFF	; 255
    4472:	80 81       	ld	r24, Z
    4474:	91 81       	ldd	r25, Z+1	; 0x01
    4476:	01 97       	sbiw	r24, 0x01	; 1
    4478:	f1 f7       	brne	.-4      	; 0x4476 <main+0x6fc>
    447a:	fe 01       	movw	r30, r28
    447c:	e9 5b       	subi	r30, 0xB9	; 185
    447e:	ff 4f       	sbci	r31, 0xFF	; 255
    4480:	91 83       	std	Z+1, r25	; 0x01
    4482:	80 83       	st	Z, r24
		_delay_ms(100);
		Distance = Ultrasonic(&ultr);
    4484:	ce 01       	movw	r24, r28
    4486:	8f 57       	subi	r24, 0x7F	; 127
    4488:	9f 4f       	sbci	r25, 0xFF	; 255
    448a:	0e 94 f5 24 	call	0x49ea	; 0x49ea <Ultrasonic>
    448e:	fe 01       	movw	r30, r28
    4490:	e1 58       	subi	r30, 0x81	; 129
    4492:	ff 4f       	sbci	r31, 0xFF	; 255
    4494:	91 83       	std	Z+1, r25	; 0x01
    4496:	80 83       	st	Z, r24
		PWM_enuSetOutputCompare(T2_OCR,Left_Direction);
    4498:	89 e2       	ldi	r24, 0x29	; 41
    449a:	62 e2       	ldi	r22, 0x22	; 34
    449c:	70 e0       	ldi	r23, 0x00	; 0
    449e:	0e 94 4b 11 	call	0x2296	; 0x2296 <PWM_enuSetOutputCompare>
    44a2:	fe 01       	movw	r30, r28
    44a4:	ed 5b       	subi	r30, 0xBD	; 189
    44a6:	ff 4f       	sbci	r31, 0xFF	; 255
    44a8:	80 e0       	ldi	r24, 0x00	; 0
    44aa:	90 e0       	ldi	r25, 0x00	; 0
    44ac:	a8 e4       	ldi	r26, 0x48	; 72
    44ae:	b3 e4       	ldi	r27, 0x43	; 67
    44b0:	80 83       	st	Z, r24
    44b2:	91 83       	std	Z+1, r25	; 0x01
    44b4:	a2 83       	std	Z+2, r26	; 0x02
    44b6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44b8:	8e 01       	movw	r16, r28
    44ba:	01 5c       	subi	r16, 0xC1	; 193
    44bc:	1f 4f       	sbci	r17, 0xFF	; 255
    44be:	fe 01       	movw	r30, r28
    44c0:	ed 5b       	subi	r30, 0xBD	; 189
    44c2:	ff 4f       	sbci	r31, 0xFF	; 255
    44c4:	60 81       	ld	r22, Z
    44c6:	71 81       	ldd	r23, Z+1	; 0x01
    44c8:	82 81       	ldd	r24, Z+2	; 0x02
    44ca:	93 81       	ldd	r25, Z+3	; 0x03
    44cc:	20 e0       	ldi	r18, 0x00	; 0
    44ce:	30 e0       	ldi	r19, 0x00	; 0
    44d0:	4a e7       	ldi	r20, 0x7A	; 122
    44d2:	55 e4       	ldi	r21, 0x45	; 69
    44d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44d8:	dc 01       	movw	r26, r24
    44da:	cb 01       	movw	r24, r22
    44dc:	f8 01       	movw	r30, r16
    44de:	80 83       	st	Z, r24
    44e0:	91 83       	std	Z+1, r25	; 0x01
    44e2:	a2 83       	std	Z+2, r26	; 0x02
    44e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    44e6:	fe 01       	movw	r30, r28
    44e8:	ff 96       	adiw	r30, 0x3f	; 63
    44ea:	60 81       	ld	r22, Z
    44ec:	71 81       	ldd	r23, Z+1	; 0x01
    44ee:	82 81       	ldd	r24, Z+2	; 0x02
    44f0:	93 81       	ldd	r25, Z+3	; 0x03
    44f2:	20 e0       	ldi	r18, 0x00	; 0
    44f4:	30 e0       	ldi	r19, 0x00	; 0
    44f6:	40 e8       	ldi	r20, 0x80	; 128
    44f8:	5f e3       	ldi	r21, 0x3F	; 63
    44fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    44fe:	88 23       	and	r24, r24
    4500:	2c f4       	brge	.+10     	; 0x450c <main+0x792>
		__ticks = 1;
    4502:	81 e0       	ldi	r24, 0x01	; 1
    4504:	90 e0       	ldi	r25, 0x00	; 0
    4506:	9e af       	std	Y+62, r25	; 0x3e
    4508:	8d af       	std	Y+61, r24	; 0x3d
    450a:	46 c0       	rjmp	.+140    	; 0x4598 <main+0x81e>
	else if (__tmp > 65535)
    450c:	fe 01       	movw	r30, r28
    450e:	ff 96       	adiw	r30, 0x3f	; 63
    4510:	60 81       	ld	r22, Z
    4512:	71 81       	ldd	r23, Z+1	; 0x01
    4514:	82 81       	ldd	r24, Z+2	; 0x02
    4516:	93 81       	ldd	r25, Z+3	; 0x03
    4518:	20 e0       	ldi	r18, 0x00	; 0
    451a:	3f ef       	ldi	r19, 0xFF	; 255
    451c:	4f e7       	ldi	r20, 0x7F	; 127
    451e:	57 e4       	ldi	r21, 0x47	; 71
    4520:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4524:	18 16       	cp	r1, r24
    4526:	64 f5       	brge	.+88     	; 0x4580 <main+0x806>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4528:	fe 01       	movw	r30, r28
    452a:	ed 5b       	subi	r30, 0xBD	; 189
    452c:	ff 4f       	sbci	r31, 0xFF	; 255
    452e:	60 81       	ld	r22, Z
    4530:	71 81       	ldd	r23, Z+1	; 0x01
    4532:	82 81       	ldd	r24, Z+2	; 0x02
    4534:	93 81       	ldd	r25, Z+3	; 0x03
    4536:	20 e0       	ldi	r18, 0x00	; 0
    4538:	30 e0       	ldi	r19, 0x00	; 0
    453a:	40 e2       	ldi	r20, 0x20	; 32
    453c:	51 e4       	ldi	r21, 0x41	; 65
    453e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4542:	dc 01       	movw	r26, r24
    4544:	cb 01       	movw	r24, r22
    4546:	bc 01       	movw	r22, r24
    4548:	cd 01       	movw	r24, r26
    454a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    454e:	dc 01       	movw	r26, r24
    4550:	cb 01       	movw	r24, r22
    4552:	9e af       	std	Y+62, r25	; 0x3e
    4554:	8d af       	std	Y+61, r24	; 0x3d
    4556:	0f c0       	rjmp	.+30     	; 0x4576 <main+0x7fc>
    4558:	80 e9       	ldi	r24, 0x90	; 144
    455a:	91 e0       	ldi	r25, 0x01	; 1
    455c:	9c af       	std	Y+60, r25	; 0x3c
    455e:	8b af       	std	Y+59, r24	; 0x3b
    4560:	8b ad       	ldd	r24, Y+59	; 0x3b
    4562:	9c ad       	ldd	r25, Y+60	; 0x3c
    4564:	01 97       	sbiw	r24, 0x01	; 1
    4566:	f1 f7       	brne	.-4      	; 0x4564 <main+0x7ea>
    4568:	9c af       	std	Y+60, r25	; 0x3c
    456a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    456c:	8d ad       	ldd	r24, Y+61	; 0x3d
    456e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4570:	01 97       	sbiw	r24, 0x01	; 1
    4572:	9e af       	std	Y+62, r25	; 0x3e
    4574:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4576:	8d ad       	ldd	r24, Y+61	; 0x3d
    4578:	9e ad       	ldd	r25, Y+62	; 0x3e
    457a:	00 97       	sbiw	r24, 0x00	; 0
    457c:	69 f7       	brne	.-38     	; 0x4558 <main+0x7de>
    457e:	16 c0       	rjmp	.+44     	; 0x45ac <main+0x832>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4580:	fe 01       	movw	r30, r28
    4582:	ff 96       	adiw	r30, 0x3f	; 63
    4584:	60 81       	ld	r22, Z
    4586:	71 81       	ldd	r23, Z+1	; 0x01
    4588:	82 81       	ldd	r24, Z+2	; 0x02
    458a:	93 81       	ldd	r25, Z+3	; 0x03
    458c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4590:	dc 01       	movw	r26, r24
    4592:	cb 01       	movw	r24, r22
    4594:	9e af       	std	Y+62, r25	; 0x3e
    4596:	8d af       	std	Y+61, r24	; 0x3d
    4598:	8d ad       	ldd	r24, Y+61	; 0x3d
    459a:	9e ad       	ldd	r25, Y+62	; 0x3e
    459c:	9a af       	std	Y+58, r25	; 0x3a
    459e:	89 af       	std	Y+57, r24	; 0x39
    45a0:	89 ad       	ldd	r24, Y+57	; 0x39
    45a2:	9a ad       	ldd	r25, Y+58	; 0x3a
    45a4:	01 97       	sbiw	r24, 0x01	; 1
    45a6:	f1 f7       	brne	.-4      	; 0x45a4 <main+0x82a>
    45a8:	9a af       	std	Y+58, r25	; 0x3a
    45aa:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(200);
		Temp = Ultrasonic(&ultr);
    45ac:	ce 01       	movw	r24, r28
    45ae:	8f 57       	subi	r24, 0x7F	; 127
    45b0:	9f 4f       	sbci	r25, 0xFF	; 255
    45b2:	0e 94 f5 24 	call	0x49ea	; 0x49ea <Ultrasonic>
    45b6:	90 93 e1 00 	sts	0x00E1, r25
    45ba:	80 93 e0 00 	sts	0x00E0, r24
		PWM_enuSetOutputCompare(T2_OCR,Forward_Direction);
    45be:	89 e2       	ldi	r24, 0x29	; 41
    45c0:	63 e1       	ldi	r22, 0x13	; 19
    45c2:	70 e0       	ldi	r23, 0x00	; 0
    45c4:	0e 94 4b 11 	call	0x2296	; 0x2296 <PWM_enuSetOutputCompare>
		if(Distance > Minimum_Distance || Temp > Minimum_Distance){
    45c8:	fe 01       	movw	r30, r28
    45ca:	e1 58       	subi	r30, 0x81	; 129
    45cc:	ff 4f       	sbci	r31, 0xFF	; 255
    45ce:	80 81       	ld	r24, Z
    45d0:	91 81       	ldd	r25, Z+1	; 0x01
    45d2:	8f 31       	cpi	r24, 0x1F	; 31
    45d4:	91 05       	cpc	r25, r1
    45d6:	40 f4       	brcc	.+16     	; 0x45e8 <main+0x86e>
    45d8:	80 91 e0 00 	lds	r24, 0x00E0
    45dc:	90 91 e1 00 	lds	r25, 0x00E1
    45e0:	8f 31       	cpi	r24, 0x1F	; 31
    45e2:	91 05       	cpc	r25, r1
    45e4:	08 f4       	brcc	.+2      	; 0x45e8 <main+0x86e>
    45e6:	0c c1       	rjmp	.+536    	; 0x4800 <main+0xa86>
			if(Distance >= Temp){
    45e8:	80 91 e0 00 	lds	r24, 0x00E0
    45ec:	90 91 e1 00 	lds	r25, 0x00E1
    45f0:	fe 01       	movw	r30, r28
    45f2:	e1 58       	subi	r30, 0x81	; 129
    45f4:	ff 4f       	sbci	r31, 0xFF	; 255
    45f6:	20 81       	ld	r18, Z
    45f8:	31 81       	ldd	r19, Z+1	; 0x01
    45fa:	28 17       	cp	r18, r24
    45fc:	39 07       	cpc	r19, r25
    45fe:	08 f4       	brcc	.+2      	; 0x4602 <main+0x888>
    4600:	79 c0       	rjmp	.+242    	; 0x46f4 <main+0x97a>
				Movement(Right);
    4602:	88 e0       	ldi	r24, 0x08	; 8
    4604:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <Movement>
    4608:	80 e0       	ldi	r24, 0x00	; 0
    460a:	90 e0       	ldi	r25, 0x00	; 0
    460c:	ac e8       	ldi	r26, 0x8C	; 140
    460e:	b3 e4       	ldi	r27, 0x43	; 67
    4610:	8d ab       	std	Y+53, r24	; 0x35
    4612:	9e ab       	std	Y+54, r25	; 0x36
    4614:	af ab       	std	Y+55, r26	; 0x37
    4616:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4618:	6d a9       	ldd	r22, Y+53	; 0x35
    461a:	7e a9       	ldd	r23, Y+54	; 0x36
    461c:	8f a9       	ldd	r24, Y+55	; 0x37
    461e:	98 ad       	ldd	r25, Y+56	; 0x38
    4620:	20 e0       	ldi	r18, 0x00	; 0
    4622:	30 e0       	ldi	r19, 0x00	; 0
    4624:	4a e7       	ldi	r20, 0x7A	; 122
    4626:	55 e4       	ldi	r21, 0x45	; 69
    4628:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    462c:	dc 01       	movw	r26, r24
    462e:	cb 01       	movw	r24, r22
    4630:	89 ab       	std	Y+49, r24	; 0x31
    4632:	9a ab       	std	Y+50, r25	; 0x32
    4634:	ab ab       	std	Y+51, r26	; 0x33
    4636:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4638:	69 a9       	ldd	r22, Y+49	; 0x31
    463a:	7a a9       	ldd	r23, Y+50	; 0x32
    463c:	8b a9       	ldd	r24, Y+51	; 0x33
    463e:	9c a9       	ldd	r25, Y+52	; 0x34
    4640:	20 e0       	ldi	r18, 0x00	; 0
    4642:	30 e0       	ldi	r19, 0x00	; 0
    4644:	40 e8       	ldi	r20, 0x80	; 128
    4646:	5f e3       	ldi	r21, 0x3F	; 63
    4648:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    464c:	88 23       	and	r24, r24
    464e:	2c f4       	brge	.+10     	; 0x465a <main+0x8e0>
		__ticks = 1;
    4650:	81 e0       	ldi	r24, 0x01	; 1
    4652:	90 e0       	ldi	r25, 0x00	; 0
    4654:	98 ab       	std	Y+48, r25	; 0x30
    4656:	8f a7       	std	Y+47, r24	; 0x2f
    4658:	3f c0       	rjmp	.+126    	; 0x46d8 <main+0x95e>
	else if (__tmp > 65535)
    465a:	69 a9       	ldd	r22, Y+49	; 0x31
    465c:	7a a9       	ldd	r23, Y+50	; 0x32
    465e:	8b a9       	ldd	r24, Y+51	; 0x33
    4660:	9c a9       	ldd	r25, Y+52	; 0x34
    4662:	20 e0       	ldi	r18, 0x00	; 0
    4664:	3f ef       	ldi	r19, 0xFF	; 255
    4666:	4f e7       	ldi	r20, 0x7F	; 127
    4668:	57 e4       	ldi	r21, 0x47	; 71
    466a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    466e:	18 16       	cp	r1, r24
    4670:	4c f5       	brge	.+82     	; 0x46c4 <main+0x94a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4672:	6d a9       	ldd	r22, Y+53	; 0x35
    4674:	7e a9       	ldd	r23, Y+54	; 0x36
    4676:	8f a9       	ldd	r24, Y+55	; 0x37
    4678:	98 ad       	ldd	r25, Y+56	; 0x38
    467a:	20 e0       	ldi	r18, 0x00	; 0
    467c:	30 e0       	ldi	r19, 0x00	; 0
    467e:	40 e2       	ldi	r20, 0x20	; 32
    4680:	51 e4       	ldi	r21, 0x41	; 65
    4682:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4686:	dc 01       	movw	r26, r24
    4688:	cb 01       	movw	r24, r22
    468a:	bc 01       	movw	r22, r24
    468c:	cd 01       	movw	r24, r26
    468e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4692:	dc 01       	movw	r26, r24
    4694:	cb 01       	movw	r24, r22
    4696:	98 ab       	std	Y+48, r25	; 0x30
    4698:	8f a7       	std	Y+47, r24	; 0x2f
    469a:	0f c0       	rjmp	.+30     	; 0x46ba <main+0x940>
    469c:	80 e9       	ldi	r24, 0x90	; 144
    469e:	91 e0       	ldi	r25, 0x01	; 1
    46a0:	9e a7       	std	Y+46, r25	; 0x2e
    46a2:	8d a7       	std	Y+45, r24	; 0x2d
    46a4:	8d a5       	ldd	r24, Y+45	; 0x2d
    46a6:	9e a5       	ldd	r25, Y+46	; 0x2e
    46a8:	01 97       	sbiw	r24, 0x01	; 1
    46aa:	f1 f7       	brne	.-4      	; 0x46a8 <main+0x92e>
    46ac:	9e a7       	std	Y+46, r25	; 0x2e
    46ae:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    46b2:	98 a9       	ldd	r25, Y+48	; 0x30
    46b4:	01 97       	sbiw	r24, 0x01	; 1
    46b6:	98 ab       	std	Y+48, r25	; 0x30
    46b8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    46bc:	98 a9       	ldd	r25, Y+48	; 0x30
    46be:	00 97       	sbiw	r24, 0x00	; 0
    46c0:	69 f7       	brne	.-38     	; 0x469c <main+0x922>
    46c2:	14 c0       	rjmp	.+40     	; 0x46ec <main+0x972>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46c4:	69 a9       	ldd	r22, Y+49	; 0x31
    46c6:	7a a9       	ldd	r23, Y+50	; 0x32
    46c8:	8b a9       	ldd	r24, Y+51	; 0x33
    46ca:	9c a9       	ldd	r25, Y+52	; 0x34
    46cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46d0:	dc 01       	movw	r26, r24
    46d2:	cb 01       	movw	r24, r22
    46d4:	98 ab       	std	Y+48, r25	; 0x30
    46d6:	8f a7       	std	Y+47, r24	; 0x2f
    46d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    46da:	98 a9       	ldd	r25, Y+48	; 0x30
    46dc:	9c a7       	std	Y+44, r25	; 0x2c
    46de:	8b a7       	std	Y+43, r24	; 0x2b
    46e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    46e2:	9c a5       	ldd	r25, Y+44	; 0x2c
    46e4:	01 97       	sbiw	r24, 0x01	; 1
    46e6:	f1 f7       	brne	.-4      	; 0x46e4 <main+0x96a>
    46e8:	9c a7       	std	Y+44, r25	; 0x2c
    46ea:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(Time_Of_Quarter_Cycle);
				Movement(Stop);
    46ec:	80 e0       	ldi	r24, 0x00	; 0
    46ee:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <Movement>
    46f2:	e5 cd       	rjmp	.-1078   	; 0x42be <main+0x544>
			}
			else if(Distance < Temp){
    46f4:	80 91 e0 00 	lds	r24, 0x00E0
    46f8:	90 91 e1 00 	lds	r25, 0x00E1
    46fc:	fe 01       	movw	r30, r28
    46fe:	e1 58       	subi	r30, 0x81	; 129
    4700:	ff 4f       	sbci	r31, 0xFF	; 255
    4702:	20 81       	ld	r18, Z
    4704:	31 81       	ldd	r19, Z+1	; 0x01
    4706:	28 17       	cp	r18, r24
    4708:	39 07       	cpc	r19, r25
    470a:	08 f0       	brcs	.+2      	; 0x470e <main+0x994>
    470c:	d8 cd       	rjmp	.-1104   	; 0x42be <main+0x544>
				Movement(Left);
    470e:	81 e0       	ldi	r24, 0x01	; 1
    4710:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <Movement>
    4714:	80 e0       	ldi	r24, 0x00	; 0
    4716:	90 e0       	ldi	r25, 0x00	; 0
    4718:	ac e8       	ldi	r26, 0x8C	; 140
    471a:	b3 e4       	ldi	r27, 0x43	; 67
    471c:	8f a3       	std	Y+39, r24	; 0x27
    471e:	98 a7       	std	Y+40, r25	; 0x28
    4720:	a9 a7       	std	Y+41, r26	; 0x29
    4722:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4724:	6f a1       	ldd	r22, Y+39	; 0x27
    4726:	78 a5       	ldd	r23, Y+40	; 0x28
    4728:	89 a5       	ldd	r24, Y+41	; 0x29
    472a:	9a a5       	ldd	r25, Y+42	; 0x2a
    472c:	20 e0       	ldi	r18, 0x00	; 0
    472e:	30 e0       	ldi	r19, 0x00	; 0
    4730:	4a e7       	ldi	r20, 0x7A	; 122
    4732:	55 e4       	ldi	r21, 0x45	; 69
    4734:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4738:	dc 01       	movw	r26, r24
    473a:	cb 01       	movw	r24, r22
    473c:	8b a3       	std	Y+35, r24	; 0x23
    473e:	9c a3       	std	Y+36, r25	; 0x24
    4740:	ad a3       	std	Y+37, r26	; 0x25
    4742:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4744:	6b a1       	ldd	r22, Y+35	; 0x23
    4746:	7c a1       	ldd	r23, Y+36	; 0x24
    4748:	8d a1       	ldd	r24, Y+37	; 0x25
    474a:	9e a1       	ldd	r25, Y+38	; 0x26
    474c:	20 e0       	ldi	r18, 0x00	; 0
    474e:	30 e0       	ldi	r19, 0x00	; 0
    4750:	40 e8       	ldi	r20, 0x80	; 128
    4752:	5f e3       	ldi	r21, 0x3F	; 63
    4754:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4758:	88 23       	and	r24, r24
    475a:	2c f4       	brge	.+10     	; 0x4766 <main+0x9ec>
		__ticks = 1;
    475c:	81 e0       	ldi	r24, 0x01	; 1
    475e:	90 e0       	ldi	r25, 0x00	; 0
    4760:	9a a3       	std	Y+34, r25	; 0x22
    4762:	89 a3       	std	Y+33, r24	; 0x21
    4764:	3f c0       	rjmp	.+126    	; 0x47e4 <main+0xa6a>
	else if (__tmp > 65535)
    4766:	6b a1       	ldd	r22, Y+35	; 0x23
    4768:	7c a1       	ldd	r23, Y+36	; 0x24
    476a:	8d a1       	ldd	r24, Y+37	; 0x25
    476c:	9e a1       	ldd	r25, Y+38	; 0x26
    476e:	20 e0       	ldi	r18, 0x00	; 0
    4770:	3f ef       	ldi	r19, 0xFF	; 255
    4772:	4f e7       	ldi	r20, 0x7F	; 127
    4774:	57 e4       	ldi	r21, 0x47	; 71
    4776:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    477a:	18 16       	cp	r1, r24
    477c:	4c f5       	brge	.+82     	; 0x47d0 <main+0xa56>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    477e:	6f a1       	ldd	r22, Y+39	; 0x27
    4780:	78 a5       	ldd	r23, Y+40	; 0x28
    4782:	89 a5       	ldd	r24, Y+41	; 0x29
    4784:	9a a5       	ldd	r25, Y+42	; 0x2a
    4786:	20 e0       	ldi	r18, 0x00	; 0
    4788:	30 e0       	ldi	r19, 0x00	; 0
    478a:	40 e2       	ldi	r20, 0x20	; 32
    478c:	51 e4       	ldi	r21, 0x41	; 65
    478e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4792:	dc 01       	movw	r26, r24
    4794:	cb 01       	movw	r24, r22
    4796:	bc 01       	movw	r22, r24
    4798:	cd 01       	movw	r24, r26
    479a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    479e:	dc 01       	movw	r26, r24
    47a0:	cb 01       	movw	r24, r22
    47a2:	9a a3       	std	Y+34, r25	; 0x22
    47a4:	89 a3       	std	Y+33, r24	; 0x21
    47a6:	0f c0       	rjmp	.+30     	; 0x47c6 <main+0xa4c>
    47a8:	80 e9       	ldi	r24, 0x90	; 144
    47aa:	91 e0       	ldi	r25, 0x01	; 1
    47ac:	98 a3       	std	Y+32, r25	; 0x20
    47ae:	8f 8f       	std	Y+31, r24	; 0x1f
    47b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    47b2:	98 a1       	ldd	r25, Y+32	; 0x20
    47b4:	01 97       	sbiw	r24, 0x01	; 1
    47b6:	f1 f7       	brne	.-4      	; 0x47b4 <main+0xa3a>
    47b8:	98 a3       	std	Y+32, r25	; 0x20
    47ba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47bc:	89 a1       	ldd	r24, Y+33	; 0x21
    47be:	9a a1       	ldd	r25, Y+34	; 0x22
    47c0:	01 97       	sbiw	r24, 0x01	; 1
    47c2:	9a a3       	std	Y+34, r25	; 0x22
    47c4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47c6:	89 a1       	ldd	r24, Y+33	; 0x21
    47c8:	9a a1       	ldd	r25, Y+34	; 0x22
    47ca:	00 97       	sbiw	r24, 0x00	; 0
    47cc:	69 f7       	brne	.-38     	; 0x47a8 <main+0xa2e>
    47ce:	14 c0       	rjmp	.+40     	; 0x47f8 <main+0xa7e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47d0:	6b a1       	ldd	r22, Y+35	; 0x23
    47d2:	7c a1       	ldd	r23, Y+36	; 0x24
    47d4:	8d a1       	ldd	r24, Y+37	; 0x25
    47d6:	9e a1       	ldd	r25, Y+38	; 0x26
    47d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47dc:	dc 01       	movw	r26, r24
    47de:	cb 01       	movw	r24, r22
    47e0:	9a a3       	std	Y+34, r25	; 0x22
    47e2:	89 a3       	std	Y+33, r24	; 0x21
    47e4:	89 a1       	ldd	r24, Y+33	; 0x21
    47e6:	9a a1       	ldd	r25, Y+34	; 0x22
    47e8:	9e 8f       	std	Y+30, r25	; 0x1e
    47ea:	8d 8f       	std	Y+29, r24	; 0x1d
    47ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    47ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    47f0:	01 97       	sbiw	r24, 0x01	; 1
    47f2:	f1 f7       	brne	.-4      	; 0x47f0 <main+0xa76>
    47f4:	9e 8f       	std	Y+30, r25	; 0x1e
    47f6:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(Time_Of_Quarter_Cycle);
				Movement(Stop);
    47f8:	80 e0       	ldi	r24, 0x00	; 0
    47fa:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <Movement>
    47fe:	5f cd       	rjmp	.-1346   	; 0x42be <main+0x544>
			}
		}
		else{
			DIO_enuSetPinValue(PuzzerGroup,PuzzerPin,DIO_u8HIGH);
    4800:	82 e0       	ldi	r24, 0x02	; 2
    4802:	65 e0       	ldi	r22, 0x05	; 5
    4804:	41 e0       	ldi	r20, 0x01	; 1
    4806:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>
    480a:	80 e0       	ldi	r24, 0x00	; 0
    480c:	90 e0       	ldi	r25, 0x00	; 0
    480e:	a8 ec       	ldi	r26, 0xC8	; 200
    4810:	b2 e4       	ldi	r27, 0x42	; 66
    4812:	89 8f       	std	Y+25, r24	; 0x19
    4814:	9a 8f       	std	Y+26, r25	; 0x1a
    4816:	ab 8f       	std	Y+27, r26	; 0x1b
    4818:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    481a:	69 8d       	ldd	r22, Y+25	; 0x19
    481c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    481e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4820:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4822:	20 e0       	ldi	r18, 0x00	; 0
    4824:	30 e0       	ldi	r19, 0x00	; 0
    4826:	4a e7       	ldi	r20, 0x7A	; 122
    4828:	55 e4       	ldi	r21, 0x45	; 69
    482a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    482e:	dc 01       	movw	r26, r24
    4830:	cb 01       	movw	r24, r22
    4832:	8d 8b       	std	Y+21, r24	; 0x15
    4834:	9e 8b       	std	Y+22, r25	; 0x16
    4836:	af 8b       	std	Y+23, r26	; 0x17
    4838:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    483a:	6d 89       	ldd	r22, Y+21	; 0x15
    483c:	7e 89       	ldd	r23, Y+22	; 0x16
    483e:	8f 89       	ldd	r24, Y+23	; 0x17
    4840:	98 8d       	ldd	r25, Y+24	; 0x18
    4842:	20 e0       	ldi	r18, 0x00	; 0
    4844:	30 e0       	ldi	r19, 0x00	; 0
    4846:	40 e8       	ldi	r20, 0x80	; 128
    4848:	5f e3       	ldi	r21, 0x3F	; 63
    484a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    484e:	88 23       	and	r24, r24
    4850:	2c f4       	brge	.+10     	; 0x485c <main+0xae2>
		__ticks = 1;
    4852:	81 e0       	ldi	r24, 0x01	; 1
    4854:	90 e0       	ldi	r25, 0x00	; 0
    4856:	9c 8b       	std	Y+20, r25	; 0x14
    4858:	8b 8b       	std	Y+19, r24	; 0x13
    485a:	3f c0       	rjmp	.+126    	; 0x48da <main+0xb60>
	else if (__tmp > 65535)
    485c:	6d 89       	ldd	r22, Y+21	; 0x15
    485e:	7e 89       	ldd	r23, Y+22	; 0x16
    4860:	8f 89       	ldd	r24, Y+23	; 0x17
    4862:	98 8d       	ldd	r25, Y+24	; 0x18
    4864:	20 e0       	ldi	r18, 0x00	; 0
    4866:	3f ef       	ldi	r19, 0xFF	; 255
    4868:	4f e7       	ldi	r20, 0x7F	; 127
    486a:	57 e4       	ldi	r21, 0x47	; 71
    486c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4870:	18 16       	cp	r1, r24
    4872:	4c f5       	brge	.+82     	; 0x48c6 <main+0xb4c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4874:	69 8d       	ldd	r22, Y+25	; 0x19
    4876:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4878:	8b 8d       	ldd	r24, Y+27	; 0x1b
    487a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    487c:	20 e0       	ldi	r18, 0x00	; 0
    487e:	30 e0       	ldi	r19, 0x00	; 0
    4880:	40 e2       	ldi	r20, 0x20	; 32
    4882:	51 e4       	ldi	r21, 0x41	; 65
    4884:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4888:	dc 01       	movw	r26, r24
    488a:	cb 01       	movw	r24, r22
    488c:	bc 01       	movw	r22, r24
    488e:	cd 01       	movw	r24, r26
    4890:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4894:	dc 01       	movw	r26, r24
    4896:	cb 01       	movw	r24, r22
    4898:	9c 8b       	std	Y+20, r25	; 0x14
    489a:	8b 8b       	std	Y+19, r24	; 0x13
    489c:	0f c0       	rjmp	.+30     	; 0x48bc <main+0xb42>
    489e:	80 e9       	ldi	r24, 0x90	; 144
    48a0:	91 e0       	ldi	r25, 0x01	; 1
    48a2:	9a 8b       	std	Y+18, r25	; 0x12
    48a4:	89 8b       	std	Y+17, r24	; 0x11
    48a6:	89 89       	ldd	r24, Y+17	; 0x11
    48a8:	9a 89       	ldd	r25, Y+18	; 0x12
    48aa:	01 97       	sbiw	r24, 0x01	; 1
    48ac:	f1 f7       	brne	.-4      	; 0x48aa <main+0xb30>
    48ae:	9a 8b       	std	Y+18, r25	; 0x12
    48b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48b2:	8b 89       	ldd	r24, Y+19	; 0x13
    48b4:	9c 89       	ldd	r25, Y+20	; 0x14
    48b6:	01 97       	sbiw	r24, 0x01	; 1
    48b8:	9c 8b       	std	Y+20, r25	; 0x14
    48ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48bc:	8b 89       	ldd	r24, Y+19	; 0x13
    48be:	9c 89       	ldd	r25, Y+20	; 0x14
    48c0:	00 97       	sbiw	r24, 0x00	; 0
    48c2:	69 f7       	brne	.-38     	; 0x489e <main+0xb24>
    48c4:	14 c0       	rjmp	.+40     	; 0x48ee <main+0xb74>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48c6:	6d 89       	ldd	r22, Y+21	; 0x15
    48c8:	7e 89       	ldd	r23, Y+22	; 0x16
    48ca:	8f 89       	ldd	r24, Y+23	; 0x17
    48cc:	98 8d       	ldd	r25, Y+24	; 0x18
    48ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48d2:	dc 01       	movw	r26, r24
    48d4:	cb 01       	movw	r24, r22
    48d6:	9c 8b       	std	Y+20, r25	; 0x14
    48d8:	8b 8b       	std	Y+19, r24	; 0x13
    48da:	8b 89       	ldd	r24, Y+19	; 0x13
    48dc:	9c 89       	ldd	r25, Y+20	; 0x14
    48de:	98 8b       	std	Y+16, r25	; 0x10
    48e0:	8f 87       	std	Y+15, r24	; 0x0f
    48e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    48e4:	98 89       	ldd	r25, Y+16	; 0x10
    48e6:	01 97       	sbiw	r24, 0x01	; 1
    48e8:	f1 f7       	brne	.-4      	; 0x48e6 <main+0xb6c>
    48ea:	98 8b       	std	Y+16, r25	; 0x10
    48ec:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(100);
			DIO_enuSetPinValue(PuzzerGroup,PuzzerPin,DIO_u8LOW);
    48ee:	82 e0       	ldi	r24, 0x02	; 2
    48f0:	65 e0       	ldi	r22, 0x05	; 5
    48f2:	40 e0       	ldi	r20, 0x00	; 0
    48f4:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>
			Movement(TurnRound);
    48f8:	85 e0       	ldi	r24, 0x05	; 5
    48fa:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <Movement>
    48fe:	80 e0       	ldi	r24, 0x00	; 0
    4900:	90 e0       	ldi	r25, 0x00	; 0
    4902:	a6 e9       	ldi	r26, 0x96	; 150
    4904:	b3 e4       	ldi	r27, 0x43	; 67
    4906:	8b 87       	std	Y+11, r24	; 0x0b
    4908:	9c 87       	std	Y+12, r25	; 0x0c
    490a:	ad 87       	std	Y+13, r26	; 0x0d
    490c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    490e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4910:	7c 85       	ldd	r23, Y+12	; 0x0c
    4912:	8d 85       	ldd	r24, Y+13	; 0x0d
    4914:	9e 85       	ldd	r25, Y+14	; 0x0e
    4916:	20 e0       	ldi	r18, 0x00	; 0
    4918:	30 e0       	ldi	r19, 0x00	; 0
    491a:	4a e7       	ldi	r20, 0x7A	; 122
    491c:	55 e4       	ldi	r21, 0x45	; 69
    491e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4922:	dc 01       	movw	r26, r24
    4924:	cb 01       	movw	r24, r22
    4926:	8f 83       	std	Y+7, r24	; 0x07
    4928:	98 87       	std	Y+8, r25	; 0x08
    492a:	a9 87       	std	Y+9, r26	; 0x09
    492c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    492e:	6f 81       	ldd	r22, Y+7	; 0x07
    4930:	78 85       	ldd	r23, Y+8	; 0x08
    4932:	89 85       	ldd	r24, Y+9	; 0x09
    4934:	9a 85       	ldd	r25, Y+10	; 0x0a
    4936:	20 e0       	ldi	r18, 0x00	; 0
    4938:	30 e0       	ldi	r19, 0x00	; 0
    493a:	40 e8       	ldi	r20, 0x80	; 128
    493c:	5f e3       	ldi	r21, 0x3F	; 63
    493e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4942:	88 23       	and	r24, r24
    4944:	2c f4       	brge	.+10     	; 0x4950 <main+0xbd6>
		__ticks = 1;
    4946:	81 e0       	ldi	r24, 0x01	; 1
    4948:	90 e0       	ldi	r25, 0x00	; 0
    494a:	9e 83       	std	Y+6, r25	; 0x06
    494c:	8d 83       	std	Y+5, r24	; 0x05
    494e:	3f c0       	rjmp	.+126    	; 0x49ce <main+0xc54>
	else if (__tmp > 65535)
    4950:	6f 81       	ldd	r22, Y+7	; 0x07
    4952:	78 85       	ldd	r23, Y+8	; 0x08
    4954:	89 85       	ldd	r24, Y+9	; 0x09
    4956:	9a 85       	ldd	r25, Y+10	; 0x0a
    4958:	20 e0       	ldi	r18, 0x00	; 0
    495a:	3f ef       	ldi	r19, 0xFF	; 255
    495c:	4f e7       	ldi	r20, 0x7F	; 127
    495e:	57 e4       	ldi	r21, 0x47	; 71
    4960:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4964:	18 16       	cp	r1, r24
    4966:	4c f5       	brge	.+82     	; 0x49ba <main+0xc40>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4968:	6b 85       	ldd	r22, Y+11	; 0x0b
    496a:	7c 85       	ldd	r23, Y+12	; 0x0c
    496c:	8d 85       	ldd	r24, Y+13	; 0x0d
    496e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4970:	20 e0       	ldi	r18, 0x00	; 0
    4972:	30 e0       	ldi	r19, 0x00	; 0
    4974:	40 e2       	ldi	r20, 0x20	; 32
    4976:	51 e4       	ldi	r21, 0x41	; 65
    4978:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    497c:	dc 01       	movw	r26, r24
    497e:	cb 01       	movw	r24, r22
    4980:	bc 01       	movw	r22, r24
    4982:	cd 01       	movw	r24, r26
    4984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4988:	dc 01       	movw	r26, r24
    498a:	cb 01       	movw	r24, r22
    498c:	9e 83       	std	Y+6, r25	; 0x06
    498e:	8d 83       	std	Y+5, r24	; 0x05
    4990:	0f c0       	rjmp	.+30     	; 0x49b0 <main+0xc36>
    4992:	80 e9       	ldi	r24, 0x90	; 144
    4994:	91 e0       	ldi	r25, 0x01	; 1
    4996:	9c 83       	std	Y+4, r25	; 0x04
    4998:	8b 83       	std	Y+3, r24	; 0x03
    499a:	8b 81       	ldd	r24, Y+3	; 0x03
    499c:	9c 81       	ldd	r25, Y+4	; 0x04
    499e:	01 97       	sbiw	r24, 0x01	; 1
    49a0:	f1 f7       	brne	.-4      	; 0x499e <main+0xc24>
    49a2:	9c 83       	std	Y+4, r25	; 0x04
    49a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49a6:	8d 81       	ldd	r24, Y+5	; 0x05
    49a8:	9e 81       	ldd	r25, Y+6	; 0x06
    49aa:	01 97       	sbiw	r24, 0x01	; 1
    49ac:	9e 83       	std	Y+6, r25	; 0x06
    49ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49b0:	8d 81       	ldd	r24, Y+5	; 0x05
    49b2:	9e 81       	ldd	r25, Y+6	; 0x06
    49b4:	00 97       	sbiw	r24, 0x00	; 0
    49b6:	69 f7       	brne	.-38     	; 0x4992 <main+0xc18>
    49b8:	14 c0       	rjmp	.+40     	; 0x49e2 <main+0xc68>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49ba:	6f 81       	ldd	r22, Y+7	; 0x07
    49bc:	78 85       	ldd	r23, Y+8	; 0x08
    49be:	89 85       	ldd	r24, Y+9	; 0x09
    49c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    49c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49c6:	dc 01       	movw	r26, r24
    49c8:	cb 01       	movw	r24, r22
    49ca:	9e 83       	std	Y+6, r25	; 0x06
    49cc:	8d 83       	std	Y+5, r24	; 0x05
    49ce:	8d 81       	ldd	r24, Y+5	; 0x05
    49d0:	9e 81       	ldd	r25, Y+6	; 0x06
    49d2:	9a 83       	std	Y+2, r25	; 0x02
    49d4:	89 83       	std	Y+1, r24	; 0x01
    49d6:	89 81       	ldd	r24, Y+1	; 0x01
    49d8:	9a 81       	ldd	r25, Y+2	; 0x02
    49da:	01 97       	sbiw	r24, 0x01	; 1
    49dc:	f1 f7       	brne	.-4      	; 0x49da <main+0xc60>
    49de:	9a 83       	std	Y+2, r25	; 0x02
    49e0:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(300);
			Movement(Stop);
    49e2:	80 e0       	ldi	r24, 0x00	; 0
    49e4:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <Movement>
    49e8:	6a cc       	rjmp	.-1836   	; 0x42be <main+0x544>

000049ea <Ultrasonic>:
		}
	}
}

u16 Ultrasonic(ULTR_T * ptr){
    49ea:	df 93       	push	r29
    49ec:	cf 93       	push	r28
    49ee:	cd b7       	in	r28, 0x3d	; 61
    49f0:	de b7       	in	r29, 0x3e	; 62
    49f2:	28 97       	sbiw	r28, 0x08	; 8
    49f4:	0f b6       	in	r0, 0x3f	; 63
    49f6:	f8 94       	cli
    49f8:	de bf       	out	0x3e, r29	; 62
    49fa:	0f be       	out	0x3f, r0	; 63
    49fc:	cd bf       	out	0x3d, r28	; 61
    49fe:	98 87       	std	Y+8, r25	; 0x08
    4a00:	8f 83       	std	Y+7, r24	; 0x07
	u16 Distance = 0;
    4a02:	1e 82       	std	Y+6, r1	; 0x06
    4a04:	1d 82       	std	Y+5, r1	; 0x05
    4a06:	65 c0       	rjmp	.+202    	; 0x4ad2 <Ultrasonic+0xe8>
	while(Distance == 0 || Distance > 400){
		DIO_enuSetPinValue(TRIGERGROUP,TRIGERPIN,DIO_u8HIGH);
    4a08:	82 e0       	ldi	r24, 0x02	; 2
    4a0a:	62 e0       	ldi	r22, 0x02	; 2
    4a0c:	41 e0       	ldi	r20, 0x01	; 1
    4a0e:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>
		Timer_enuSetPrescaler((Timer_AstrTimerConfig + 1),PRE1);
    4a12:	86 ea       	ldi	r24, 0xA6	; 166
    4a14:	90 e0       	ldi	r25, 0x00	; 0
    4a16:	61 e0       	ldi	r22, 0x01	; 1
    4a18:	0e 94 cc 09 	call	0x1398	; 0x1398 <Timer_enuSetPrescaler>
		Timer_enuSetTCNT((Timer_AstrTimerConfig + 1),0);
    4a1c:	86 ea       	ldi	r24, 0xA6	; 166
    4a1e:	90 e0       	ldi	r25, 0x00	; 0
    4a20:	60 e0       	ldi	r22, 0x00	; 0
    4a22:	70 e0       	ldi	r23, 0x00	; 0
    4a24:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <Timer_enuSetTCNT>
		ptr->state_EXTI = 0;
    4a28:	ef 81       	ldd	r30, Y+7	; 0x07
    4a2a:	f8 85       	ldd	r31, Y+8	; 0x08
    4a2c:	12 82       	std	Z+2, r1	; 0x02
		while(!(ptr->state_EXTI == 2));
    4a2e:	ef 81       	ldd	r30, Y+7	; 0x07
    4a30:	f8 85       	ldd	r31, Y+8	; 0x08
    4a32:	82 81       	ldd	r24, Z+2	; 0x02
    4a34:	82 30       	cpi	r24, 0x02	; 2
    4a36:	d9 f7       	brne	.-10     	; 0x4a2e <Ultrasonic+0x44>
		EXTI_enuSetSenseLvl(EXTI_AstrEXTIConfig,RISING);
    4a38:	85 eb       	ldi	r24, 0xB5	; 181
    4a3a:	90 e0       	ldi	r25, 0x00	; 0
    4a3c:	6c e0       	ldi	r22, 0x0C	; 12
    4a3e:	0e 94 1a 14 	call	0x2834	; 0x2834 <EXTI_enuSetSenseLvl>
		s32 time = (((ptr->Counter_ULTR * 256ul)+ptr->TCNT_ULTR)*1000ul) / 16000ul;
    4a42:	ef 81       	ldd	r30, Y+7	; 0x07
    4a44:	f8 85       	ldd	r31, Y+8	; 0x08
    4a46:	84 81       	ldd	r24, Z+4	; 0x04
    4a48:	95 81       	ldd	r25, Z+5	; 0x05
    4a4a:	cc 01       	movw	r24, r24
    4a4c:	a0 e0       	ldi	r26, 0x00	; 0
    4a4e:	b0 e0       	ldi	r27, 0x00	; 0
    4a50:	22 27       	eor	r18, r18
    4a52:	38 2f       	mov	r19, r24
    4a54:	49 2f       	mov	r20, r25
    4a56:	5a 2f       	mov	r21, r26
    4a58:	ef 81       	ldd	r30, Y+7	; 0x07
    4a5a:	f8 85       	ldd	r31, Y+8	; 0x08
    4a5c:	83 81       	ldd	r24, Z+3	; 0x03
    4a5e:	88 2f       	mov	r24, r24
    4a60:	90 e0       	ldi	r25, 0x00	; 0
    4a62:	a0 e0       	ldi	r26, 0x00	; 0
    4a64:	b0 e0       	ldi	r27, 0x00	; 0
    4a66:	82 0f       	add	r24, r18
    4a68:	93 1f       	adc	r25, r19
    4a6a:	a4 1f       	adc	r26, r20
    4a6c:	b5 1f       	adc	r27, r21
    4a6e:	28 ee       	ldi	r18, 0xE8	; 232
    4a70:	33 e0       	ldi	r19, 0x03	; 3
    4a72:	40 e0       	ldi	r20, 0x00	; 0
    4a74:	50 e0       	ldi	r21, 0x00	; 0
    4a76:	bc 01       	movw	r22, r24
    4a78:	cd 01       	movw	r24, r26
    4a7a:	0e 94 7f 26 	call	0x4cfe	; 0x4cfe <__mulsi3>
    4a7e:	dc 01       	movw	r26, r24
    4a80:	cb 01       	movw	r24, r22
    4a82:	20 e8       	ldi	r18, 0x80	; 128
    4a84:	3e e3       	ldi	r19, 0x3E	; 62
    4a86:	40 e0       	ldi	r20, 0x00	; 0
    4a88:	50 e0       	ldi	r21, 0x00	; 0
    4a8a:	bc 01       	movw	r22, r24
    4a8c:	cd 01       	movw	r24, r26
    4a8e:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <__udivmodsi4>
    4a92:	da 01       	movw	r26, r20
    4a94:	c9 01       	movw	r24, r18
    4a96:	89 83       	std	Y+1, r24	; 0x01
    4a98:	9a 83       	std	Y+2, r25	; 0x02
    4a9a:	ab 83       	std	Y+3, r26	; 0x03
    4a9c:	bc 83       	std	Y+4, r27	; 0x04
		Distance = (((time * 34)/1000) / 2);
    4a9e:	89 81       	ldd	r24, Y+1	; 0x01
    4aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    4aa2:	ab 81       	ldd	r26, Y+3	; 0x03
    4aa4:	bc 81       	ldd	r27, Y+4	; 0x04
    4aa6:	22 e2       	ldi	r18, 0x22	; 34
    4aa8:	30 e0       	ldi	r19, 0x00	; 0
    4aaa:	40 e0       	ldi	r20, 0x00	; 0
    4aac:	50 e0       	ldi	r21, 0x00	; 0
    4aae:	bc 01       	movw	r22, r24
    4ab0:	cd 01       	movw	r24, r26
    4ab2:	0e 94 7f 26 	call	0x4cfe	; 0x4cfe <__mulsi3>
    4ab6:	dc 01       	movw	r26, r24
    4ab8:	cb 01       	movw	r24, r22
    4aba:	20 ed       	ldi	r18, 0xD0	; 208
    4abc:	37 e0       	ldi	r19, 0x07	; 7
    4abe:	40 e0       	ldi	r20, 0x00	; 0
    4ac0:	50 e0       	ldi	r21, 0x00	; 0
    4ac2:	bc 01       	movw	r22, r24
    4ac4:	cd 01       	movw	r24, r26
    4ac6:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <__divmodsi4>
    4aca:	da 01       	movw	r26, r20
    4acc:	c9 01       	movw	r24, r18
    4ace:	9e 83       	std	Y+6, r25	; 0x06
    4ad0:	8d 83       	std	Y+5, r24	; 0x05
	}
}

u16 Ultrasonic(ULTR_T * ptr){
	u16 Distance = 0;
	while(Distance == 0 || Distance > 400){
    4ad2:	8d 81       	ldd	r24, Y+5	; 0x05
    4ad4:	9e 81       	ldd	r25, Y+6	; 0x06
    4ad6:	00 97       	sbiw	r24, 0x00	; 0
    4ad8:	09 f4       	brne	.+2      	; 0x4adc <Ultrasonic+0xf2>
    4ada:	96 cf       	rjmp	.-212    	; 0x4a08 <Ultrasonic+0x1e>
    4adc:	8d 81       	ldd	r24, Y+5	; 0x05
    4ade:	9e 81       	ldd	r25, Y+6	; 0x06
    4ae0:	21 e0       	ldi	r18, 0x01	; 1
    4ae2:	81 39       	cpi	r24, 0x91	; 145
    4ae4:	92 07       	cpc	r25, r18
    4ae6:	08 f0       	brcs	.+2      	; 0x4aea <Ultrasonic+0x100>
    4ae8:	8f cf       	rjmp	.-226    	; 0x4a08 <Ultrasonic+0x1e>
		while(!(ptr->state_EXTI == 2));
		EXTI_enuSetSenseLvl(EXTI_AstrEXTIConfig,RISING);
		s32 time = (((ptr->Counter_ULTR * 256ul)+ptr->TCNT_ULTR)*1000ul) / 16000ul;
		Distance = (((time * 34)/1000) / 2);
	}
	return Distance;
    4aea:	8d 81       	ldd	r24, Y+5	; 0x05
    4aec:	9e 81       	ldd	r25, Y+6	; 0x06
}
    4aee:	28 96       	adiw	r28, 0x08	; 8
    4af0:	0f b6       	in	r0, 0x3f	; 63
    4af2:	f8 94       	cli
    4af4:	de bf       	out	0x3e, r29	; 62
    4af6:	0f be       	out	0x3f, r0	; 63
    4af8:	cd bf       	out	0x3d, r28	; 61
    4afa:	cf 91       	pop	r28
    4afc:	df 91       	pop	r29
    4afe:	08 95       	ret

00004b00 <ICR_EXTI>:

void ICR_EXTI(void * x){
    4b00:	df 93       	push	r29
    4b02:	cf 93       	push	r28
    4b04:	00 d0       	rcall	.+0      	; 0x4b06 <ICR_EXTI+0x6>
    4b06:	00 d0       	rcall	.+0      	; 0x4b08 <ICR_EXTI+0x8>
    4b08:	cd b7       	in	r28, 0x3d	; 61
    4b0a:	de b7       	in	r29, 0x3e	; 62
    4b0c:	9c 83       	std	Y+4, r25	; 0x04
    4b0e:	8b 83       	std	Y+3, r24	; 0x03
	ULTR_T *ptr = x;
    4b10:	8b 81       	ldd	r24, Y+3	; 0x03
    4b12:	9c 81       	ldd	r25, Y+4	; 0x04
    4b14:	9a 83       	std	Y+2, r25	; 0x02
    4b16:	89 83       	std	Y+1, r24	; 0x01
	if(ptr->state_EXTI == 0){
    4b18:	e9 81       	ldd	r30, Y+1	; 0x01
    4b1a:	fa 81       	ldd	r31, Y+2	; 0x02
    4b1c:	82 81       	ldd	r24, Z+2	; 0x02
    4b1e:	88 23       	and	r24, r24
    4b20:	a1 f4       	brne	.+40     	; 0x4b4a <ICR_EXTI+0x4a>
		ptr->Counter = 0;
    4b22:	e9 81       	ldd	r30, Y+1	; 0x01
    4b24:	fa 81       	ldd	r31, Y+2	; 0x02
    4b26:	11 82       	std	Z+1, r1	; 0x01
    4b28:	10 82       	st	Z, r1
		Timer_enuSetTCNT(Timer_AstrTimerConfig,0);
    4b2a:	8e e9       	ldi	r24, 0x9E	; 158
    4b2c:	90 e0       	ldi	r25, 0x00	; 0
    4b2e:	60 e0       	ldi	r22, 0x00	; 0
    4b30:	70 e0       	ldi	r23, 0x00	; 0
    4b32:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <Timer_enuSetTCNT>
		EXTI_enuSetSenseLvl(EXTI_AstrEXTIConfig,FALLING);
    4b36:	85 eb       	ldi	r24, 0xB5	; 181
    4b38:	90 e0       	ldi	r25, 0x00	; 0
    4b3a:	60 e6       	ldi	r22, 0x60	; 96
    4b3c:	0e 94 1a 14 	call	0x2834	; 0x2834 <EXTI_enuSetSenseLvl>
		ptr->state_EXTI = 1;
    4b40:	e9 81       	ldd	r30, Y+1	; 0x01
    4b42:	fa 81       	ldd	r31, Y+2	; 0x02
    4b44:	81 e0       	ldi	r24, 0x01	; 1
    4b46:	82 83       	std	Z+2, r24	; 0x02
    4b48:	1a c0       	rjmp	.+52     	; 0x4b7e <ICR_EXTI+0x7e>
	}
	else if(ptr->state_EXTI == 1){
    4b4a:	e9 81       	ldd	r30, Y+1	; 0x01
    4b4c:	fa 81       	ldd	r31, Y+2	; 0x02
    4b4e:	82 81       	ldd	r24, Z+2	; 0x02
    4b50:	81 30       	cpi	r24, 0x01	; 1
    4b52:	a9 f4       	brne	.+42     	; 0x4b7e <ICR_EXTI+0x7e>
		Timer_enuReadTCNT(Timer_AstrTimerConfig,&ptr->TCNT_ULTR);
    4b54:	89 81       	ldd	r24, Y+1	; 0x01
    4b56:	9a 81       	ldd	r25, Y+2	; 0x02
    4b58:	03 96       	adiw	r24, 0x03	; 3
    4b5a:	9c 01       	movw	r18, r24
    4b5c:	8e e9       	ldi	r24, 0x9E	; 158
    4b5e:	90 e0       	ldi	r25, 0x00	; 0
    4b60:	b9 01       	movw	r22, r18
    4b62:	0e 94 8a 0a 	call	0x1514	; 0x1514 <Timer_enuReadTCNT>
		ptr->Counter_ULTR = ptr->Counter;
    4b66:	e9 81       	ldd	r30, Y+1	; 0x01
    4b68:	fa 81       	ldd	r31, Y+2	; 0x02
    4b6a:	80 81       	ld	r24, Z
    4b6c:	91 81       	ldd	r25, Z+1	; 0x01
    4b6e:	e9 81       	ldd	r30, Y+1	; 0x01
    4b70:	fa 81       	ldd	r31, Y+2	; 0x02
    4b72:	95 83       	std	Z+5, r25	; 0x05
    4b74:	84 83       	std	Z+4, r24	; 0x04
		ptr->state_EXTI = 2;
    4b76:	e9 81       	ldd	r30, Y+1	; 0x01
    4b78:	fa 81       	ldd	r31, Y+2	; 0x02
    4b7a:	82 e0       	ldi	r24, 0x02	; 2
    4b7c:	82 83       	std	Z+2, r24	; 0x02
	}
}
    4b7e:	0f 90       	pop	r0
    4b80:	0f 90       	pop	r0
    4b82:	0f 90       	pop	r0
    4b84:	0f 90       	pop	r0
    4b86:	cf 91       	pop	r28
    4b88:	df 91       	pop	r29
    4b8a:	08 95       	ret

00004b8c <ICR_TIMER0>:

void ICR_TIMER0(void * x){
    4b8c:	df 93       	push	r29
    4b8e:	cf 93       	push	r28
    4b90:	00 d0       	rcall	.+0      	; 0x4b92 <ICR_TIMER0+0x6>
    4b92:	00 d0       	rcall	.+0      	; 0x4b94 <ICR_TIMER0+0x8>
    4b94:	cd b7       	in	r28, 0x3d	; 61
    4b96:	de b7       	in	r29, 0x3e	; 62
    4b98:	9c 83       	std	Y+4, r25	; 0x04
    4b9a:	8b 83       	std	Y+3, r24	; 0x03
	ULTR_T *ptr = x;
    4b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    4b9e:	9c 81       	ldd	r25, Y+4	; 0x04
    4ba0:	9a 83       	std	Y+2, r25	; 0x02
    4ba2:	89 83       	std	Y+1, r24	; 0x01
	ptr->Counter++;
    4ba4:	e9 81       	ldd	r30, Y+1	; 0x01
    4ba6:	fa 81       	ldd	r31, Y+2	; 0x02
    4ba8:	80 81       	ld	r24, Z
    4baa:	91 81       	ldd	r25, Z+1	; 0x01
    4bac:	01 96       	adiw	r24, 0x01	; 1
    4bae:	e9 81       	ldd	r30, Y+1	; 0x01
    4bb0:	fa 81       	ldd	r31, Y+2	; 0x02
    4bb2:	91 83       	std	Z+1, r25	; 0x01
    4bb4:	80 83       	st	Z, r24
}
    4bb6:	0f 90       	pop	r0
    4bb8:	0f 90       	pop	r0
    4bba:	0f 90       	pop	r0
    4bbc:	0f 90       	pop	r0
    4bbe:	cf 91       	pop	r28
    4bc0:	df 91       	pop	r29
    4bc2:	08 95       	ret

00004bc4 <ICR_TIMER1>:

void ICR_TIMER1(void * x){
    4bc4:	df 93       	push	r29
    4bc6:	cf 93       	push	r28
    4bc8:	00 d0       	rcall	.+0      	; 0x4bca <ICR_TIMER1+0x6>
    4bca:	cd b7       	in	r28, 0x3d	; 61
    4bcc:	de b7       	in	r29, 0x3e	; 62
    4bce:	9a 83       	std	Y+2, r25	; 0x02
    4bd0:	89 83       	std	Y+1, r24	; 0x01
	DIO_enuSetPinValue(TRIGERGROUP,TRIGERPIN,DIO_u8LOW);
    4bd2:	82 e0       	ldi	r24, 0x02	; 2
    4bd4:	62 e0       	ldi	r22, 0x02	; 2
    4bd6:	40 e0       	ldi	r20, 0x00	; 0
    4bd8:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>
	Timer_enuSetPrescaler((Timer_AstrTimerConfig + 1),0);
    4bdc:	86 ea       	ldi	r24, 0xA6	; 166
    4bde:	90 e0       	ldi	r25, 0x00	; 0
    4be0:	60 e0       	ldi	r22, 0x00	; 0
    4be2:	0e 94 cc 09 	call	0x1398	; 0x1398 <Timer_enuSetPrescaler>
}
    4be6:	0f 90       	pop	r0
    4be8:	0f 90       	pop	r0
    4bea:	cf 91       	pop	r28
    4bec:	df 91       	pop	r29
    4bee:	08 95       	ret

00004bf0 <Movement>:
void Movement(u8 Movment_state){
    4bf0:	df 93       	push	r29
    4bf2:	cf 93       	push	r28
    4bf4:	0f 92       	push	r0
    4bf6:	cd b7       	in	r28, 0x3d	; 61
    4bf8:	de b7       	in	r29, 0x3e	; 62
    4bfa:	89 83       	std	Y+1, r24	; 0x01
	if(Movment_state == Stop){
    4bfc:	89 81       	ldd	r24, Y+1	; 0x01
    4bfe:	88 23       	and	r24, r24
    4c00:	19 f5       	brne	.+70     	; 0x4c48 <Movement+0x58>
		DIO_enuSetPinValue(Moto1_Group1 ,Moto1_Pin1 ,DIO_u8LOW);
    4c02:	81 e0       	ldi	r24, 0x01	; 1
    4c04:	60 e0       	ldi	r22, 0x00	; 0
    4c06:	40 e0       	ldi	r20, 0x00	; 0
    4c08:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(Moto1_Group2 ,Moto1_Pin2 ,DIO_u8LOW);
    4c0c:	81 e0       	ldi	r24, 0x01	; 1
    4c0e:	61 e0       	ldi	r22, 0x01	; 1
    4c10:	40 e0       	ldi	r20, 0x00	; 0
    4c12:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(Moto2_Group1 ,Moto2_Pin1 ,DIO_u8LOW);
    4c16:	81 e0       	ldi	r24, 0x01	; 1
    4c18:	62 e0       	ldi	r22, 0x02	; 2
    4c1a:	40 e0       	ldi	r20, 0x00	; 0
    4c1c:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(Moto2_Group2 ,Moto2_Pin2 ,DIO_u8LOW);
    4c20:	81 e0       	ldi	r24, 0x01	; 1
    4c22:	63 e0       	ldi	r22, 0x03	; 3
    4c24:	40 e0       	ldi	r20, 0x00	; 0
    4c26:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>
		LCD_enuWriteCommand(0x80);
    4c2a:	80 e8       	ldi	r24, 0x80	; 128
    4c2c:	0e 94 75 1b 	call	0x36ea	; 0x36ea <LCD_enuWriteCommand>
		LCD_enuSendString("         ");
    4c30:	80 e6       	ldi	r24, 0x60	; 96
    4c32:	90 e0       	ldi	r25, 0x00	; 0
    4c34:	0e 94 8a 1b 	call	0x3714	; 0x3714 <LCD_enuSendString>
		LCD_enuWriteCommand(0x80);
    4c38:	80 e8       	ldi	r24, 0x80	; 128
    4c3a:	0e 94 75 1b 	call	0x36ea	; 0x36ea <LCD_enuWriteCommand>
		LCD_enuSendString("Stop");
    4c3e:	8a e6       	ldi	r24, 0x6A	; 106
    4c40:	90 e0       	ldi	r25, 0x00	; 0
    4c42:	0e 94 8a 1b 	call	0x3714	; 0x3714 <LCD_enuSendString>
    4c46:	57 c0       	rjmp	.+174    	; 0x4cf6 <Movement+0x106>
	}
	else{
		LCD_enuWriteCommand(0x80);
    4c48:	80 e8       	ldi	r24, 0x80	; 128
    4c4a:	0e 94 75 1b 	call	0x36ea	; 0x36ea <LCD_enuWriteCommand>
		LCD_enuSendString("         ");
    4c4e:	80 e6       	ldi	r24, 0x60	; 96
    4c50:	90 e0       	ldi	r25, 0x00	; 0
    4c52:	0e 94 8a 1b 	call	0x3714	; 0x3714 <LCD_enuSendString>
		LCD_enuWriteCommand(0x80);
    4c56:	80 e8       	ldi	r24, 0x80	; 128
    4c58:	0e 94 75 1b 	call	0x36ea	; 0x36ea <LCD_enuWriteCommand>
		if(Movment_state == Forward)
    4c5c:	89 81       	ldd	r24, Y+1	; 0x01
    4c5e:	89 30       	cpi	r24, 0x09	; 9
    4c60:	29 f4       	brne	.+10     	; 0x4c6c <Movement+0x7c>
			LCD_enuSendString("Forward");
    4c62:	8f e6       	ldi	r24, 0x6F	; 111
    4c64:	90 e0       	ldi	r25, 0x00	; 0
    4c66:	0e 94 8a 1b 	call	0x3714	; 0x3714 <LCD_enuSendString>
    4c6a:	1f c0       	rjmp	.+62     	; 0x4caa <Movement+0xba>
		else if(Movment_state == Right)
    4c6c:	89 81       	ldd	r24, Y+1	; 0x01
    4c6e:	88 30       	cpi	r24, 0x08	; 8
    4c70:	29 f4       	brne	.+10     	; 0x4c7c <Movement+0x8c>
			LCD_enuSendString("Right");
    4c72:	87 e7       	ldi	r24, 0x77	; 119
    4c74:	90 e0       	ldi	r25, 0x00	; 0
    4c76:	0e 94 8a 1b 	call	0x3714	; 0x3714 <LCD_enuSendString>
    4c7a:	17 c0       	rjmp	.+46     	; 0x4caa <Movement+0xba>
		else if(Movment_state == Left)
    4c7c:	89 81       	ldd	r24, Y+1	; 0x01
    4c7e:	81 30       	cpi	r24, 0x01	; 1
    4c80:	29 f4       	brne	.+10     	; 0x4c8c <Movement+0x9c>
			LCD_enuSendString("Left");
    4c82:	8d e7       	ldi	r24, 0x7D	; 125
    4c84:	90 e0       	ldi	r25, 0x00	; 0
    4c86:	0e 94 8a 1b 	call	0x3714	; 0x3714 <LCD_enuSendString>
    4c8a:	0f c0       	rjmp	.+30     	; 0x4caa <Movement+0xba>
		else if(Movment_state == Backward)
    4c8c:	89 81       	ldd	r24, Y+1	; 0x01
    4c8e:	86 30       	cpi	r24, 0x06	; 6
    4c90:	29 f4       	brne	.+10     	; 0x4c9c <Movement+0xac>
			LCD_enuSendString("Backward");
    4c92:	82 e8       	ldi	r24, 0x82	; 130
    4c94:	90 e0       	ldi	r25, 0x00	; 0
    4c96:	0e 94 8a 1b 	call	0x3714	; 0x3714 <LCD_enuSendString>
    4c9a:	07 c0       	rjmp	.+14     	; 0x4caa <Movement+0xba>
		else if(Movment_state == TurnRound)
    4c9c:	89 81       	ldd	r24, Y+1	; 0x01
    4c9e:	85 30       	cpi	r24, 0x05	; 5
    4ca0:	21 f4       	brne	.+8      	; 0x4caa <Movement+0xba>
			LCD_enuSendString("TurnRound");
    4ca2:	8b e8       	ldi	r24, 0x8B	; 139
    4ca4:	90 e0       	ldi	r25, 0x00	; 0
    4ca6:	0e 94 8a 1b 	call	0x3714	; 0x3714 <LCD_enuSendString>
		DIO_enuSetPinValue(Moto1_Group1 ,Moto1_Pin1 ,((Movment_state>>0) & 1));
    4caa:	89 81       	ldd	r24, Y+1	; 0x01
    4cac:	98 2f       	mov	r25, r24
    4cae:	91 70       	andi	r25, 0x01	; 1
    4cb0:	81 e0       	ldi	r24, 0x01	; 1
    4cb2:	60 e0       	ldi	r22, 0x00	; 0
    4cb4:	49 2f       	mov	r20, r25
    4cb6:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(Moto1_Group2 ,Moto1_Pin2 ,((Movment_state>>1) & 1));
    4cba:	89 81       	ldd	r24, Y+1	; 0x01
    4cbc:	86 95       	lsr	r24
    4cbe:	98 2f       	mov	r25, r24
    4cc0:	91 70       	andi	r25, 0x01	; 1
    4cc2:	81 e0       	ldi	r24, 0x01	; 1
    4cc4:	61 e0       	ldi	r22, 0x01	; 1
    4cc6:	49 2f       	mov	r20, r25
    4cc8:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(Moto2_Group1 ,Moto2_Pin1 ,((Movment_state>>2) & 1));
    4ccc:	89 81       	ldd	r24, Y+1	; 0x01
    4cce:	86 95       	lsr	r24
    4cd0:	86 95       	lsr	r24
    4cd2:	98 2f       	mov	r25, r24
    4cd4:	91 70       	andi	r25, 0x01	; 1
    4cd6:	81 e0       	ldi	r24, 0x01	; 1
    4cd8:	62 e0       	ldi	r22, 0x02	; 2
    4cda:	49 2f       	mov	r20, r25
    4cdc:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(Moto2_Group2 ,Moto2_Pin2 ,((Movment_state>>3) & 1));
    4ce0:	89 81       	ldd	r24, Y+1	; 0x01
    4ce2:	86 95       	lsr	r24
    4ce4:	86 95       	lsr	r24
    4ce6:	86 95       	lsr	r24
    4ce8:	98 2f       	mov	r25, r24
    4cea:	91 70       	andi	r25, 0x01	; 1
    4cec:	81 e0       	ldi	r24, 0x01	; 1
    4cee:	63 e0       	ldi	r22, 0x03	; 3
    4cf0:	49 2f       	mov	r20, r25
    4cf2:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_enuSetPinValue>
	}
}
    4cf6:	0f 90       	pop	r0
    4cf8:	cf 91       	pop	r28
    4cfa:	df 91       	pop	r29
    4cfc:	08 95       	ret

00004cfe <__mulsi3>:
    4cfe:	62 9f       	mul	r22, r18
    4d00:	d0 01       	movw	r26, r0
    4d02:	73 9f       	mul	r23, r19
    4d04:	f0 01       	movw	r30, r0
    4d06:	82 9f       	mul	r24, r18
    4d08:	e0 0d       	add	r30, r0
    4d0a:	f1 1d       	adc	r31, r1
    4d0c:	64 9f       	mul	r22, r20
    4d0e:	e0 0d       	add	r30, r0
    4d10:	f1 1d       	adc	r31, r1
    4d12:	92 9f       	mul	r25, r18
    4d14:	f0 0d       	add	r31, r0
    4d16:	83 9f       	mul	r24, r19
    4d18:	f0 0d       	add	r31, r0
    4d1a:	74 9f       	mul	r23, r20
    4d1c:	f0 0d       	add	r31, r0
    4d1e:	65 9f       	mul	r22, r21
    4d20:	f0 0d       	add	r31, r0
    4d22:	99 27       	eor	r25, r25
    4d24:	72 9f       	mul	r23, r18
    4d26:	b0 0d       	add	r27, r0
    4d28:	e1 1d       	adc	r30, r1
    4d2a:	f9 1f       	adc	r31, r25
    4d2c:	63 9f       	mul	r22, r19
    4d2e:	b0 0d       	add	r27, r0
    4d30:	e1 1d       	adc	r30, r1
    4d32:	f9 1f       	adc	r31, r25
    4d34:	bd 01       	movw	r22, r26
    4d36:	cf 01       	movw	r24, r30
    4d38:	11 24       	eor	r1, r1
    4d3a:	08 95       	ret

00004d3c <__udivmodsi4>:
    4d3c:	a1 e2       	ldi	r26, 0x21	; 33
    4d3e:	1a 2e       	mov	r1, r26
    4d40:	aa 1b       	sub	r26, r26
    4d42:	bb 1b       	sub	r27, r27
    4d44:	fd 01       	movw	r30, r26
    4d46:	0d c0       	rjmp	.+26     	; 0x4d62 <__udivmodsi4_ep>

00004d48 <__udivmodsi4_loop>:
    4d48:	aa 1f       	adc	r26, r26
    4d4a:	bb 1f       	adc	r27, r27
    4d4c:	ee 1f       	adc	r30, r30
    4d4e:	ff 1f       	adc	r31, r31
    4d50:	a2 17       	cp	r26, r18
    4d52:	b3 07       	cpc	r27, r19
    4d54:	e4 07       	cpc	r30, r20
    4d56:	f5 07       	cpc	r31, r21
    4d58:	20 f0       	brcs	.+8      	; 0x4d62 <__udivmodsi4_ep>
    4d5a:	a2 1b       	sub	r26, r18
    4d5c:	b3 0b       	sbc	r27, r19
    4d5e:	e4 0b       	sbc	r30, r20
    4d60:	f5 0b       	sbc	r31, r21

00004d62 <__udivmodsi4_ep>:
    4d62:	66 1f       	adc	r22, r22
    4d64:	77 1f       	adc	r23, r23
    4d66:	88 1f       	adc	r24, r24
    4d68:	99 1f       	adc	r25, r25
    4d6a:	1a 94       	dec	r1
    4d6c:	69 f7       	brne	.-38     	; 0x4d48 <__udivmodsi4_loop>
    4d6e:	60 95       	com	r22
    4d70:	70 95       	com	r23
    4d72:	80 95       	com	r24
    4d74:	90 95       	com	r25
    4d76:	9b 01       	movw	r18, r22
    4d78:	ac 01       	movw	r20, r24
    4d7a:	bd 01       	movw	r22, r26
    4d7c:	cf 01       	movw	r24, r30
    4d7e:	08 95       	ret

00004d80 <__divmodsi4>:
    4d80:	97 fb       	bst	r25, 7
    4d82:	09 2e       	mov	r0, r25
    4d84:	05 26       	eor	r0, r21
    4d86:	0e d0       	rcall	.+28     	; 0x4da4 <__divmodsi4_neg1>
    4d88:	57 fd       	sbrc	r21, 7
    4d8a:	04 d0       	rcall	.+8      	; 0x4d94 <__divmodsi4_neg2>
    4d8c:	d7 df       	rcall	.-82     	; 0x4d3c <__udivmodsi4>
    4d8e:	0a d0       	rcall	.+20     	; 0x4da4 <__divmodsi4_neg1>
    4d90:	00 1c       	adc	r0, r0
    4d92:	38 f4       	brcc	.+14     	; 0x4da2 <__divmodsi4_exit>

00004d94 <__divmodsi4_neg2>:
    4d94:	50 95       	com	r21
    4d96:	40 95       	com	r20
    4d98:	30 95       	com	r19
    4d9a:	21 95       	neg	r18
    4d9c:	3f 4f       	sbci	r19, 0xFF	; 255
    4d9e:	4f 4f       	sbci	r20, 0xFF	; 255
    4da0:	5f 4f       	sbci	r21, 0xFF	; 255

00004da2 <__divmodsi4_exit>:
    4da2:	08 95       	ret

00004da4 <__divmodsi4_neg1>:
    4da4:	f6 f7       	brtc	.-4      	; 0x4da2 <__divmodsi4_exit>
    4da6:	90 95       	com	r25
    4da8:	80 95       	com	r24
    4daa:	70 95       	com	r23
    4dac:	61 95       	neg	r22
    4dae:	7f 4f       	sbci	r23, 0xFF	; 255
    4db0:	8f 4f       	sbci	r24, 0xFF	; 255
    4db2:	9f 4f       	sbci	r25, 0xFF	; 255
    4db4:	08 95       	ret

00004db6 <__prologue_saves__>:
    4db6:	2f 92       	push	r2
    4db8:	3f 92       	push	r3
    4dba:	4f 92       	push	r4
    4dbc:	5f 92       	push	r5
    4dbe:	6f 92       	push	r6
    4dc0:	7f 92       	push	r7
    4dc2:	8f 92       	push	r8
    4dc4:	9f 92       	push	r9
    4dc6:	af 92       	push	r10
    4dc8:	bf 92       	push	r11
    4dca:	cf 92       	push	r12
    4dcc:	df 92       	push	r13
    4dce:	ef 92       	push	r14
    4dd0:	ff 92       	push	r15
    4dd2:	0f 93       	push	r16
    4dd4:	1f 93       	push	r17
    4dd6:	cf 93       	push	r28
    4dd8:	df 93       	push	r29
    4dda:	cd b7       	in	r28, 0x3d	; 61
    4ddc:	de b7       	in	r29, 0x3e	; 62
    4dde:	ca 1b       	sub	r28, r26
    4de0:	db 0b       	sbc	r29, r27
    4de2:	0f b6       	in	r0, 0x3f	; 63
    4de4:	f8 94       	cli
    4de6:	de bf       	out	0x3e, r29	; 62
    4de8:	0f be       	out	0x3f, r0	; 63
    4dea:	cd bf       	out	0x3d, r28	; 61
    4dec:	09 94       	ijmp

00004dee <__epilogue_restores__>:
    4dee:	2a 88       	ldd	r2, Y+18	; 0x12
    4df0:	39 88       	ldd	r3, Y+17	; 0x11
    4df2:	48 88       	ldd	r4, Y+16	; 0x10
    4df4:	5f 84       	ldd	r5, Y+15	; 0x0f
    4df6:	6e 84       	ldd	r6, Y+14	; 0x0e
    4df8:	7d 84       	ldd	r7, Y+13	; 0x0d
    4dfa:	8c 84       	ldd	r8, Y+12	; 0x0c
    4dfc:	9b 84       	ldd	r9, Y+11	; 0x0b
    4dfe:	aa 84       	ldd	r10, Y+10	; 0x0a
    4e00:	b9 84       	ldd	r11, Y+9	; 0x09
    4e02:	c8 84       	ldd	r12, Y+8	; 0x08
    4e04:	df 80       	ldd	r13, Y+7	; 0x07
    4e06:	ee 80       	ldd	r14, Y+6	; 0x06
    4e08:	fd 80       	ldd	r15, Y+5	; 0x05
    4e0a:	0c 81       	ldd	r16, Y+4	; 0x04
    4e0c:	1b 81       	ldd	r17, Y+3	; 0x03
    4e0e:	aa 81       	ldd	r26, Y+2	; 0x02
    4e10:	b9 81       	ldd	r27, Y+1	; 0x01
    4e12:	ce 0f       	add	r28, r30
    4e14:	d1 1d       	adc	r29, r1
    4e16:	0f b6       	in	r0, 0x3f	; 63
    4e18:	f8 94       	cli
    4e1a:	de bf       	out	0x3e, r29	; 62
    4e1c:	0f be       	out	0x3f, r0	; 63
    4e1e:	cd bf       	out	0x3d, r28	; 61
    4e20:	ed 01       	movw	r28, r26
    4e22:	08 95       	ret

00004e24 <_exit>:
    4e24:	f8 94       	cli

00004e26 <__stop_program>:
    4e26:	ff cf       	rjmp	.-2      	; 0x4e26 <__stop_program>
